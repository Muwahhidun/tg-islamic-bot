"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
"""
from typing import Optional

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.services.database_service import (
    UserService, ThemeService, BookService, LessonService
)
from bot.keyboards.user import (
    get_main_keyboard, get_themes_keyboard, get_books_keyboard,
    get_lessons_keyboard, get_lesson_control_keyboard,
    get_back_to_themes_keyboard, get_back_to_books_keyboard,
    get_search_results_keyboard
)
from bot.utils.decorators import user_required, user_required_callback
from bot.utils.audio_utils import AudioUtils


# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


class SearchState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    search_query = State()


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await UserService.get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üïå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∞—É–¥–∏–æ —É—Ä–æ–∫–∏ –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º –Ω–∞—É–∫–∞–º.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:\n"
        "üîπ –ê–∫—ã–¥–∞ - –û—Å–Ω–æ–≤—ã –≤–µ—Ä—ã\n"
        "üîπ –°–∏—Ä–∞ - –ñ–∏–∑–Ω—å –ø—Ä–æ—Ä–æ–∫–∞ Ô∑∫\n"
        "üîπ –§–∏–∫—Ö - –ò—Å–ª–∞–º—Å–∫–æ–µ –ø—Ä–∞–≤–æ\n"
        "üîπ –ê–¥–∞–± - –ò—Å–ª–∞–º—Å–∫–∏–π —ç—Ç–∏–∫–µ—Ç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard()
    )


@router.message(Command("id"))
@user_required
async def cmd_get_id(message: types.Message, user):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID
    """
    user_id = message.from_user.id
    
    info_text = (
        f"üÜî <b>–í–∞—à Telegram ID</b>\n\n"
        f"`{user_id}`\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å —ç—Ç–æ—Ç ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."
    )
    
    await message.answer(info_text, reply_markup=get_main_keyboard())


@router.message(Command("help"))
@user_required
async def cmd_help(message: types.Message, user):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "üïå <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìö <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "üìñ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3. –ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —É—Ä–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è finding —É—Ä–æ–∫–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n\n"
        "üîç <b>–ü–æ–∏—Å–∫:</b>\n"
        "–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏ —Ç–µ–≥–∞–º\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /id, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID, "
        "–µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
    )
    
    await message.answer(help_text, reply_markup=get_main_keyboard())


@router.message(F.text == "üìö –°–ø–∏—Å–æ–∫ —Ç–µ–º")
@user_required
async def show_themes(message: types.Message, user=None):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    """
    themes = await ThemeService.get_all_active_themes()
    
    if not themes:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º")
        return
    
    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
    keyboard = get_themes_keyboard(themes)
    
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("theme_"))
@user_required_callback
async def show_books(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
    """
    theme_id = int(callback.data.split("_")[1])
    theme = await ThemeService.get_theme_by_id(theme_id)
    
    if not theme:
        await callback.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    books = await BookService.get_books_by_theme(theme_id)
    
    if not books:
        await callback.answer("üì≠ –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥", show_alert=True)
        return
    
    text = f"üìñ –¢–µ–º–∞: {theme.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:"
    keyboard = get_books_keyboard(books)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("book_"))
@user_required_callback
async def show_lessons(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    """
    book_id = int(callback.data.split("_")[1])
    book = await BookService.get_book_by_id(book_id)
    
    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    lessons = await LessonService.get_lessons_by_book(book_id)
    
    if not lessons:
        await callback.answer("üì≠ –í —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return
    
    text = (
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n\n"
        f"–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ ({len(lessons)}):"
    )
    keyboard = get_lessons_keyboard(lessons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("lesson_"))
@user_required_callback
async def play_lesson(callback: types.CallbackQuery):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    """
    lesson_id = int(callback.data.split("_")[1])
    lesson = await LessonService.get_lesson_by_id(lesson_id)
    
    if not lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    if not lesson.has_audio():
        await callback.answer("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not AudioUtils.file_exists(lesson.audio_path):
        await callback.answer("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞
    caption = (
        f"üéß {lesson.display_title}\n\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book_title}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author_info if lesson.book and lesson.book.author else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if lesson.tags_list:
        tags_text = ", ".join(lesson.tags_list)
        caption += f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n"
    
    caption += "\n"
    
    if lesson.description:
        caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}"
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = get_lesson_control_keyboard(lesson)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        with open(lesson.audio_path, 'rb') as audio_file:
            await callback.message.answer_audio(
                audio=audio_file,
                title=lesson.title,
                caption=caption,
                reply_markup=keyboard
            )
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {e}", show_alert=True)
        return
    
    await callback.answer()


@router.callback_query(F.data.startswith("prev_"))
@user_required_callback
async def previous_lesson(callback: types.CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)
    
    if not current_lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∫–Ω–∏–≥–∏
    lessons = await LessonService.get_lessons_by_book(current_lesson.book_id)
    
    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break
    
    if current_index is None or current_index == 0:
        await callback.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ –∫–Ω–∏–≥–µ", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    prev_lesson = lessons[current_index - 1]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞
    callback.data = f"lesson_{prev_lesson.id}"
    await play_lesson(callback)


@router.callback_query(F.data.startswith("next_"))
@user_required_callback
async def next_lesson(callback: types.CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)
    
    if not current_lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∫–Ω–∏–≥–∏
    lessons = await LessonService.get_lessons_by_book(current_lesson.book_id)
    
    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break
    
    if current_index is None or current_index == len(lessons) - 1:
        await callback.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ –∫–Ω–∏–≥–µ", show_alert=True)
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    next_lesson = lessons[current_index + 1]
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    callback.data = f"lesson_{next_lesson.id}"
    await play_lesson(callback)


@router.callback_query(F.data.startswith("back_to_book_"))
@user_required_callback
async def back_to_book(callback: types.CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ
    """
    book_id = int(callback.data.split("_")[3])
    callback.data = f"book_{book_id}"
    await show_lessons(callback)


@router.callback_query(F.data == "back_to_themes")
@user_required_callback
async def back_to_themes(callback: types.CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–∞–º
    """
    await show_themes(callback.message)


@router.callback_query(F.data.startswith("back_to_books"))
@user_required_callback
async def back_to_books(callback: types.CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–∞–º
    """
    parts = callback.data.split("_")
    if len(parts) > 3:  # back_to_books_theme_id –∏–º–µ–µ—Ç 4+ —á–∞—Å—Ç–µ–π
        # –§–æ—Ä–º–∞—Ç: back_to_books_theme_id –∏–ª–∏ back_to_books_1
        theme_id = int(parts[-1])
        callback.data = f"theme_{theme_id}"
        await show_books(callback)
    else:
        # –û–±—â–∏–π –≤–æ–∑–≤—Ä–∞—Ç (–ø—Ä–æ—Å—Ç–æ "back_to_books")
        await show_themes(callback.message)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤")
@user_required
async def start_search(message: types.Message, state: FSMContext, user):
    """
    –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤
    """
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    await state.set_state(SearchState.search_query)


@router.message(SearchState.search_query)
@user_required
async def process_search(message: types.Message, state: FSMContext, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤
    lessons = await LessonService.search_lessons(query)
    
    if not lessons:
        await message.answer(
            f"üì≠ –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª ({len(lessons)}):"
    keyboard = get_search_results_keyboard(lessons, query)
    
    await message.answer(text, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data == "new_search")
@user_required_callback
async def new_search(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    """
    await start_search(callback.message, state)


@router.message(F.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
@user_required
async def about_project(message: types.Message, user):
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
    """
    about_text = (
        "üïå <b>–û–± –∞—É–¥–∏–æ –±–æ—Ç–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ª–∞–º—Å–∫–∏—Ö –Ω–∞—É–∫</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—É–¥–∏–æ —É—Ä–æ–∫–∞–º –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º –Ω–∞—É–∫–∞–º.\n\n"
        "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ê–∫—ã–¥–∞ - –û—Å–Ω–æ–≤—ã –≤–µ—Ä—ã –∏ –µ–¥–∏–Ω–æ–±–æ–∂–∏—è\n"
        "‚Ä¢ –°–∏—Ä–∞ - –ñ–∏–∑–Ω—å –ø—Ä–æ—Ä–æ–∫–∞ –ú—É—Ö–∞–º–º–∞–¥–∞ Ô∑∫\n"
        "‚Ä¢ –§–∏–∫—Ö - –ò—Å–ª–∞–º—Å–∫–æ–µ –ø—Ä–∞–≤–æ –∏ –ø–æ–∫–ª–æ–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ –ê–¥–∞–± - –ò—Å–ª–∞–º—Å–∫–∏–π —ç—Ç–∏–∫–µ—Ç –∏ –Ω—Ä–∞–≤—ã\n\n"
        "üéß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —É—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è\n\n"
        "ü§≤ <i>–ü—É—Å—Ç—å Allah –ø—Ä–∏–º–µ—Ç —ç—Ç–æ—Ç —Ç—Ä—É–¥ –∏ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ –ø–æ–ª–µ–∑–Ω—ã–º –¥–ª—è —É–º–º—ã!</i>"
    )
    
    await message.answer(about_text, reply_markup=get_main_keyboard())