from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.states.feedback_states import FeedbackStates
from bot.services.database_service import (
    create_feedback,
    get_feedbacks_by_user,
    get_user_by_telegram_id
)
from bot.utils.decorators import user_required_callback, user_required
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "feedback")
@user_required_callback
async def feedback_menu(callback: CallbackQuery, state: FSMContext, user):
    """–ú–µ–Ω—é –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await state.clear()

    text = (
        "üí¨ <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
        "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="feedback_write")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_feedbacks")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "feedback_write")
@user_required_callback
async def start_feedback_write(callback: CallbackQuery, state: FSMContext, user):
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞
    await state.update_data(
        feedback_message_id=callback.message.message_id,
        feedback_chat_id=callback.message.chat.id
    )

    text = (
        "‚úçÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "(–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="feedback")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(FeedbackStates.entering_message)
    await callback.answer()


@router.message(FeedbackStates.entering_message)
@user_required
async def save_feedback(message: Message, state: FSMContext, user):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    data = await state.get_data()
    message_id = data.get("feedback_message_id")
    chat_id = data.get("feedback_chat_id")

    message_text = message.text.strip()

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ç—Ç–µ—Ä–Ω –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞)
    try:
        await message.delete()
    except:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(message_text) < 10:
        text = "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="feedback")]
        ])
        await message.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
        return

    if len(message_text) > 2000:
        message_text = message_text[:2000]

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
    try:
        feedback = await create_feedback(
            user_id=user.id,
            message_text=message_text
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        import os
        admin_telegram_id = int(os.getenv("ADMIN_TELEGRAM_ID"))

        admin_text = (
            f"üÜï <b>–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{feedback.id}</b>\n\n"
            f"–û—Ç: {user.username or user.full_name} (ID: {user.telegram_id})\n"
            f"–î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"{message_text}\n\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        )

        admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"feedback_reply_{feedback.id}")],
            [InlineKeyboardButton(text="üì® –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_feedbacks")]
        ])

        try:
            await message.bot.send_message(
                chat_id=admin_telegram_id,
                text=admin_text,
                reply_markup=admin_keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–∞—Ç—Ç–µ—Ä–Ω –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞)
        text = (
            "‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{feedback.id}\n"
            f"–î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", callback_data="my_feedbacks")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        await message.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=text,
            reply_markup=keyboard
        )
        await state.clear()


@router.callback_query(F.data == "my_feedbacks")
@user_required_callback
async def show_my_feedbacks(callback: CallbackQuery, state: FSMContext, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()

    feedbacks = await get_feedbacks_by_user(user.id)

    if not feedbacks:
        text = (
            "üìã <b>–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="feedback_write")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="feedback")]
        ])
    else:
        text = f"üìã <b>–ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è ({len(feedbacks)})</b>\n\n"

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        new_feedbacks = [f for f in feedbacks if f.status == "new"]
        replied_feedbacks = [f for f in feedbacks if f.status == "replied"]
        closed_feedbacks = [f for f in feedbacks if f.status == "closed"]

        if new_feedbacks:
            text += f"üÜï <b>–ù–æ–≤—ã–µ ({len(new_feedbacks)}):</b>\n"
            for feedback in new_feedbacks[:5]:
                short_text = feedback.message_text[:50] + "..." if len(feedback.message_text) > 50 else feedback.message_text
                text += f"‚Ä¢ #{feedback.id} | {feedback.created_at.strftime('%d.%m.%Y')}\n"
            text += "\n"

        if replied_feedbacks:
            text += f"‚úÖ <b>–û—Ç–≤–µ—á–µ–Ω–æ ({len(replied_feedbacks)}):</b>\n"
            for feedback in replied_feedbacks[:5]:
                text += f"‚Ä¢ #{feedback.id} | {feedback.created_at.strftime('%d.%m.%Y')}\n"
            text += "\n"

        if closed_feedbacks:
            text += f"üîí <b>–ó–∞–∫—Ä—ã—Ç–æ ({len(closed_feedbacks)}):</b>\n"
            for feedback in closed_feedbacks[:3]:
                text += f"‚Ä¢ #{feedback.id} | {feedback.created_at.strftime('%d.%m.%Y')}\n"
            text += "\n"

        text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:"

        # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
        keyboard_buttons = []
        for feedback in feedbacks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            button_text = f"{feedback.status_emoji} #{feedback.id} | {feedback.created_at.strftime('%d.%m')}"
            keyboard_buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"view_feedback_{feedback.id}"
            )])

        keyboard_buttons.append([InlineKeyboardButton(text="üí¨ –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="feedback_write")])
        keyboard_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="feedback")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("view_feedback_"))
@user_required_callback
async def view_feedback(callback: CallbackQuery, state: FSMContext, user):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—â–µ–Ω–∏—è"""
    await state.clear()

    feedback_id = int(callback.data.split("_")[2])

    from bot.services.database_service import get_feedback_by_id
    feedback = await get_feedback_by_id(feedback_id)

    if not feedback or feedback.user_id != user.id:
        await callback.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    text = (
        f"üí¨ <b>–û–±—Ä–∞—â–µ–Ω–∏–µ #{feedback.id}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {feedback.status_emoji} {feedback.status_name}\n"
        f"–î–∞—Ç–∞: {feedback.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        f"<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        f"{feedback.message_text}\n\n"
    )

    if feedback.admin_reply:
        text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            f"<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            f"{feedback.admin_reply}\n\n"
            f"–î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {feedback.replied_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        )

    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –æ–±—Ä–∞—â–µ–Ω–∏—è–º", callback_data="my_feedbacks")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()
