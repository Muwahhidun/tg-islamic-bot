"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.services.database_service import (
    LessonTeacherService,
    get_themes_by_teacher,
    get_books_by_teacher_and_theme,
    get_series_by_teacher_and_book,
    BookService,
    get_series_by_id,
    get_test_by_series,
    LessonService,
    get_questions_by_lesson,
    get_bookmark_by_user_and_lesson,
    get_user_by_telegram_id,
    update_lesson,
    count_user_bookmarks,
    get_lesson_by_id,
    create_bookmark,
    get_bookmark_by_id,
    update_bookmark_name,
    delete_bookmark,
)
from bot.keyboards.user import (
    get_teachers_keyboard,
    get_teacher_themes_keyboard,
    get_teacher_books_keyboard,
    get_teacher_series_keyboard,
    get_teacher_series_menu_keyboard,
    get_teacher_lessons_keyboard,
    get_teacher_lesson_control_keyboard,
)
from bot.utils.decorators import user_required_callback
from bot.utils.audio_utils import AudioUtils
from bot.states.bookmark_states import BookmarkStates
from bot.handlers.user.bookmarks import MAX_BOOKMARKS

router = Router()


async def safe_edit_or_send(callback: CallbackQuery, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
    except Exception:
        # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –∞—É–¥–∏–æ/–º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ)
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(text, reply_markup=reply_markup)


@router.callback_query(F.data == "show_teachers")
@user_required_callback
async def show_teachers_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teachers = await LessonTeacherService.get_all_active_teachers()

    text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    keyboard = get_teachers_keyboard(teachers)

    if not teachers:
        text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"

    await safe_edit_or_send(callback, text, reply_markup=keyboard if teachers else None)
    await callback.answer()


@router.callback_query(F.data.startswith("teacher_nav_"))
@user_required_callback
async def show_teacher_themes(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teacher_id = int(callback.data.split("_")[2])
    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)

    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    themes = await get_themes_by_teacher(teacher_id)

    if not themes:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º", show_alert=True)
        return

    text = f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
    keyboard = get_teacher_themes_keyboard(themes, teacher_id)

    await safe_edit_or_send(callback, text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_theme_\d+$"))
@user_required_callback
async def show_teacher_books(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    theme_id = int(parts[3])

    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)
    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    books = await get_books_by_teacher_and_theme(teacher_id, theme_id)

    if not books:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–Ω–∏–≥ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–æ–π
    theme_name = books[0].theme.name if books and books[0].theme else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"
    text = (
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"üìö –¢–µ–º–∞: {theme_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:"
    )
    keyboard = get_teacher_books_keyboard(books, teacher_id, theme_id)

    await safe_edit_or_send(callback, text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_book_\d+$"))
@user_required_callback
async def show_teacher_series(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    book_id = int(parts[3])

    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)
    book = await BookService.get_book_by_id(book_id)

    if not teacher or not book:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    series_list = await get_series_by_teacher_and_book(teacher_id, book_id)

    if not series_list:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ—Ä–∏–π –ø–æ –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ", show_alert=True)
        return

    text = (
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"üìö –¢–µ–º–∞: {book.theme.name if book.theme else '–ë–µ–∑ —Ç–µ–º—ã'}\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book.author_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:"
    )
    keyboard = get_teacher_series_keyboard(series_list, teacher_id, book_id)

    await safe_edit_or_send(callback, text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_series_\d+$"))
@user_required_callback
async def show_teacher_series_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–µ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (–£—Ä–æ–∫–∏ / –¢–µ—Å—Ç / –ù–∞–∑–∞–¥)
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    series_id = int(parts[3])

    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–µ—Ä–∏–∏
    test = await get_test_by_series(series_id)
    has_test = test is not None

    text = (
        f"üìÅ <b>{series.year} - {series.name}</b>\n\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher.name if series.teacher else '???'}\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{series.book.name}¬ª ({series.book.author_info})\n"
        f"üéß –£—Ä–æ–∫–æ–≤: {series.active_lessons_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # –ü–æ–ª—É—á–∞–µ–º book_id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    book_id = series.book_id if series.book_id else 0
    keyboard = get_teacher_series_menu_keyboard(series_id, teacher_id, book_id, has_test)

    await safe_edit_or_send(callback, text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_series_lessons_\d+$"))
@user_required_callback
async def show_teacher_series_lessons(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    series_id = int(parts[4])  # teacher_X_series_lessons_Y -> parts[4] = Y

    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    lessons = await LessonService.get_lessons_by_series(series_id)

    if not lessons:
        await callback.answer("üì≠ –í —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
    # –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
    has_tests = {}

    text = (
        f"üìÅ <b>{series.year} - {series.name}</b>\n\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher.name if series.teacher else '???'}\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{series.book.name}¬ª\n\n"
        f"üéß –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ ({len(lessons)}):"
    )

    # –ü–æ–ª—É—á–∞–µ–º book_id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    book_id = series.book_id if series.book_id else 0
    keyboard = get_teacher_lessons_keyboard(lessons, series_id, teacher_id, book_id, has_tests)

    await safe_edit_or_send(callback, text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_teachers")
@user_required_callback
async def back_to_teachers_handler(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teachers = await LessonTeacherService.get_all_active_teachers()

    text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    keyboard = get_teachers_keyboard(teachers)

    if not teachers:
        text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"

    await safe_edit_or_send(callback, text, reply_markup=keyboard if teachers else None)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_play_lesson_\d+$"))
@user_required_callback
async def play_teacher_lesson(callback: CallbackQuery):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_play_lesson_Y
    lesson_id = int(parts[4])   # teacher_X_play_lesson_Y

    lesson = await LessonService.get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not lesson.has_audio():
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not AudioUtils.file_exists(lesson.audio_path):
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞
    caption = (
        f"üéß –£—Ä–æ–∫ {lesson.lesson_number}\n\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book_title}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author_info if lesson.book and lesson.book.author else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if lesson.tags_list:
        tags_text = ", ".join(lesson.tags_list)
        caption += f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n"

    caption += "\n"

    if lesson.description:
        caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    has_test = False
    if lesson.series_id:
        test = await get_test_by_series(lesson.series_id)
        if test and test.is_active:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
            questions = await get_questions_by_lesson(test.id, lesson.id)
            has_test = len(questions) > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
    has_bookmark = False
    user = await get_user_by_telegram_id(callback.from_user.id)
    if user:
        bookmark = await get_bookmark_by_user_and_lesson(user.id, lesson_id)
        if bookmark:
            has_bookmark = True

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!)
    keyboard = get_teacher_lesson_control_keyboard(
        lesson,
        teacher_id=teacher_id,
        has_test=has_test,
        has_bookmark=has_bookmark
    )

    # –ü–ê–¢–¢–ï–†–ù –û–î–ù–û–ì–û –û–ö–ù–ê: —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–±—ã—Å—Ç—Ä–æ!)
        if lesson.telegram_file_id:
            sent_message = await callback.message.answer_audio(
                audio=lesson.telegram_file_id,
                caption=caption,
                reply_markup=keyboard
            )
        else:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            audio_file = FSInputFile(lesson.audio_path)
            sent_message = await callback.message.answer_audio(
                audio=audio_file,
                title=lesson.title,
                caption=caption,
                reply_markup=keyboard
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            if sent_message.audio:
                lesson.telegram_file_id = sent_message.audio.file_id
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                await update_lesson(lesson)

    except Exception as e:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è alert (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
        error_msg = str(e)[:150]
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {error_msg}", show_alert=True)
        return

    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_prev_\d+$"))
@user_required_callback
async def teacher_previous_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É –≤ —Å–µ—Ä–∏–∏ (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
    """
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_prev_Y
    current_lesson_id = int(parts[3])  # teacher_X_prev_Y

    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not current_lesson.series_id:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    lessons = await LessonService.get_lessons_by_series(current_lesson.series_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    prev_lesson = lessons[current_index - 1]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å teacher –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"teacher_{teacher_id}_play_lesson_{prev_lesson.id}")
    await play_teacher_lesson(new_callback)


@router.callback_query(F.data.regexp(r"^teacher_\d+_next_\d+$"))
@user_required_callback
async def teacher_next_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –≤ —Å–µ—Ä–∏–∏ (—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è)
    """
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_next_Y
    current_lesson_id = int(parts[3])  # teacher_X_next_Y

    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not current_lesson.series_id:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    lessons = await LessonService.get_lessons_by_series(current_lesson.series_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == len(lessons) - 1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    next_lesson = lessons[current_index + 1]

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å teacher –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"teacher_{teacher_id}_play_lesson_{next_lesson.id}")
    await play_teacher_lesson(new_callback)


# ==================== –ó–ê–ö–õ–ê–î–ö–ò –° –ö–û–ù–¢–ï–ö–°–¢–û–ú –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ====================

@router.callback_query(F.data.regexp(r"^teacher_\d+_add_bookmark_\d+$"))
@user_required_callback
async def teacher_add_bookmark_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_add_bookmark_Y
    lesson_id = int(parts[4])

    user = await get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫
    bookmarks_count = await count_user_bookmarks(user.id)
    
    if bookmarks_count >= MAX_BOOKMARKS:
        text = (
            "‚ùå <b>–õ–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫</b>\n\n"
            f"–£ –≤–∞—Å —É–∂–µ {MAX_BOOKMARKS} –∑–∞–∫–ª–∞–¥–æ–∫ (–º–∞–∫—Å–∏–º—É–º).\n\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmarks")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"teacher_{teacher_id}_play_lesson_{lesson_id}")]
        ])
        
        await callback.message.edit_caption(caption=text, reply_markup=keyboard)
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
    existing_bookmark = await get_bookmark_by_user_and_lesson(user.id, lesson_id)
    if existing_bookmark:
        await callback.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(
        lesson_id=lesson_id,
        teacher_id=teacher_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º teacher_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        bookmark_message_id=callback.message.message_id,
        bookmark_chat_id=callback.message.chat.id
    )
    await state.set_state(BookmarkStates.entering_name)
    
    text = (
        "üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        f"üéß –£—Ä–æ–∫ {lesson.lesson_number}\n"
    )
    
    if lesson.book and lesson.book.theme:
        text += f"üìö –¢–µ–º–∞: {lesson.book.theme.name}\n"
    if lesson.book:
        text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book.name}¬ª\n"
    
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏:"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"teacher_{teacher_id}_play_lesson_{lesson_id}")]
    ])
    
    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_remove_bookmark_\d+$"))
@user_required_callback
async def teacher_remove_bookmark_from_lesson(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞ —É—Ä–æ–∫–∞ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_remove_bookmark_Y
    lesson_id = int(parts[4])

    user = await get_user_by_telegram_id(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–ª–∞–¥–∫—É
    bookmark = await get_bookmark_by_user_and_lesson(user.id, lesson_id)
    
    if not bookmark:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–æ–π
    lesson = bookmark.lesson
    
    text = f"üìå <b>–ó–∞–∫–ª–∞–¥–∫–∞: \"{bookmark.custom_name}\"</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"üéß <b>–£—Ä–æ–∫ {lesson.lesson_number}</b>\n\n"
    
    if lesson.book and lesson.book.theme:
        text += f"üìö –¢–µ–º–∞: {lesson.book.theme.name}\n"
    if lesson.book:
        text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book.name}¬ª\n"
    if lesson.book and lesson.book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author.name}\n"
    if lesson.teacher:
        text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher.name}\n"
    if lesson.series:
        text += f"üìÅ –°–µ—Ä–∏—è: {lesson.series.display_name}\n"
    
    text += f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {bookmark.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º teacher_id –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∑–∞–∫–ª–∞–¥–∫–æ–π
    await state.update_data(teacher_id=teacher_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"teacher_{teacher_id}_bookmark_rename_{bookmark.id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É", callback_data=f"teacher_{teacher_id}_bookmark_delete_{bookmark.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"teacher_{teacher_id}_play_lesson_{lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_bookmark_rename_\d+$"))
@user_required_callback
async def teacher_bookmark_rename_start(callback: CallbackQuery, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_bookmark_rename_Y
    bookmark_id = int(parts[4])

    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å teacher_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    await state.update_data(
        bookmark_id=bookmark_id,
        teacher_id=teacher_id,
        rename_message_id=callback.message.message_id,
        rename_chat_id=callback.message.chat.id
    )
    await state.set_state(BookmarkStates.renaming)

    text = (
        "‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
        f"\"{bookmark.custom_name}\"\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"teacher_{teacher_id}_remove_bookmark_{bookmark.lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_bookmark_delete_\d+$") & ~F.data.regexp(r"^teacher_\d+_bookmark_delete_confirm_\d+$"))
@user_required_callback
async def teacher_bookmark_delete_confirm(callback: CallbackQuery, state: FSMContext, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_bookmark_delete_Y
    bookmark_id = int(parts[4])

    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É?\n\n"
        f"üìå \"{bookmark.custom_name}\""
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"teacher_{teacher_id}_bookmark_delete_confirm_{bookmark_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"teacher_{teacher_id}_remove_bookmark_{bookmark.lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_bookmark_delete_confirm_\d+$"))
@user_required_callback
async def teacher_bookmark_delete_execute(callback: CallbackQuery, state: FSMContext, user):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_bookmark_delete_confirm_Y
    bookmark_id = int(parts[5])

    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    lesson_id = bookmark.lesson_id

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
    success = await delete_bookmark(bookmark_id)

    if success:
        text = "‚úÖ <b>–ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"teacher_{teacher_id}_play_lesson_{lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


# ==================== –¢–ï–°–¢–´ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø ====================

@router.callback_query(F.data.regexp(r"^teacher_\d+_lesson_test_\d+$"))
@user_required_callback
async def teacher_lesson_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Ä–æ–∫—É (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_lesson_test_Y
    lesson_id = int(parts[4])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º teacher_id –≤ FSM –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    await state.update_data(teacher_id=teacher_id)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∞ —É—Ä–æ–∫–∞
    from bot.handlers.user.tests import show_test_after_lesson
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"test_after_lesson_{lesson_id}")
    await show_test_after_lesson(new_callback, state)


@router.callback_query(F.data.regexp(r"^teacher_\d+_start_test_\d+_\d+$"))
@user_required_callback
async def teacher_start_test(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π) - –∫–Ω–æ–ø–∫–∞ '–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑'"""
    parts = callback.data.split("_")
    # teacher_X_start_test_Y_Z —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞: ['teacher', 'X', 'start', 'test', 'Y', 'Z']
    teacher_id = int(parts[1])  # X
    test_id = int(parts[4])     # Y
    lesson_id = int(parts[5])   # Z

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º teacher_id –≤ FSM –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    await state.update_data(teacher_id=teacher_id)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
    from bot.handlers.user.tests import start_test
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"start_test_{test_id}_{lesson_id}")
    await start_test(new_callback, state)


@router.callback_query(F.data.regexp(r"^teacher_\d+_general_test_\d+$"))
@user_required_callback
async def teacher_general_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ç–µ—Å—Ç –ø–æ –≤—Å–µ–π —Å–µ—Ä–∏–∏ (–∏–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    parts = callback.data.split("_")
    teacher_id = int(parts[1])  # teacher_X_general_test_Y
    series_id = int(parts[4])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º teacher_id –≤ FSM –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    await state.update_data(teacher_id=teacher_id)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∞ —Å–µ—Ä–∏–∏
    from bot.handlers.user.tests import show_general_test
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"general_test_{series_id}")
    await show_general_test(new_callback, state)
