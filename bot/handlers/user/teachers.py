"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.services.database_service import (
    LessonTeacherService,
    get_themes_by_teacher,
    get_books_by_teacher_and_theme,
    get_series_by_teacher_and_book,
    BookService,
)
from bot.keyboards.user import (
    get_teachers_keyboard,
    get_teacher_themes_keyboard,
    get_teacher_books_keyboard,
    get_teacher_series_keyboard,
)
from bot.utils.decorators import user_required_callback

router = Router()


@router.callback_query(F.data == "show_teachers")
@user_required_callback
async def show_teachers_handler(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teachers = await LessonTeacherService.get_all_active_teachers()

    text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    keyboard = get_teachers_keyboard(teachers)

    if not teachers:
        text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"

    await callback.message.edit_text(text, reply_markup=keyboard if teachers else None)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+$"))
@user_required_callback
async def show_teacher_themes(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teacher_id = int(callback.data.split("_")[1])
    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)

    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    themes = await get_themes_by_teacher(teacher_id)

    if not themes:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º", show_alert=True)
        return

    text = f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:"
    keyboard = get_teacher_themes_keyboard(themes, teacher_id)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_theme_\d+$"))
@user_required_callback
async def show_teacher_books(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    theme_id = int(parts[3])

    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)
    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    books = await get_books_by_teacher_and_theme(teacher_id, theme_id)

    if not books:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–Ω–∏–≥ –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–æ–π
    theme_name = books[0].theme.name if books and books[0].theme else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞"
    text = (
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"üìö –¢–µ–º–∞: {theme_name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:"
    )
    keyboard = get_teacher_books_keyboard(books, teacher_id, theme_id)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_\d+_book_\d+$"))
@user_required_callback
async def show_teacher_series(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    teacher_id = int(parts[1])
    book_id = int(parts[3])

    teacher = await LessonTeacherService.get_teacher_by_id(teacher_id)
    book = await BookService.get_book_by_id(book_id)

    if not teacher or not book:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    series_list = await get_series_by_teacher_and_book(teacher_id, book_id)

    if not series_list:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ—Ä–∏–π –ø–æ –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ", show_alert=True)
        return

    text = (
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"üìö –¢–µ–º–∞: {book.theme.name if book.theme else '–ë–µ–∑ —Ç–µ–º—ã'}\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: {book.author_info}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:"
    )
    keyboard = get_teacher_series_keyboard(series_list, teacher_id, book_id)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_teachers")
@user_required_callback
async def back_to_teachers_handler(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    teachers = await LessonTeacherService.get_all_active_teachers()

    text = "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:"
    keyboard = get_teachers_keyboard(teachers)

    if not teachers:
        text = "üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"

    await callback.message.edit_text(text, reply_markup=keyboard if teachers else None)
    await callback.answer()
