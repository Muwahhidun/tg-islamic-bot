"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–ª–∞–¥–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import user_required_callback
from bot.states.bookmark_states import BookmarkStates
from bot.services.database_service import (
    get_bookmarks_by_user,
    get_bookmark_by_id,
    get_bookmark_by_user_and_lesson,
    count_user_bookmarks,
    create_bookmark,
    update_bookmark_name,
    delete_bookmark,
    get_lesson_by_id
)

logger = logging.getLogger(__name__)
router = Router()

# –õ–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
MAX_BOOKMARKS = 20


# ==================== –°–ü–ò–°–û–ö –ó–ê–ö–õ–ê–î–û–ö ====================

@router.callback_query(F.data == "bookmarks")
@user_required_callback
async def show_bookmarks_list(callback: CallbackQuery, state: FSMContext, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()

    bookmarks = await get_bookmarks_by_user(user.id)

    if not bookmarks:
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
        text = (
            "üìå <b>–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–ª–∞–¥–æ–∫.\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –∑–∞–∫–ª–∞–¥–∫—É –Ω–∞ –ª—é–±–æ–π —É—Ä–æ–∫, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É\n"
            "\"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏\" –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ö —Ç–µ–º–∞–º", callback_data="show_themes")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞—É–¥–∏–æ —Å caption)
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥–æ–∫
    text = f"üìå <b>–ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n<b>–í—Å–µ–≥–æ:</b> {len(bookmarks)}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∞–¥–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–∫–ª–∞–¥–æ–∫
    builder = InlineKeyboardBuilder()

    for i, bookmark in enumerate(bookmarks, 1):
        date_str = bookmark.created_at.strftime('%d.%m.%Y')
        builder.add(InlineKeyboardButton(
            text=f"{i}Ô∏è‚É£ {bookmark.custom_name} | üìÖ {date_str}",
            callback_data=f"bookmark_{bookmark.id}"
        ))

    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    ))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞—É–¥–∏–æ —Å caption)
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(text, reply_markup=builder.as_markup())
    await callback.answer()


# ==================== –î–ï–¢–ê–õ–ò –ó–ê–ö–õ–ê–î–ö–ò ====================

@router.callback_query(F.data.startswith("bookmark_") & ~F.data.startswith("bookmark_open_")
                       & ~F.data.startswith("bookmark_rename_") & ~F.data.startswith("bookmark_delete_"))
@user_required_callback
async def show_bookmark_details(callback: CallbackQuery, state: FSMContext, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    await state.clear()

    bookmark_id = int(callback.data.split("_")[1])
    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–ª–∞–¥–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if bookmark.user_id != user.id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–∫–ª–∞–¥–∫–µ", show_alert=True)
        return

    lesson = bookmark.lesson

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    text = f"üìå <b>–ó–∞–∫–ª–∞–¥–∫–∞: \"{bookmark.custom_name}\"</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"üéß <b>–£—Ä–æ–∫ {lesson.lesson_number}:</b> {lesson.title}\n\n"

    # –¢–µ–º–∞
    if lesson.book and lesson.book.theme:
        text += f"üìö –¢–µ–º–∞: {lesson.book.theme.name}\n"

    # –ö–Ω–∏–≥–∞
    if lesson.book:
        text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book.name}¬ª\n"

    # –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
    if lesson.book and lesson.book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author.name}\n"

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    if lesson.teacher:
        text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher.name}\n"

    # –°–µ—Ä–∏—è
    if lesson.series:
        text += f"üìÅ –°–µ—Ä–∏—è: {lesson.series.display_name}\n"

    text += f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {bookmark.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéß –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫", callback_data=f"bookmark_open_{bookmark_id}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"bookmark_rename_{bookmark_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É", callback_data=f"bookmark_delete_{bookmark_id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–ª–∞–¥–∫–∞–º", callback_data="bookmarks")]
    ])

    # –ü—Ä–æ–±—É–µ–º edit_caption (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ), –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - edit_text
    try:
        await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    except:
        await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


# ==================== –û–¢–ö–†–´–¢–¨ –£–†–û–ö –ò–ó –ó–ê–ö–õ–ê–î–ö–ò ====================

@router.callback_query(F.data.startswith("bookmark_open_"))
@user_required_callback
async def open_lesson_from_bookmark(callback: CallbackQuery, state: FSMContext, user):
    """–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫ –∏–∑ –∑–∞–∫–ª–∞–¥–∫–∏"""
    await state.clear()

    bookmark_id = int(callback.data.split("_")[2])
    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ä–æ–∫–∞
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"lesson_{bookmark.lesson_id}")

    from bot.handlers.user.lessons import play_lesson
    await play_lesson(new_callback)


# ==================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–õ–ê–î–ö–ò ====================

@router.callback_query(F.data.startswith("add_bookmark_"))
@user_required_callback
async def add_bookmark_start(callback: CallbackQuery, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏ - –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è"""
    lesson_id = int(callback.data.split("_")[2])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫
    bookmarks_count = await count_user_bookmarks(user.id)

    if bookmarks_count >= MAX_BOOKMARKS:
        text = (
            "‚ùå <b>–õ–∏–º–∏—Ç –∑–∞–∫–ª–∞–¥–æ–∫</b>\n\n"
            f"–£ –≤–∞—Å —É–∂–µ {MAX_BOOKMARKS} –∑–∞–∫–ª–∞–¥–æ–∫ (–º–∞–∫—Å–∏–º—É–º).\n\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ."
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmarks")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")]
        ])

        await callback.message.edit_caption(caption=text, reply_markup=keyboard)
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–∫–ª–∞–¥–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫
    existing_bookmark = await get_bookmark_by_user_and_lesson(user.id, lesson_id)
    if existing_bookmark:
        await callback.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∞—Ö", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    await state.update_data(
        lesson_id=lesson_id,
        bookmark_message_id=callback.message.message_id,
        bookmark_chat_id=callback.message.chat.id
    )
    await state.set_state(BookmarkStates.entering_name)

    text = (
        "üìå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        f"üéß –£—Ä–æ–∫ {lesson.lesson_number}: {lesson.title}\n"
    )

    if lesson.book and lesson.book.theme:
        text += f"üìö –¢–µ–º–∞: {lesson.book.theme.name}\n"
    if lesson.book:
        text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book.name}¬ª\n"

    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏:"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"lesson_{lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.message(BookmarkStates.entering_name)
async def add_bookmark_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    lesson_id = data.get("lesson_id")
    message_id = data.get("bookmark_message_id")
    chat_id = data.get("bookmark_chat_id")

    custom_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(custom_name) > 200:
        custom_name = custom_name[:200]

    if not custom_name:
        await message.delete()
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ç—Ç–µ—Ä–Ω –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞)
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
    from bot.services.database_service import get_user_by_telegram_id
    user = await get_user_by_telegram_id(message.from_user.id)

    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞–∫–ª–∞–¥–∫—É
    try:
        bookmark = await create_bookmark(
            user_id=user.id,  # database user_id
            lesson_id=lesson_id,
            custom_name=custom_name
        )

        text = (
            "‚úÖ <b>–ó–∞–∫–ª–∞–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"üìå \"{custom_name}\""
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmarks")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")]
        ])

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")]
        ])
        await message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard
        )

    await state.clear()


# ==================== –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ó–ê–ö–õ–ê–î–ö–ò ====================

@router.callback_query(F.data.startswith("bookmark_rename_"))
@user_required_callback
async def rename_bookmark_start(callback: CallbackQuery, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏"""
    bookmark_id = int(callback.data.split("_")[2])
    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        bookmark_id=bookmark_id,
        rename_message_id=callback.message.message_id,
        rename_chat_id=callback.message.chat.id
    )
    await state.set_state(BookmarkStates.renaming)

    text = (
        "‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
        f"\"{bookmark.custom_name}\"\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"bookmark_{bookmark_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.message(BookmarkStates.renaming)
async def rename_bookmark_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏"""
    data = await state.get_data()
    bookmark_id = data.get("bookmark_id")
    message_id = data.get("rename_message_id")
    chat_id = data.get("rename_chat_id")

    new_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if len(new_name) > 200:
        new_name = new_name[:200]

    if not new_name:
        await message.delete()
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–∞—Ç—Ç–µ—Ä–Ω –æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞)
    try:
        await message.delete()
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    try:
        bookmark = await update_bookmark_name(bookmark_id, new_name)

        if bookmark:
            text = (
                "‚úÖ <b>–ó–∞–∫–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞!</b>\n\n"
                f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n"
                f"üìå \"{new_name}\""
            )
        else:
            text = "‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–ª–∞–¥–∫–µ", callback_data=f"bookmark_{bookmark_id}")]
        ])

        await message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏: {e}")
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bookmark_{bookmark_id}")]
        ])
        await message.bot.edit_message_caption(
            chat_id=chat_id,
            message_id=message_id,
            caption=text,
            reply_markup=keyboard
        )

    await state.clear()


# ==================== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–õ–ê–î–ö–ò ====================

@router.callback_query(F.data.startswith("bookmark_delete_") & ~F.data.startswith("bookmark_delete_confirm_"))
@user_required_callback
async def delete_bookmark_confirm(callback: CallbackQuery, state: FSMContext, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏"""
    await state.clear()

    bookmark_id = int(callback.data.split("_")[2])
    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É?\n\n"
        f"üìå \"{bookmark.custom_name}\""
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"bookmark_delete_confirm_{bookmark_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"bookmark_{bookmark_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("bookmark_delete_confirm_"))
@user_required_callback
async def delete_bookmark_execute(callback: CallbackQuery, state: FSMContext, user):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏"""
    await state.clear()

    bookmark_id = int(callback.data.split("_")[3])
    bookmark = await get_bookmark_by_id(bookmark_id)

    if not bookmark or bookmark.user_id != user.id:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–ª–∞–¥–∫—É
    success = await delete_bookmark(bookmark_id)

    if success:
        text = "‚úÖ <b>–ó–∞–∫–ª–∞–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>"
    else:
        text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–ª–∞–¥–∫–∏"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå –ú–æ–∏ –∑–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmarks")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()


# ==================== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ö–õ–ê–î–ö–ò –° –≠–ö–†–ê–ù–ê –£–†–û–ö–ê ====================

@router.callback_query(F.data.startswith("remove_bookmark_"))
@user_required_callback
async def remove_bookmark_from_lesson(callback: CallbackQuery, state: FSMContext, user):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É –ø—Ä—è–º–æ —Å —ç–∫—Ä–∞–Ω–∞ —É—Ä–æ–∫–∞ (–ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è)"""
    lesson_id = int(callback.data.split("_")[2])

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–ª–∞–¥–∫—É
    bookmark = await get_bookmark_by_user_and_lesson(user.id, lesson_id)

    if not bookmark:
        await callback.answer("‚ùå –ó–∞–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–æ–π (–∫–∞–∫ –≤ show_bookmark_details)
    lesson = bookmark.lesson

    text = f"üìå <b>–ó–∞–∫–ª–∞–¥–∫–∞: \"{bookmark.custom_name}\"</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"üéß <b>–£—Ä–æ–∫ {lesson.lesson_number}:</b> {lesson.title}\n\n"

    if lesson.book and lesson.book.theme:
        text += f"üìö –¢–µ–º–∞: {lesson.book.theme.name}\n"
    if lesson.book:
        text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book.name}¬ª\n"
    if lesson.book and lesson.book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author.name}\n"
    if lesson.teacher:
        text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher.name}\n"
    if lesson.series:
        text += f"üìÅ –°–µ—Ä–∏—è: {lesson.series.display_name}\n"

    text += f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {bookmark.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"bookmark_rename_{bookmark.id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É", callback_data=f"bookmark_delete_{bookmark.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"lesson_{lesson_id}")]
    ])

    await callback.message.edit_caption(caption=text, reply_markup=keyboard)
    await callback.answer()
