"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–∏—è–º–∏ —É—Ä–æ–∫–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from bot.services.database_service import (
    BookService,
    get_series_by_book,
    get_series_by_id,
    get_test_by_series,
    LessonService
)
from bot.keyboards.user import get_series_keyboard, get_series_menu_keyboard, get_lessons_keyboard
from bot.utils.decorators import user_required_callback

router = Router()


@router.callback_query(F.data.regexp(r"^book_\d+$"))
@user_required_callback
async def show_book_teachers(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫–Ω–∏–≥–∏
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    book_id = int(callback.data.split("_")[1])
    book = await BookService.get_book_by_id(book_id)

    if not book:
        await callback.answer("üìñ –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∏ —ç—Ç–æ–π –∫–Ω–∏–≥–∏
    series_list = await get_series_by_book(book_id)

    if not series_list:
        await callback.answer("üì≠ –í —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –∫–Ω–∏–≥–∏
    teachers = {}
    for series in series_list:
        if series.teacher_id and series.teacher:
            if series.teacher_id not in teachers:
                teachers[series.teacher_id] = series.teacher

    if not teachers:
        await callback.answer("üì≠ –í —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º book_id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    await state.update_data(current_book_id=book_id)

    text = ""
    if book.theme:
        text += f"üìö –¢–µ–º–∞: {book.theme.name}\n"
    text += (
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n\n"
        f"üéôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ({len(teachers)}):"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard_buttons = []
    for teacher in teachers.values():
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üéôÔ∏è {teacher.name}",
            callback_data=f"book_teacher_{book_id}_{teacher.id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º —Ç–µ–º—ã
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º",
        callback_data=f"theme_{book.theme_id}"
    )])
    keyboard_buttons.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("book_teacher_"))
@user_required_callback
async def show_teacher_series_for_book(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    parts = callback.data.split("_")
    book_id = int(parts[2])
    teacher_id = int(parts[3])

    book = await BookService.get_book_by_id(book_id)
    from bot.services.database_service import get_lesson_teacher_by_id
    teacher = await get_lesson_teacher_by_id(teacher_id)

    if not book or not teacher:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏
    series_list = await get_series_by_book(book_id)
    teacher_series = [s for s in series_list if s.teacher_id == teacher_id]

    if not teacher_series:
        await callback.answer("üì≠ –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–π –ø–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
    await state.update_data(current_book_id=book_id, current_teacher_id=teacher_id)

    text = ""
    if book.theme:
        text += f"üìö –¢–µ–º–∞: {book.theme.name}\n"
    text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
    text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n"
    text += (
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n\n"
        f"üìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é —É—Ä–æ–∫–æ–≤ ({len(teacher_series)}):"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–∏—è–º–∏
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard_buttons = []
    for series in teacher_series:
        lessons_count = series.active_lessons_count
        text_button = f"üìÅ {series.year} - {series.name} ({lessons_count} —É—Ä–æ–∫–æ–≤)"
        keyboard_buttons.append([InlineKeyboardButton(
            text=text_button,
            callback_data=f"series_{series.id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
    keyboard_buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º",
        callback_data=f"book_{book_id}"
    )])
    keyboard_buttons.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("series_") & ~F.data.startswith("series_lessons_"))
@user_required_callback
async def show_series_menu(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–µ—Ä–∏–∏ (–£—Ä–æ–∫–∏ / –û–±—â–∏–π —Ç–µ—Å—Ç / –ù–∞–∑–∞–¥)
    """
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    series_id = int(callback.data.split("_")[1])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("üìÅ –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º series_id, book_id –∏ teacher_id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(
        current_series_id=series_id,
        current_book_id=series.book_id,
        current_teacher_id=series.teacher_id
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    test = await get_test_by_series(series_id)
    has_test = test is not None and test.is_active

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
    text = ""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã –∏ –∞–≤—Ç–æ—Ä–∞
    from bot.services.database_service import get_book_by_id
    book = None
    if series.book_id:
        book = await get_book_by_id(series.book_id)

    # –¢–µ–º–∞
    if book and book.theme:
        text += f"üìö –¢–µ–º–∞: {book.theme.name}\n"

    # –ö–Ω–∏–≥–∞
    text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{series.book_title or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}¬ª\n"

    # –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
    if book and book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n"

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher_name}\n"

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏
    text += f"üìÅ –°–µ—Ä–∏—è: {series.display_name}\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"üéß –£—Ä–æ–∫–æ–≤: {series.active_lessons_count}\n"

    if series.total_duration_seconds > 0:
        text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series.formatted_total_duration}\n"

    if series.is_completed:
        text += "‚úÖ –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
    else:
        text += "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n"

    if series.description:
        text += f"\nüìÑ {series.description}\n"

    text += "\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"

    keyboard = get_series_menu_keyboard(series_id, has_test)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("series_lessons_"))
@user_required_callback
async def show_series_lessons(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Å—Ç–æ–≤
    """
    series_id = int(callback.data.split("_")[2])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("üìÅ –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    lessons = await LessonService.get_lessons_by_series(series_id)

    if not lessons:
        await callback.answer("üì≠ –í —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º series_id –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(current_series_id=series_id)

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
    # –ü–æ–∫–∞ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
    has_tests = {}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
    text = ""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã –∏ –∞–≤—Ç–æ—Ä–∞
    from bot.services.database_service import get_book_by_id
    book = None
    if series.book_id:
        book = await get_book_by_id(series.book_id)

    # –¢–µ–º–∞
    if book and book.theme:
        text += f"üìö –¢–µ–º–∞: {book.theme.name}\n"

    # –ö–Ω–∏–≥–∞
    text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{series.book_title or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}¬ª\n"

    # –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
    if book and book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n"

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher_name}\n"

    # –°–µ—Ä–∏—è
    text += f"üìÅ –°–µ—Ä–∏—è: {series.display_name}\n"

    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if series.total_duration_seconds > 0:
        text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series.formatted_total_duration}\n"

    # –°—Ç–∞—Ç—É—Å
    if series.is_completed:
        text += "‚úÖ –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
    else:
        text += "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n"

    text += f"\nüéß –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ ({len(lessons)}):"

    keyboard = get_lessons_keyboard(lessons, series_id, has_tests)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("back_to_series_lessons_"))
@user_required_callback
async def back_to_series_lessons(callback: CallbackQuery, state: FSMContext):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    """
    series_id = int(callback.data.split("_")[4])

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏ —É—Ä–æ–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("üìÅ –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    lessons = await LessonService.get_lessons_by_series(series_id)

    if not lessons:
        await callback.answer("üì≠ –í —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    await state.update_data(current_series_id=series_id)

    # TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
    has_tests = {}

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π
    text = ""

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–º—ã –∏ –∞–≤—Ç–æ—Ä–∞
    from bot.services.database_service import get_book_by_id
    book = None
    if series.book_id:
        book = await get_book_by_id(series.book_id)

    # –¢–µ–º–∞
    if book and book.theme:
        text += f"üìö –¢–µ–º–∞: {book.theme.name}\n"

    # –ö–Ω–∏–≥–∞
    text += f"üìñ –ö–Ω–∏–≥–∞: ¬´{series.book_title or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}¬ª\n"

    # –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏
    if book and book.author:
        text += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n"

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    text += f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher_name}\n"

    # –°–µ—Ä–∏—è
    text += f"üìÅ –°–µ—Ä–∏—è: {series.display_name}\n"

    # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if series.total_duration_seconds > 0:
        text += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {series.formatted_total_duration}\n"

    # –°—Ç–∞—Ç—É—Å
    if series.is_completed:
        text += "‚úÖ –°–µ—Ä–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
    else:
        text += "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ\n"

    text += f"\nüéß –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ ({len(lessons)}):"

    keyboard = get_lessons_keyboard(lessons, series_id, has_tests)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—É–¥–∏–æ (–Ω–µ–ª—å–∑—è edit_text), —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
    if callback.message.audio:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
        await callback.message.edit_text(text, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data == "back_to_series_list")
@user_required_callback
async def back_to_series_list(callback: CallbackQuery, state: FSMContext):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–Ω–∏–≥–∏
    """
    data = await state.get_data()
    book_id = data.get("current_book_id")
    teacher_id = data.get("current_teacher_id")

    if not book_id or not teacher_id:
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", show_alert=True)
        return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Å–µ—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"book_teacher_{book_id}_{teacher_id}")
    await show_teacher_series_for_book(new_callback, state)
