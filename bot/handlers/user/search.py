from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.services.database_service import LessonService
from bot.keyboards.user import get_search_results_keyboard, get_main_keyboard
from bot.utils.decorators import user_required, user_required_callback

router = Router()


class SearchState(StatesGroup):
    search_query = State()


@router.callback_query(F.data == "search_lessons")
@user_required_callback
async def start_search(callback: CallbackQuery, state: FSMContext, user):
    """
    –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤
    """
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º."
    )
    await callback.answer()
    await state.set_state(SearchState.search_query)


@router.message(SearchState.search_query)
@user_required
async def process_search(message: Message, state: FSMContext, user):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """
    query = message.text.strip()

    if len(query) < 2:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    # –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤
    lessons = await LessonService.search_lessons(query)

    if not lessons:
        await message.answer(
            f"üì≠ –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return

    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª ({len(lessons)}):"
    keyboard = get_search_results_keyboard(lessons, query)

    await message.answer(text, reply_markup=keyboard)
    await state.clear()


@router.callback_query(F.data == "new_search")
@user_required_callback
async def new_search(callback: CallbackQuery, state: FSMContext, user):
    """
    –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫
    """
    await callback.message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞, –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ç–µ–≥–∞–º."
    )
    await callback.answer()
    await state.set_state(SearchState.search_query)
