"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.utils.decorators import user_required_callback
from bot.services.database_service import (
    get_test_by_series,
    get_questions_by_lesson,
    get_questions_by_test,
    get_question_by_id,
    create_attempt,
    get_best_attempt,
    get_series_by_id,
)

logger = logging.getLogger(__name__)

router = Router()


class TestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    in_progress = State()
    current_question = State()


# ==================== –ü–û–ö–ê–ó –î–û–°–¢–£–ü–ù–´–• –¢–ï–°–¢–û–í ====================

@router.callback_query(F.data.startswith("test_after_lesson_"))
@user_required_callback
async def show_test_after_lesson(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫ –∏ –µ–≥–æ —Å–µ—Ä–∏—é
    from bot.services.database_service import get_lesson_by_id
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson or not lesson.series_id:
        await callback.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è —Å–µ—Ä–∏–∏
    test = await get_test_by_series(lesson.series_id)

    if not test or not test.is_active:
        text = "üéì <b>–¢–µ—Å—Ç</b>\n\n‚ùå –î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")
        ]])

        # –ü–ê–¢–¢–ï–†–ù –û–î–ù–û–ì–û –û–ö–ù–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.audio:
            try:
                await callback.message.delete()
            except:
                pass
            await callback.message.answer(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(text, reply_markup=keyboard)

        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
    questions = await get_questions_by_lesson(test.id, lesson_id)

    if not questions:
        text = "üéì <b>–¢–µ—Å—Ç</b>\n\n‚ùå –î–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤."
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")
        ]])

        # –ü–ê–¢–¢–ï–†–ù –û–î–ù–û–ì–û –û–ö–ù–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.audio:
            try:
                await callback.message.delete()
            except:
                pass
            await callback.message.answer(text, reply_markup=keyboard)
        else:
            await callback.message.edit_text(text, reply_markup=keyboard)

        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    best_attempt = await get_best_attempt(user_id, test.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    text = f"üéì <b>{test.title}</b>\n\n"
    text += f"üéß –£—Ä–æ–∫: {lesson.title}\n"
    text += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {len(questions) * test.time_per_question_seconds} —Å–µ–∫\n"
    text += f"‚úÖ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {test.passing_score}%\n\n"

    if best_attempt:
        percentage = int(best_attempt.score / best_attempt.max_score * 100) if best_attempt.max_score > 0 else 0
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if best_attempt.passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        text += f"üèÜ <b>–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        text += f"{status} ‚Ä¢ {best_attempt.score}/{best_attempt.max_score} ({percentage}%)\n\n"

    text += "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç?"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
        callback_data=f"start_test_{test.id}_{lesson_id}"
    ))
    if best_attempt:
        builder.add(InlineKeyboardButton(
            text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫",
            callback_data=f"test_history_{test.id}_{lesson_id}"
        ))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}"))
    builder.adjust(1)

    # –ü–ê–¢–¢–ï–†–ù –û–î–ù–û–ì–û –û–ö–ù–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.audio:
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer(text, reply_markup=builder.as_markup())
    else:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())

    await callback.answer()


# ==================== –ù–ê–ß–ê–õ–û –ü–†–û–•–û–ñ–î–ï–ù–ò–Ø –¢–ï–°–¢–ê ====================

@router.callback_query(F.data.startswith("start_test_"))
@user_required_callback
async def start_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    parts = callback.data.split("_")
    test_id = int(parts[2])
    lesson_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –∏ –≤–æ–ø—Ä–æ—Å—ã
    from bot.services.database_service import get_test_by_id
    test = await get_test_by_id(test_id)

    if not test or not test.is_active:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    questions = await get_questions_by_lesson(test_id, lesson_id)

    if not questions:
        await callback.answer("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ state
    await state.update_data(
        test_id=test_id,
        lesson_id=lesson_id,
        questions=[q.id for q in questions],
        current_index=0,
        answers={},
        start_message_id=callback.message.message_id,
        start_chat_id=callback.message.chat.id
    )

    await state.set_state(TestStates.in_progress)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question(callback, state, 0)


async def show_question(callback: CallbackQuery, state: FSMContext, question_index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    questions_ids = data['questions']

    if question_index >= len(questions_ids):
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_test_results(callback, state)
        return

    question_id = questions_ids[question_index]
    question = await get_question_by_id(question_id)

    if not question:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    text = f"üéì <b>–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ {len(questions_ids)}</b>\n\n"
    text += f"‚ùì {question.question_text}\n\n"

    # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(question.options_list):
        builder.add(InlineKeyboardButton(
            text=f"{i + 1}. {option}",
            callback_data=f"answer_{question_id}_{i}"
        ))

    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"cancel_test_{data['lesson_id']}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í ====================

@router.callback_query(F.data.startswith("answer_"))
@user_required_callback
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    parts = callback.data.split("_")
    question_id = int(parts[1])
    answer_index = int(parts[2])

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers = data.get('answers', {})
    answers[str(question_id)] = answer_index
    await state.update_data(answers=answers)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index = data.get('current_index', 0)
    await state.update_data(current_index=current_index + 1)

    await show_question(callback, state, current_index + 1)


# ==================== –ü–û–ö–ê–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ====================

async def show_test_results(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()

    test_id = data['test_id']
    lesson_id = data['lesson_id']
    answers = data['answers']
    questions_ids = data['questions']

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    score = 0
    max_score = len(questions_ids)

    for question_id in questions_ids:
        question = await get_question_by_id(question_id)
        if question and str(question_id) in answers:
            user_answer = answers[str(question_id)]
            if question.is_correct(user_answer):
                score += 1

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
    percentage = int(score / max_score * 100) if max_score > 0 else 0

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    from bot.services.database_service import get_test_by_id
    test = await get_test_by_id(test_id)
    passed = percentage >= test.passing_score

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø—ã—Ç–∫—É
    try:
        attempt = await create_attempt(
            user_id=callback.from_user.id,
            test_id=test_id,
            score=score,
            max_score=max_score,
            passed=passed,
            answers=answers,
            time_spent_seconds=0  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üéØ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
    text += f"üìä <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
    text += f"{'‚úÖ' if passed else '‚ùå'} {score}/{max_score} ({percentage}%)\n\n"

    if passed:
        text += f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n"
        text += f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç!\n"
        text += f"–¢—Ä–µ–±–æ–≤–∞–ª–æ—Å—å: {test.passing_score}%"
    else:
        text += f"üòî <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!</b>\n"
        text += f"–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ: {test.passing_score}%\n"
        text += f"–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ: {test.passing_score - percentage}%"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data=f"start_test_{test_id}_{lesson_id}"))
    builder.add(InlineKeyboardButton(text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫", callback_data=f"test_history_{test_id}_{lesson_id}"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await state.clear()
    await callback.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")


# ==================== –û–¢–ú–ï–ù–ê –¢–ï–°–¢–ê ====================

@router.callback_query(F.data.startswith("cancel_test_"))
@user_required_callback
async def cancel_test(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    lesson_id_str = callback.data.split("_")[2]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ç–µ—Å—Ç —É—Ä–æ–∫–∞ –∏–ª–∏ –æ–±—â–∏–π —Ç–µ—Å—Ç
    if lesson_id_str == "None":
        # –û–±—â–∏–π —Ç–µ—Å—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–µ—Ä–∏–∏
        data = await state.get_data()
        series_id = data.get("series_id")

        if series_id:
            await callback.message.edit_text(
                "‚ùå <b>–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n"
                "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∏", callback_data=f"series_{series_id}")
                ]])
            )
        else:
            # –ï—Å–ª–∏ series_id –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.message.edit_text(
                "‚ùå <b>–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n"
                "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
    else:
        # –¢–µ—Å—Ç —É—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É—Ä–æ–∫—É
        lesson_id = int(lesson_id_str)

        await callback.message.edit_text(
            "‚ùå <b>–¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω</b>\n\n"
            "–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{lesson_id}")
            ]])
        )

    await state.clear()
    await callback.answer()


# ==================== –ò–°–¢–û–†–ò–Ø –ü–û–ü–´–¢–û–ö ====================

@router.callback_query(F.data.startswith("test_history_"))
@user_required_callback
async def show_test_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫"""
    parts = callback.data.split("_")
    test_id = int(parts[2])
    lesson_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.services.database_service import get_attempts_by_user
    attempts = await get_attempts_by_user(callback.from_user.id, test_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    lesson_attempts = [a for a in attempts if a.lesson_id == lesson_id]

    if not lesson_attempts:
        await callback.message.edit_text(
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"start_test_{test_id}_{lesson_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"test_after_lesson_{lesson_id}")
            ]])
        )
        await callback.answer()
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    lesson_attempts.sort(key=lambda x: x.completed_at if x.completed_at else x.created_at, reverse=True)

    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –ø–æ–ø—ã—Ç–∫—É
    best = max(lesson_attempts, key=lambda x: x.score)

    text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(lesson_attempts)}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫
    for i, attempt in enumerate(lesson_attempts[:5], 1):
        percentage = int(attempt.score / attempt.max_score * 100) if attempt.max_score > 0 else 0
        status = "‚úÖ" if attempt.passed else "‚ùå"
        is_best = " üèÜ" if attempt.id == best.id else ""

        text += f"{i}. {status} {attempt.score}/{attempt.max_score} ({percentage}%){is_best}\n"
        if attempt.completed_at:
            text += f"   {attempt.completed_at.strftime('%d.%m.%Y %H:%M')}\n"

    text += f"\nüèÜ <b>–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {best.score}/{best.max_score} ({int(best.score / best.max_score * 100)}%)"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data=f"start_test_{test_id}_{lesson_id}"))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"test_after_lesson_{lesson_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# ==================== –¢–ï–°–¢–´ –ü–û –£–†–û–ö–ê–ú (–Ω–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è) ====================

@router.callback_query(F.data.startswith("lesson_test_"))
@user_required_callback
async def start_lesson_test_new(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Ä–æ–∫—É (–Ω–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è)"""
    lesson_id = int(callback.data.split("_")[2])

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    # CallbackQuery frozen - –∏—Å–ø–æ–ª—å–∑—É–µ–º copy() –∏ object.__setattr__()
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"test_after_lesson_{lesson_id}")
    await show_test_after_lesson(new_callback, state)


# ==================== –û–ë–©–ò–ô –¢–ï–°–¢ –ü–û –°–ï–†–ò–ò ====================

@router.callback_query(F.data.startswith("general_test_"))
@user_required_callback
async def show_general_test(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–∏–π —Ç–µ—Å—Ç –ø–æ –≤—Å–µ–π —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("üìÅ –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç —Å–µ—Ä–∏–∏
    test = await get_test_by_series(series_id)

    if not test or not test.is_active:
        await callback.message.edit_text(
            "üéì <b>–û–±—â–∏–π —Ç–µ—Å—Ç</b>\n\n"
            "‚ùå –î–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∏", callback_data=f"series_{series_id}")
            ]])
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    all_questions = await get_questions_by_test(test.id)

    if not all_questions:
        await callback.message.edit_text(
            "üéì <b>–û–±—â–∏–π —Ç–µ—Å—Ç</b>\n\n"
            "‚ùå –í —ç—Ç–æ–º —Ç–µ—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∏", callback_data=f"series_{series_id}")
            ]])
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Ä–æ–∫—É)
    user_id = callback.from_user.id
    best_attempt = await get_best_attempt(user_id, test.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    text = f"üéì <b>{test.title}</b>\n\n"
    text += f"üìÅ –°–µ—Ä–∏—è: {series.display_name}\n"
    text += f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(all_questions)}\n"
    text += f"‚è±Ô∏è –í—Ä–µ–º—è: {len(all_questions) * test.time_per_question_seconds} —Å–µ–∫\n"
    text += f"‚úÖ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {test.passing_score}%\n\n"

    if best_attempt:
        percentage = int(best_attempt.score / best_attempt.max_score * 100) if best_attempt.max_score > 0 else 0
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if best_attempt.passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        text += f"üèÜ <b>–í–∞—à –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>\n"
        text += f"{status} ‚Ä¢ {best_attempt.score}/{best_attempt.max_score} ({percentage}%)\n\n"

    text += "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –æ–±—â–∏–π —Ç–µ—Å—Ç –ø–æ –≤—Å–µ–π —Å–µ—Ä–∏–∏?"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üéØ –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç",
        callback_data=f"start_general_test_{test.id}_{series_id}"
    ))
    if best_attempt:
        builder.add(InlineKeyboardButton(
            text="üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫",
            callback_data=f"general_test_history_{test.id}_{series_id}"
        ))
    builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∏", callback_data=f"series_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("start_general_test_"))
@user_required_callback
async def start_general_test(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∞ –ø–æ —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_")
    test_id = int(parts[3])
    series_id = int(parts[4])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
    from bot.services.database_service import get_test_by_id
    test = await get_test_by_id(test_id)

    if not test or not test.is_active:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    all_questions = await get_questions_by_test(test_id)

    if not all_questions:
        await callback.answer("‚ùå –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ state (–±–µ–∑ lesson_id –¥–ª—è –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∞)
    await state.update_data(
        test_id=test_id,
        series_id=series_id,
        lesson_id=None,  # –û–±—â–∏–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Ä–æ–∫—É
        questions=[q.id for q in all_questions],
        current_index=0,
        answers={},
        start_message_id=callback.message.message_id,
        start_chat_id=callback.message.chat.id
    )

    await state.set_state(TestStates.in_progress)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question(callback, state, 0)


@router.callback_query(F.data.startswith("general_test_history_"))
@user_required_callback
async def show_general_test_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ø—ã—Ç–æ–∫ –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∞"""
    parts = callback.data.split("_")
    test_id = int(parts[3])
    series_id = int(parts[4])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.services.database_service import get_attempts_by_user
    attempts = await get_attempts_by_user(callback.from_user.id, test_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫–∏ –æ–±—â–µ–≥–æ —Ç–µ—Å—Ç–∞ (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —É—Ä–æ–∫—É)
    general_attempts = [a for a in attempts if a.lesson_id is None]

    if not general_attempts:
        await callback.message.edit_text(
            "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
            "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ —ç—Ç–æ–º—É —Ç–µ—Å—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üéØ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data=f"start_general_test_{test_id}_{series_id}"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"general_test_{series_id}")
            ]])
        )
        await callback.answer()
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    general_attempts.sort(key=lambda x: x.completed_at if x.completed_at else x.created_at, reverse=True)

    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é –ø–æ–ø—ã—Ç–∫—É
    best = max(general_attempts, key=lambda x: x.score)

    text = f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {len(general_attempts)}\n\n"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫
    for i, attempt in enumerate(general_attempts[:5], 1):
        percentage = int(attempt.score / attempt.max_score * 100) if attempt.max_score > 0 else 0
        status = "‚úÖ" if attempt.passed else "‚ùå"
        is_best = " üèÜ" if attempt.id == best.id else ""

        text += f"{i}. {status} {attempt.score}/{attempt.max_score} ({percentage}%){is_best}\n"
        if attempt.completed_at:
            text += f"   {attempt.completed_at.strftime('%d.%m.%Y %H:%M')}\n"

    text += f"\nüèÜ <b>–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {best.score}/{best.max_score} ({int(best.score / best.max_score * 100)}%)"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üîÑ –ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data=f"start_general_test_{test_id}_{series_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"general_test_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()
