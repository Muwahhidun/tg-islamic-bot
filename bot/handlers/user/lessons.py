from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from bot.services.database_service import LessonService, get_test_by_series, get_questions_by_lesson
from bot.keyboards.user import get_lesson_control_keyboard
from bot.utils.decorators import user_required_callback
from bot.utils.audio_utils import AudioUtils


router = Router()


@router.callback_query(F.data.startswith("lesson_") & ~F.data.startswith("lesson_test_"))
@user_required_callback
async def play_lesson(callback: CallbackQuery):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    """
    lesson_id = int(callback.data.split("_")[1])
    lesson = await LessonService.get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not lesson.has_audio():
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not AudioUtils.file_exists(lesson.audio_path):
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞
    caption = (
        f"üéß {lesson.display_title}\n\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book_title}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author_info if lesson.book and lesson.book.author else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if lesson.tags_list:
        tags_text = ", ".join(lesson.tags_list)
        caption += f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n"

    caption += "\n"

    if lesson.description:
        caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
    has_test = False
    if lesson.series_id:
        test = await get_test_by_series(lesson.series_id)
        if test and test.is_active:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
            questions = await get_questions_by_lesson(test.id, lesson.id)
            has_test = len(questions) > 0

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = get_lesson_control_keyboard(lesson, has_test=has_test)

    # –ü–ê–¢–¢–ï–†–ù –û–î–ù–û–ì–û –û–ö–ù–ê: —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass

    try:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π file_id - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–±—ã—Å—Ç—Ä–æ!)
        if lesson.telegram_file_id:
            sent_message = await callback.message.answer_audio(
                audio=lesson.telegram_file_id,
                caption=caption,
                reply_markup=keyboard
            )
        else:
            # –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            audio_file = FSInputFile(lesson.audio_path)
            sent_message = await callback.message.answer_audio(
                audio=audio_file,
                title=lesson.title,
                caption=caption,
                reply_markup=keyboard
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            if sent_message.audio:
                lesson.telegram_file_id = sent_message.audio.file_id
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
                from bot.services.database_service import update_lesson
                await update_lesson(lesson)

    except Exception as e:
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è alert (–º–∞–∫—Å 200 —Å–∏–º–≤–æ–ª–æ–≤)
        error_msg = str(e)[:150]
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ", show_alert=True)
        return

    await callback.answer()


@router.callback_query(F.data.startswith("prev_"))
@user_required_callback
async def previous_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É –≤ —Å–µ—Ä–∏–∏
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not current_lesson.series_id:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    lessons = await LessonService.get_lessons_by_series(current_lesson.series_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    prev_lesson = lessons[current_index - 1]

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å –Ω–æ–≤—ã–º lesson_id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º data
    from aiogram.types import CallbackQuery as CQ
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"lesson_{prev_lesson.id}")
    await play_lesson(new_callback)


@router.callback_query(F.data.startswith("next_"))
@user_required_callback
async def next_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –≤ —Å–µ—Ä–∏–∏
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not current_lesson.series_id:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    lessons = await LessonService.get_lessons_by_series(current_lesson.series_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == len(lessons) - 1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Å–µ—Ä–∏–∏", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    next_lesson = lessons[current_index + 1]

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Å –Ω–æ–≤—ã–º lesson_id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º data
    from copy import copy
    new_callback = copy(callback)
    object.__setattr__(new_callback, 'data', f"lesson_{next_lesson.id}")
    await play_lesson(new_callback)


@router.callback_query(F.data.startswith("author_"))
@user_required_callback
async def show_author_info(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ –∫–Ω–∏–≥–∏
    """
    author_id = int(callback.data.split("_")[1])

    from bot.services.database_service import get_book_author_by_id
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
    info = f"‚úçÔ∏è <b>{author.name}</b>\n\n"

    if author.biography:
        info += f"{author.biography}\n\n"

    if author.birth_year:
        info += f"üìÖ –ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {author.birth_year}\n"

    if author.death_year:
        info += f"‚ö∞Ô∏è –ì–æ–¥ —Å–º–µ—Ä—Ç–∏: {author.death_year}\n"

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_info")]
    ])

    await callback.message.answer(info, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("teacher_"))
@user_required_callback
async def show_teacher_info(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    """
    teacher_id = int(callback.data.split("_")[1])

    from bot.services.database_service import get_lesson_teacher_by_id
    teacher = await get_lesson_teacher_by_id(teacher_id)

    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    info = f"üéôÔ∏è <b>{teacher.name}</b>\n\n"

    if teacher.biography:
        info += f"{teacher.biography}\n\n"

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_info")]
    ])

    await callback.message.answer(info, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("book_info_"))
@user_required_callback
async def show_book_info(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    """
    book_id = int(callback.data.split("_")[2])

    from bot.services.database_service import get_book_by_id
    book = await get_book_by_id(book_id)

    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    info = f"üìñ <b>{book.name}</b>\n\n"

    if book.author:
        info += f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author.name}\n"

    if book.theme:
        info += f"üìö –¢–µ–º–∞: {book.theme.name}\n"

    if book.desc:
        info += f"\n{book.desc}\n"

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫—Ä—ã—Ç—å"
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_info")]
    ])

    await callback.message.answer(info, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "close_info")
@user_required_callback
async def close_info(callback: CallbackQuery):
    """
    –ó–∞–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        await callback.message.delete()
    except:
        pass
    await callback.answer()


