from aiogram import Router, F
from aiogram.types import CallbackQuery

from bot.services.database_service import LessonService, BookService
from bot.keyboards.user import get_lessons_keyboard, get_lesson_control_keyboard
from bot.utils.decorators import user_required_callback
from bot.utils.audio_utils import AudioUtils


router = Router()


@router.callback_query(F.data.startswith("book_"))
@user_required_callback
async def show_lessons(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    """
    book_id = int(callback.data.split("_")[1])
    book = await BookService.get_book_by_id(book_id)

    if not book:
        await callback.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    lessons = await LessonService.get_lessons_by_book(book_id)

    if not lessons:
        await callback.answer("–í —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    text = (
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{book.name}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {book.author_info}\n\n"
        f"–°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ ({len(lessons)}):"
    )
    # –ü–µ—Ä–µ–¥–∞–µ–º theme_id –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_lessons_keyboard(lessons, theme_id=book.theme_id)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("lesson_"))
@user_required_callback
async def play_lesson(callback: CallbackQuery):
    """
    –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É—Ä–æ–∫–∞
    """
    lesson_id = int(callback.data.split("_")[1])
    lesson = await LessonService.get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not lesson.has_audio():
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if not AudioUtils.file_exists(lesson.audio_path):
        await callback.answer("–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞
    caption = (
        f"üéß {lesson.display_title}\n\n"
        f"üìñ –ö–Ω–∏–≥–∞: ¬´{lesson.book_title}¬ª\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä: {lesson.book.author_info if lesson.book and lesson.book.author else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üéôÔ∏è –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if lesson.tags_list:
        tags_text = ", ".join(lesson.tags_list)
        caption += f"üè∑Ô∏è –¢–µ–≥–∏: {tags_text}\n"

    caption += "\n"

    if lesson.description:
        caption += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard = get_lesson_control_keyboard(lesson)

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
        with open(lesson.audio_path, 'rb') as audio_file:
            await callback.message.answer_audio(
                audio=audio_file,
                title=lesson.title,
                caption=caption,
                reply_markup=keyboard
            )
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {e}", show_alert=True)
        return

    await callback.answer()


@router.callback_query(F.data.startswith("prev_"))
@user_required_callback
async def previous_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∫–Ω–∏–≥–∏
    lessons = await LessonService.get_lessons_by_book(current_lesson.book_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == 0:
        await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –≤ –∫–Ω–∏–≥–µ", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
    prev_lesson = lessons[current_index - 1]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Ä–æ–∫–∞
    callback.data = f"lesson_{prev_lesson.id}"
    await play_lesson(callback)


@router.callback_query(F.data.startswith("next_"))
@user_required_callback
async def next_lesson(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    """
    current_lesson_id = int(callback.data.split("_")[1])
    current_lesson = await LessonService.get_lesson_by_id(current_lesson_id)

    if not current_lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∫–Ω–∏–≥–∏
    lessons = await LessonService.get_lessons_by_book(current_lesson.book_id)

    # –ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–∫–µ
    current_index = None
    for i, lesson in enumerate(lessons):
        if lesson.id == current_lesson_id:
            current_index = i
            break

    if current_index is None or current_index == len(lessons) - 1:
        await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ –∫–Ω–∏–≥–µ", show_alert=True)
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    next_lesson = lessons[current_index + 1]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞
    callback.data = f"lesson_{next_lesson.id}"
    await play_lesson(callback)


@router.callback_query(F.data.startswith("back_to_book_"))
@user_required_callback
async def back_to_book(callback: CallbackQuery):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–Ω–∏–≥–µ
    """
    book_id = int(callback.data.split("_")[3])
    callback.data = f"book_{book_id}"
    await show_lessons(callback)


