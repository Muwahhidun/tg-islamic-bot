"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
–ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ–¥–∏–Ω —Ç–µ—Å—Ç –Ω–∞ —Å–µ—Ä–∏—é, –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —É—Ä–æ–∫–∞–º
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_tests,
    get_test_by_id,
    get_test_by_series,
    create_test,
    update_test,
    toggle_test_active,
    delete_test,
    get_questions_by_test,
    get_question_by_id,
    create_question,
    update_question,
    delete_question,
    get_all_lesson_teachers,
    get_series_by_teacher,
    get_series_by_id,
)

logger = logging.getLogger(__name__)

router = Router()


class TestStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    title = State()
    description = State()
    passing_score = State()
    time_per_question = State()
    edit_title = State()
    edit_description = State()
    edit_passing_score = State()
    edit_time = State()


class QuestionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    lesson_id = State()  # –í—ã–±–æ—Ä —É—Ä–æ–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
    question_text = State()
    option_1 = State()
    option_2 = State()
    option_3 = State()
    option_4 = State()
    correct_answer = State()
    explanation = State()


# ==================== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ====================

@router.callback_query(F.data == "admin_tests")
@admin_required
async def tests_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üìä –í—Å–µ —Ç–µ—Å—Ç—ã", callback_data="tests_all"))
    builder.add(InlineKeyboardButton(text="üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="tests_teachers"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


# ==================== –ü–†–û–°–ú–û–¢–† –¢–ï–°–¢–û–í ====================

@router.callback_query(F.data == "tests_all")
@admin_required
async def show_all_tests(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
    tests = await get_all_tests()

    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tests = len(tests)
    active_tests = len([t for t in tests if t.is_active])
    total_questions = sum(t.questions_count for t in tests)

    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º</b>\n\n"
        f"üìù –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_tests}\n"
        f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {total_tests - active_tests}\n"
        f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}\n"
    )

    if total_tests > 0:
        avg_questions = total_questions / total_tests
        text += f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ç–µ—Å—Ç: {avg_questions:.1f}\n"

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tests")
        ]])
    )
    await callback.answer()


@router.callback_query(F.data == "tests_teachers")
@admin_required
async def tests_teachers_list(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    teachers = await get_all_lesson_teachers()

    if not teachers:
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tests")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        if teacher.is_active:
            builder.add(InlineKeyboardButton(
                text=f"üë§ {teacher.name}",
                callback_data=f"tests_teacher_{teacher.id}"
            ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_tests"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üë§ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_test_"))
@admin_required
async def toggle_test(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[2])
    test = await toggle_test_active(test_id)

    if not test:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Ä–∏–∏ (–∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç —Ç–µ—Å—Ç)
    teacher_id = test.teacher_id
    series_id = test.series_id

    class FakeCallback:
        def __init__(self, original_callback, new_data):
            self.message = original_callback.message
            self.data = new_data
            self.from_user = original_callback.from_user

        async def answer(self, *args, **kwargs):
            pass

    fake_callback = FakeCallback(callback, f"tests_series_{teacher_id}_{series_id}")
    await tests_series_view(fake_callback)
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω")


@router.callback_query(F.data.startswith("delete_test_confirm_"))
@admin_required
async def delete_test_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[3])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = (
        f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç?\n\n"
        f"üìù {test.title}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )

    # –ü–æ–ª—É—á–∞–µ–º teacher_id –∏ series_id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    teacher_id = test.teacher_id
    series_id = test.series_id

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_test_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{teacher_id}_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.regexp(r"^delete_test_\d+$"))
@admin_required
async def delete_test_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç"""
    test_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç –¥–æ —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å –∫—É–¥–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è
    test = await get_test_by_id(test_id)
    if test:
        teacher_id = test.teacher_id
        series_id = test.series_id
    else:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    success = await delete_test(test_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–∏–∏", callback_data=f"tests_series_{teacher_id}_{series_id}")
            ]])
        )
        await callback.answer("‚úÖ –¢–µ—Å—Ç —É–¥–∞–ª—ë–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–°–¢–û–í ====================

@router.callback_query(F.data.regexp(r"^edit_test_\d+$"))
@admin_required
async def edit_test_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[2])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    teacher_id = test.teacher_id
    series_id = test.series_id

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{teacher_id}_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(info, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("edit_test_title_"))
@admin_required
async def edit_test_title_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[3])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(
        test_id=test_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{test.title}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")
        ]])
    )
    await state.set_state(TestStates.edit_title)
    await callback.answer()


@router.message(TestStates.edit_title)
@admin_required
async def save_test_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    test_id = data['test_id']

    try:
        await message.delete()
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)
    test.title = message.text
    await update_test(test)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=info,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_test_description_"))
@admin_required
async def edit_test_description_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[3])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(
        test_id=test_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ—Å—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"delete_test_description_{test_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")]
        ])
    )
    await state.set_state(TestStates.edit_description)
    await callback.answer()


@router.callback_query(F.data.startswith("delete_test_description_"))
@admin_required
async def delete_test_description(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[3])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    test.description = None
    await update_test(test)
    test = await get_test_by_id(test_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(info, reply_markup=builder.as_markup())
    await state.clear()
    await callback.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")


@router.message(TestStates.edit_description)
@admin_required
async def save_test_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()
    test_id = data['test_id']

    try:
        await message.delete()
    except:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)
    test.description = message.text
    await update_test(test)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=info,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_test_passing_score_"))
@admin_required
async def edit_test_passing_score_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞"""
    test_id = int(callback.data.split("_")[4])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(
        test_id=test_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–≥–æ –±–∞–ª–ª–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: <b>{test.passing_score}%</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (0-100):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")
        ]])
    )
    await state.set_state(TestStates.edit_passing_score)
    await callback.answer()


@router.message(TestStates.edit_passing_score)
@admin_required
async def save_test_passing_score(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"""
    data = await state.get_data()
    test_id = data['test_id']

    try:
        await message.delete()
    except:
        pass

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        passing_score = int(message.text)
        if passing_score < 0 or passing_score > 100:
            raise ValueError()
    except:
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")
            ]])
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)
    test.passing_score = passing_score
    await update_test(test)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=info,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_test_time_"))
@admin_required
async def edit_test_time_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    test_id = int(callback.data.split("_")[3])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await state.update_data(
        test_id=test_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        f"‚è± <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{test.time_per_question_seconds} —Å–µ–∫</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (10-300 —Å–µ–∫—É–Ω–¥):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")
        ]])
    )
    await state.set_state(TestStates.edit_time)
    await callback.answer()


@router.message(TestStates.edit_time)
@admin_required
async def save_test_time(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()
    test_id = data['test_id']

    try:
        await message.delete()
    except:
        pass

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        time_per_question = int(message.text)
        if time_per_question < 10 or time_per_question > 300:
            raise ValueError()
    except:
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_test_{test_id}")
            ]])
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)
    test.time_per_question_seconds = time_per_question
    await update_test(test)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç
    test = await get_test_by_id(test_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    info = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
    info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {test.title}\n"
    info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {test.description or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    info += f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
    info += f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n"
    info += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_test_title_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_test_description_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª", callback_data=f"edit_test_passing_score_{test_id}"))
    builder.add(InlineKeyboardButton(text="‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_test_time_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=info,
        reply_markup=builder.as_markup()
    )
    await state.clear()


# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø: –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨ ‚Üí –°–ï–†–ò–ò ‚Üí –¢–ï–°–¢ ====================

@router.callback_query(F.data.startswith("tests_teacher_"))
@admin_required
async def tests_teacher_series(callback: CallbackQuery):
    """–°–µ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = int(callback.data.split("_")[2])

    series_list = await get_series_by_teacher(teacher_id)

    if not series_list:
        await callback.message.edit_text(
            "‚ùå –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–µ—Ä–∏–π",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tests_teachers")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for series in series_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏
        existing_test = await get_test_by_series(series.id)

        button_text = f"üìö {series.year} - {series.name}"
        if series.book_title:
            button_text += f" ({series.book_title})"

        if existing_test:
            button_text += " ‚úÖ"

        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"tests_series_{teacher_id}_{series.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="tests_teachers"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìö <b>–°–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:\n"
        "(‚úÖ = —Ç–µ—Å—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω)",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("tests_series_"))
@admin_required
async def tests_series_view(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä/—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    series_id = int(parts[3])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç
    test = await get_test_by_series(series_id)

    if test:
        # –¢–µ—Å—Ç —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        info = test.full_info

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üìù –í–æ–ø—Ä–æ—Å—ã", callback_data=f"test_questions_{test.id}"))
        builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_test_{test.id}"))

        if test.is_active:
            builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_test_{test.id}"))
        else:
            builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_test_{test.id}"))

        builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"delete_test_confirm_{test.id}"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏—è–º", callback_data=f"tests_teacher_{teacher_id}"))
        builder.adjust(1)

        await callback.message.edit_text(info, reply_markup=builder.as_markup())
        await callback.answer()
    else:
        # –¢–µ—Å—Ç–∞ –Ω–µ—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å
        series = await get_series_by_id(series_id)

        if not series:
            await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç",
            callback_data=f"create_test_for_series_{teacher_id}_{series_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"tests_teacher_{teacher_id}"
        ))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìù <b>–¢–µ—Å—Ç –¥–ª—è —Å–µ—Ä–∏–∏</b>\n\n"
            f"üìö –°–µ—Ä–∏—è: {series.display_name}\n"
            f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {series.teacher.name if series.teacher else '???'}\n"
            f"üéß –£—Ä–æ–∫–æ–≤: {len(series.lessons) if series.lessons else 0}\n\n"
            f"‚ùå –¢–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=builder.as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("create_test_for_series_"))
@admin_required
async def create_test_for_series_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_")
    teacher_id = int(parts[4])
    series_id = int(parts[5])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        teacher_id=teacher_id,
        series_id=series_id,
        create_message_id=callback.message.message_id,
        create_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
        "–®–∞–≥ 1: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–¢–µ—Å—Ç –ø–æ –¢–∞—É—Ö–∏–¥—É¬ª",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{teacher_id}_{series_id}")
        ]])
    )
    await state.set_state(TestStates.title)
    await callback.answer()


# ==================== –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–ê - FSM HANDLERS ====================

@router.message(TestStates.title)
@admin_required
async def save_test_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(title=message.text)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text="üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
             "–®–∞–≥ 2: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_test_description")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")]
        ])
    )
    await state.set_state(TestStates.description)


@router.callback_query(F.data == "skip_test_description")
@admin_required
async def skip_test_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()

    await state.update_data(description=None)

    await callback.message.edit_text(
        text="üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
             "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):\n\n"
             "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80%\n"
             "–î–æ–ø—É—Å—Ç–∏–º–æ: 0-100",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
        ]])
    )
    await state.set_state(TestStates.passing_score)
    await callback.answer()


@router.message(TestStates.description)
@admin_required
async def save_test_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(description=message.text)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text="üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
             "–®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö):\n\n"
             "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80%\n"
             "–î–æ–ø—É—Å—Ç–∏–º–æ: 0-100",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
        ]])
    )
    await state.set_state(TestStates.passing_score)


@router.message(TestStates.passing_score)
@admin_required
async def save_test_passing_score(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    try:
        passing_score = int(message.text)
        if not (0 <= passing_score <= 100):
            raise ValueError()
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                 "–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 100.\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
            ]])
        )
        return

    await state.update_data(passing_score=passing_score)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text="üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</b>\n\n"
             "–®–∞–≥ 4: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):\n\n"
             "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30 —Å–µ–∫—É–Ω–¥\n"
             "–î–æ–ø—É—Å—Ç–∏–º–æ: 10-300",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
        ]])
    )
    await state.set_state(TestStates.time_per_question)


@router.message(TestStates.time_per_question)
@admin_required
async def save_test_time_and_create(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è –∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    try:
        time_per_question = int(message.text)
        if not (10 <= time_per_question <= 300):
            raise ValueError()
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
                 "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 300 —Å–µ–∫—É–Ω–¥.\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
            ]])
        )
        return

    # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç
    try:
        test = await create_test(
            title=data['title'],
            series_id=data['series_id'],
            teacher_id=data['teacher_id'],
            description=data.get('description'),
            passing_score=data['passing_score'],
            time_per_question_seconds=time_per_question
        )

        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text=f"‚úÖ <b>–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                 f"üìù {test.title}\n"
                 f"‚úÖ –ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {test.passing_score}%\n"
                 f"‚è± –í—Ä–µ–º—è –Ω–∞ –≤–æ–ø—Ä–æ—Å: {test.time_per_question_seconds} —Å–µ–∫\n\n"
                 f"–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data=f"test_questions_{test.id}"),
                InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–∏–∏", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
            ]])
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞!</b>\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"tests_series_{data['teacher_id']}_{data['series_id']}")
            ]])
        )
        await state.clear()


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–ê–ú–ò ====================

@router.callback_query(F.data.startswith("test_questions_"))
@admin_required
async def test_questions_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ç–µ—Å—Ç–∞"""
    test_id = int(callback.data.split("_")[2])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    questions = await get_questions_by_test(test_id)

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ä–æ–∫–∞–º
    questions_by_lesson = {}
    for q in questions:
        lesson_id = q.lesson_id
        if lesson_id not in questions_by_lesson:
            questions_by_lesson[lesson_id] = []
        questions_by_lesson[lesson_id].append(q)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìù <b>–¢–µ—Å—Ç: {test.title}</b>\n\n"
    text += f"üìö –°–µ—Ä–∏—è: {test.series.display_name}\n"
    text += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n\n"

    if questions:
        text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"

        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —Å–µ—Ä–∏–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        series = await get_series_by_id(test.series_id)
        lessons = series.lessons if series else []

        for lesson in lessons:
            lesson_questions = questions_by_lesson.get(lesson.id, [])
            if lesson_questions:
                text += f"üìö <b>–£—Ä–æ–∫ {lesson.lesson_number}: {lesson.title}</b>\n"
                text += f"–í–æ–ø—Ä–æ—Å–æ–≤: {len(lesson_questions)}\n\n"

        text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
    else:
        text += "‚ùå –í–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"

    # –ö–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"add_question_{test_id}"))

    if questions:
        builder.add(InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"list_questions_{test_id}"))

    builder.add(InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"tests_series_{test.teacher_id}_{test.series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# ==================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í ====================

@router.callback_query(F.data.startswith("add_question_"))
@admin_required
async def add_question_choose_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É—Ä–æ–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
    test_id = int(callback.data.split("_")[2])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ —Å–µ—Ä–∏–∏
    series = await get_series_by_id(test.series_id)
    if not series or not series.lessons:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–í —Å–µ—Ä–∏–∏ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫–∏ –∫ —Å–µ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"test_questions_{test_id}")
            ]])
        )
        await callback.answer()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
    builder = InlineKeyboardBuilder()
    for lesson in series.lessons:
        builder.add(InlineKeyboardButton(
            text=f"üìö –£—Ä–æ–∫ {lesson.lesson_number}: {lesson.title}",
            callback_data=f"add_q_lesson_{test_id}_{lesson.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{test_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("add_q_lesson_"))
@admin_required
async def add_question_start_input(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞"""
    parts = callback.data.split("_")
    test_id = int(parts[3])
    lesson_id = int(parts[4])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(
        test_id=test_id,
        lesson_id=lesson_id,
        question_message_id=callback.message.message_id,
        question_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        "–®–∞–≥ 1/7: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –¢–∞—É—Ö–∏–¥?¬ª",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{test_id}")
        ]])
    )
    await state.set_state(QuestionStates.question_text)
    await callback.answer()


# ==================== FSM HANDLERS –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í–û–ü–†–û–°–ê ====================

@router.message(QuestionStates.question_text)
@admin_required
async def save_question_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(question_text=message.text)

    await message.bot.edit_message_text(
        chat_id=data['question_chat_id'],
        message_id=data['question_message_id'],
        text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
             "–®–∞–≥ 2/7: –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ1:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{data['test_id']}")
        ]])
    )
    await state.set_state(QuestionStates.option_1)


@router.message(QuestionStates.option_1)
@admin_required
async def save_option_1(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 1"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(option_1=message.text)

    await message.bot.edit_message_text(
        chat_id=data['question_chat_id'],
        message_id=data['question_message_id'],
        text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
             "–®–∞–≥ 3/7: –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ2:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{data['test_id']}")
        ]])
    )
    await state.set_state(QuestionStates.option_2)


@router.message(QuestionStates.option_2)
@admin_required
async def save_option_2(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 2"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(option_2=message.text)

    await message.bot.edit_message_text(
        chat_id=data['question_chat_id'],
        message_id=data['question_message_id'],
        text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
             "–®–∞–≥ 4/7: –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ3:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{data['test_id']}")
        ]])
    )
    await state.set_state(QuestionStates.option_3)


@router.message(QuestionStates.option_3)
@admin_required
async def save_option_3(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 3"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(option_3=message.text)

    await message.bot.edit_message_text(
        chat_id=data['question_chat_id'],
        message_id=data['question_message_id'],
        text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
             "–®–∞–≥ 5/7: –í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ‚Ññ4:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{data['test_id']}")
        ]])
    )
    await state.set_state(QuestionStates.option_4)


@router.message(QuestionStates.option_4)
@admin_required
async def save_option_4(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç 4 –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    await state.update_data(option_4=message.text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ
    text = (
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        f"–í–æ–ø—Ä–æ—Å: {data['question_text']}\n\n"
        f"1Ô∏è‚É£ {data['option_1']}\n"
        f"2Ô∏è‚É£ {data['option_2']}\n"
        f"3Ô∏è‚É£ {data['option_3']}\n"
        f"4Ô∏è‚É£ {message.text}\n\n"
        "–®–∞–≥ 6/7: –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π?"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="1Ô∏è‚É£", callback_data=f"q_correct_1_{data['test_id']}"))
    builder.add(InlineKeyboardButton(text="2Ô∏è‚É£", callback_data=f"q_correct_2_{data['test_id']}"))
    builder.add(InlineKeyboardButton(text="3Ô∏è‚É£", callback_data=f"q_correct_3_{data['test_id']}"))
    builder.add(InlineKeyboardButton(text="4Ô∏è‚É£", callback_data=f"q_correct_4_{data['test_id']}"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{data['test_id']}"))
    builder.adjust(4, 1)

    await message.bot.edit_message_text(
        chat_id=data['question_chat_id'],
        message_id=data['question_message_id'],
        text=text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.regexp(r"^q_correct_\d+_\d+$"))
@admin_required
async def save_correct_answer(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"""
    parts = callback.data.split("_")
    correct_num = int(parts[2])
    test_id = int(parts[3])

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0-3)
    await state.update_data(correct_answer=correct_num - 1)

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        "–®–∞–≥ 7/7: –í–≤–µ–¥–∏—Ç–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –æ—Ç–≤–µ—Ç—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_question_explanation")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"test_questions_{test_id}")]
        ])
    )
    await state.set_state(QuestionStates.explanation)
    await callback.answer()


@router.callback_query(F.data == "skip_question_explanation")
@admin_required
async def skip_question_explanation(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏—è
    try:
        options = [
            data['option_1'],
            data['option_2'],
            data['option_3'],
            data['option_4']
        ]

        question = await create_question(
            test_id=data['test_id'],
            lesson_id=data['lesson_id'],
            question_text=data['question_text'],
            options=options,
            correct_answer_index=data['correct_answer'],
            explanation=None
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç
        test = await get_test_by_id(data['test_id'])

        await callback.message.edit_text(
            text=f"‚úÖ <b>–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                 f"üìù {data['question_text']}\n"
                 f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤–∞—Ä–∏–∞–Ω—Ç {data['correct_answer'] + 1}\n\n"
                 f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {test.questions_count}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data=f"add_question_{data['test_id']}"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"list_questions_{data['test_id']}"),
                InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"test_questions_{data['test_id']}")
            ]])
        )
        await state.clear()
        await callback.answer("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞!</b>\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"test_questions_{data['test_id']}")
            ]])
        )
        await state.clear()
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(QuestionStates.explanation)
@admin_required
async def save_explanation_and_create(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
    data = await state.get_data()

    try:
        await message.delete()
    except:
        pass

    explanation = message.text

    # –°–æ–∑–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å
    try:
        options = [
            data['option_1'],
            data['option_2'],
            data['option_3'],
            data['option_4']
        ]

        question = await create_question(
            test_id=data['test_id'],
            lesson_id=data['lesson_id'],
            question_text=data['question_text'],
            options=options,
            correct_answer_index=data['correct_answer'],
            explanation=explanation
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ç–µ—Å—Ç
        test = await get_test_by_id(data['test_id'])

        await message.bot.edit_message_text(
            chat_id=data['question_chat_id'],
            message_id=data['question_message_id'],
            text=f"‚úÖ <b>–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                 f"üìù {data['question_text']}\n"
                 f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –≤–∞—Ä–∏–∞–Ω—Ç {data['correct_answer'] + 1}\n\n"
                 f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {test.questions_count}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data=f"add_question_{data['test_id']}"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"list_questions_{data['test_id']}"),
                InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"test_questions_{data['test_id']}")
            ]])
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.bot.edit_message_text(
            chat_id=data['question_chat_id'],
            message_id=data['question_message_id'],
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞!</b>\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"test_questions_{data['test_id']}")
            ]])
        )
        await state.clear()


# ==================== –ü–†–û–°–ú–û–¢–† –°–ü–ò–°–ö–ê –í–û–ü–†–û–°–û–í ====================

@router.callback_query(F.data.startswith("list_questions_"))
@admin_required
async def list_questions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    test_id = int(callback.data.split("_")[2])
    test = await get_test_by_id(test_id)

    if not test:
        await callback.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    questions = await get_questions_by_test(test_id)

    if not questions:
        await callback.message.edit_text(
            "‚ùå <b>–í–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"add_question_{test_id}"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"test_questions_{test_id}")
            ]])
        )
        await callback.answer()
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–∫–∞–º
    series = await get_series_by_id(test.series_id)
    lessons = series.lessons if series else []

    questions_by_lesson = {}
    for q in questions:
        if q.lesson_id not in questions_by_lesson:
            questions_by_lesson[q.lesson_id] = []
        questions_by_lesson[q.lesson_id].append(q)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = f"üìù <b>{test.title}</b>\n"
    text += f"üìö {test.series.display_name}\n"
    text += f"‚ùì –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {test.questions_count}\n\n"
    text += "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"

    builder = InlineKeyboardBuilder()

    for lesson in lessons:
        lesson_questions = questions_by_lesson.get(lesson.id, [])
        if lesson_questions:
            text += f"üìö <b>–£—Ä–æ–∫ {lesson.lesson_number}: {lesson.title}</b>\n\n"

            for q in lesson_questions:
                text += f"‚ùì <b>–í–æ–ø—Ä–æ—Å #{q.id}</b>\n"
                text += f"{q.question_text}\n"
                text += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: –≤–∞—Ä–∏–∞–Ω—Ç {q.correct_answer_index + 1}\n"

                builder.add(InlineKeyboardButton(
                    text=f"‚úèÔ∏è #{q.id}",
                    callback_data=f"edit_question_{q.id}"
                ))
                builder.add(InlineKeyboardButton(
                    text=f"üóë #{q.id}",
                    callback_data=f"delete_q_confirm_{q.id}"
                ))

            text += "\n"

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"add_question_{test_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"test_questions_{test_id}"))
    builder.adjust(2, 2, 1, 1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# ==================== –£–î–ê–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í ====================

@router.callback_query(F.data.startswith("delete_q_confirm_"))
@admin_required
async def delete_question_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    question_id = int(callback.data.split("_")[3])
    question = await get_question_by_id(question_id)

    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = (
        f"üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?\n\n"
        f"‚ùì {question.question_text}\n\n"
        f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_q_{question_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"list_questions_{question.test_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("delete_q_") & ~F.data.contains("confirm"))
@admin_required
async def delete_question_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"""
    question_id = int(callback.data.split("_")[2])
    question = await get_question_by_id(question_id)

    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    test_id = question.test_id
    success = await delete_question(question_id)

    if success:
        await callback.message.edit_text(
            "‚úÖ <b>–í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω</b>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üìã –ö —Å–ø–∏—Å–∫—É", callback_data=f"list_questions_{test_id}"),
                InlineKeyboardButton(text="üîô –ö —Ç–µ—Å—Ç—É", callback_data=f"test_questions_{test_id}")
            ]])
        )
        await callback.answer("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


# ==================== –ü–†–û–°–ú–û–¢–† –í–û–ü–†–û–°–ê ====================

@router.callback_query(F.data.startswith("edit_question_"))
@admin_required
async def view_question_details(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ø—Ä–æ—Å–µ"""
    question_id = int(callback.data.split("_")[2])
    question = await get_question_by_id(question_id)

    if not question:
        await callback.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    text = f"üìù <b>–í–æ–ø—Ä–æ—Å #{question_id}</b>\n\n"
    text += f"‚ùì <b>–¢–µ–∫—Å—Ç:</b>\n{question.question_text}\n\n"
    text += "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:</b>\n"

    for i, option in enumerate(question.options_list, 1):
        marker = "‚úÖ" if i - 1 == question.correct_answer_index else "  "
        text += f"{i}. {marker} {option}\n"

    if question.explanation:
        text += f"\nüí° <b>–ü–æ—è—Å–Ω–µ–Ω–∏–µ:</b>\n{question.explanation}"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_q_confirm_{question_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data=f"list_questions_{question.test_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()
