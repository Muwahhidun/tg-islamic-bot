"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥
"""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_book_authors,
    get_book_author_by_id,
    get_book_author_by_name,
    create_book_author,
    update_book_author,
    delete_book_author,
)

router = Router()


class BookAuthorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥"""
    name = State()
    biography = State()


@router.callback_query(F.data == "admin_authors")
@admin_required
async def admin_authors(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    authors = await get_all_book_authors()

    builder = InlineKeyboardBuilder()
    for author in authors:
        status = "‚úÖ" if author.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {author.name}",
            callback_data=f"edit_author_{author.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="add_author"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_author")
@admin_required
async def add_author_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞"""
    await state.update_data(
        create_message_id=callback.message.message_id,
        create_chat_id=callback.message.chat.id
    )
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_authors")]])
    )
    await state.set_state(BookAuthorStates.name)
    await callback.answer()


@router.message(BookAuthorStates.name)
@admin_required
async def save_author_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    data = await state.get_data()
    author_id = data.get("author_id")
    editing_name = data.get("editing_name", False)
    new_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏
    existing_author = await get_book_author_by_name(new_name)
    if existing_author and (not author_id or existing_author.id != author_id):
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if author_id and editing_name:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            chat_id = data.get("edit_chat_id")
            message_id = data.get("edit_message_id")
            cancel_callback = f"edit_author_{author_id}"
        else:
            # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
            chat_id = data.get("create_chat_id")
            message_id = data.get("create_message_id")
            cancel_callback = "admin_authors"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
        if chat_id and message_id:
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ê–≤—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º ¬´{new_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)
                ]])
            )
        return

    if author_id and editing_name:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
        author = await get_book_author_by_id(author_id)
        if author:
            author.name = new_name
            await update_book_author(author)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.delete()
            except:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
            edit_message_id = data.get("edit_message_id")
            edit_chat_id = data.get("edit_chat_id")

            # –û—á–∏—â–∞–µ–º state
            await state.clear()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            author = await get_book_author_by_id(author_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ edit_author_menu)
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if author.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            bio_preview = (author.biography[:100] + "...") if author.biography and len(author.biography) > 100 else (author.biography or "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏")

            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_author_name_{author.id}"))
            builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"edit_author_bio_{author.id}"))
            builder.add(InlineKeyboardButton(text=f"üîÑ –°—Ç–∞—Ç—É—Å: {status_text}", callback_data=f"toggle_author_{author.id}"))
            builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"delete_author_{author.id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_authors"))
            builder.adjust(1)

            info = (
                f"‚úçÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {author.name}\n"
                f"üìñ <b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> {bio_preview}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message_id and edit_chat_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=edit_chat_id,
                        message_id=edit_message_id,
                        text=info,
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await message.answer(info, reply_markup=builder.as_markup())
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        create_message_id = data.get("create_message_id")
        create_chat_id = data.get("create_chat_id")

        await state.update_data(name=new_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if create_message_id and create_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=create_chat_id,
                    message_id=create_message_id,
                    text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_author_biography")],
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_authors")]
                    ])
                )
            except:
                await message.answer(
                    "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_author_biography")],
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_authors")]
                    ])
                )
        await state.set_state(BookAuthorStates.biography)


@router.callback_query(F.data == "skip_author_biography")
@admin_required
async def add_author_skip_biography(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ—Ä–∞
    author = await create_book_author(
        name=data["name"],
        biography="",
        is_active=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    create_message_id = data.get("create_message_id")
    create_chat_id = data.get("create_chat_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    authors = await get_all_book_authors()

    # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ –≤ admin_authors)
    builder = InlineKeyboardBuilder()
    for author_item in authors:
        status = "‚úÖ" if author_item.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {author_item.name}",
            callback_data=f"edit_author_{author_item.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="add_author"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if create_message_id and create_chat_id:
        try:
            await callback.bot.edit_message_text(
                chat_id=create_chat_id,
                message_id=create_message_id,
                text="‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.edit_text(
                "‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
                reply_markup=builder.as_markup()
            )
    await callback.answer()


@router.message(BookAuthorStates.biography)
@admin_required
async def save_author_biography(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    data = await state.get_data()
    author_id = data.get("author_id")
    editing_biography = data.get("editing_biography", False)

    if author_id and editing_biography:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–≤—Ç–æ—Ä–∞
        author = await get_book_author_by_id(author_id)
        if author:
            author.biography = message.text
            await update_book_author(author)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.delete()
            except:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
            edit_message_id = data.get("edit_message_id")
            edit_chat_id = data.get("edit_chat_id")

            # –û—á–∏—â–∞–µ–º state
            await state.clear()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            author = await get_book_author_by_id(author_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ edit_author_menu)
            status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if author.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            bio_preview = (author.biography[:100] + "...") if author.biography and len(author.biography) > 100 else (author.biography or "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏")

            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_author_name_{author.id}"))
            builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"edit_author_bio_{author.id}"))
            builder.add(InlineKeyboardButton(text=f"üîÑ –°—Ç–∞—Ç—É—Å: {status_text}", callback_data=f"toggle_author_{author.id}"))
            builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"delete_author_{author.id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_authors"))
            builder.adjust(1)

            info = (
                f"‚úçÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {author.name}\n"
                f"üìñ <b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> {bio_preview}\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message_id and edit_chat_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=edit_chat_id,
                        message_id=edit_message_id,
                        text=info,
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await message.answer(info, reply_markup=builder.as_markup())
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        create_message_id = data.get("create_message_id")
        create_chat_id = data.get("create_chat_id")

        # –°–æ–∑–¥–∞—ë–º –∞–≤—Ç–æ—Ä–∞
        author = await create_book_author(
            name=data["name"],
            biography=message.text,
            is_active=True
        )

        # –û—á–∏—â–∞–µ–º state
        await state.clear()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
        authors = await get_all_book_authors()

        # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ –≤ admin_authors)
        builder = InlineKeyboardBuilder()
        for author_item in authors:
            status = "‚úÖ" if author_item.is_active else "‚ùå"
            builder.add(InlineKeyboardButton(
                text=f"{status} {author_item.name}",
                callback_data=f"edit_author_{author_item.id}"
            ))

        builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="add_author"))
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        builder.adjust(1)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if create_message_id and create_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=create_chat_id,
                    message_id=create_message_id,
                    text="‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
                    reply_markup=builder.as_markup()
                )
            except:
                await message.answer(
                    "‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
                    reply_markup=builder.as_markup()
                )


@router.callback_query(F.data.regexp(r"^edit_author_\d+$"))
@admin_required
async def edit_author_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[2])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if author.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    bio_preview = (author.biography[:100] + "...") if author.biography and len(author.biography) > 100 else (author.biography or "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏")

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_author_name_{author.id}"))
    builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"edit_author_bio_{author.id}"))
    builder.add(InlineKeyboardButton(text=f"üîÑ –°—Ç–∞—Ç—É—Å: {status_text}", callback_data=f"toggle_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"delete_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_authors"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"‚úçÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {author.name}\n"
        f"üìñ <b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> {bio_preview}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_author_name_"))
@admin_required
async def edit_author_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[3])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await callback.message.edit_text(
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∏–º—è: {author.name}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_author_{author.id}")]])
    )
    await state.update_data(
        author_id=author_id,
        editing_name=True,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(BookAuthorStates.name)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_author_bio_"))
@admin_required
async def edit_author_bio_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[3])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    current_bio = author.biography or "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"
    bio_preview = (current_bio[:200] + "...") if len(current_bio) > 200 else current_bio

    await callback.message.edit_text(
        f"üìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è:\n{bio_preview}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"delete_author_bio_{author.id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_author_{author.id}")]
        ])
    )
    await state.update_data(
        author_id=author_id,
        editing_biography=True,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(BookAuthorStates.biography)
    await callback.answer()


@router.callback_query(F.data.startswith("delete_author_bio_"))
@admin_required
async def delete_author_bio(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[3])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    author.biography = ""
    await update_book_author(author)

    await state.clear()
    await callback.answer("‚úÖ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    author = await get_book_author_by_id(author_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ edit_author_menu)
    status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if author.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
    bio_preview = (author.biography[:100] + "...") if author.biography and len(author.biography) > 100 else (author.biography or "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏")

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"edit_author_name_{author.id}"))
    builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é", callback_data=f"edit_author_bio_{author.id}"))
    builder.add(InlineKeyboardButton(text=f"üîÑ –°—Ç–∞—Ç—É—Å: {status_text}", callback_data=f"toggle_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"delete_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_authors"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"‚úçÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {author.name}\n"
        f"üìñ <b>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</b> {bio_preview}\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}",
        reply_markup=builder.as_markup()
    )


@router.callback_query(F.data.startswith("toggle_author_"))
@admin_required
async def toggle_author(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[2])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    author.is_active = not author.is_active
    await update_book_author(author)

    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if author.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
    await callback.answer(f"‚úÖ –ê–≤—Ç–æ—Ä {status}")

    # –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é
    await edit_author_menu(callback)


@router.callback_query(F.data.startswith("delete_author_"))
@admin_required
async def delete_author_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞"""
    author_id = int(callback.data.split("_")[2])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–¥—Å—á–µ—Ç –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
    books_count = len(author.books) if author.books else 0

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_author_{author.id}"))
    builder.adjust(1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warning_text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
    warning_text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ ¬´{author.name}¬ª?\n\n"

    if books_count > 0:
        warning_text += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£ —ç—Ç–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –µ—Å—Ç—å {books_count} –∫–Ω–∏–≥(–∏).\n"
        warning_text += "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∞ –ø–æ–ª–µ '–ê–≤—Ç–æ—Ä' —É —ç—Ç–∏—Ö –∫–Ω–∏–≥ —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç—ã–º.\n\n"

    warning_text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"

    await callback.message.edit_text(
        warning_text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_author_"))
@admin_required
async def delete_author_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    author_id = int(callback.data.split("_")[3])
    author = await get_book_author_by_id(author_id)

    if not author:
        await callback.answer("‚ùå –ê–≤—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    author_name = author.name
    await delete_book_author(author_id)

    await callback.message.edit_text(
        f"‚úÖ –ê–≤—Ç–æ—Ä ¬´{author_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–æ–≤", callback_data="admin_authors")]])
    )
    await callback.answer()
