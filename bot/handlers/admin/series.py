"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏—è–º–∏ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_lesson_teachers,
    get_series_by_teacher,
    get_series_by_id,
    create_lesson_series,
    update_lesson_series,
    delete_lesson_series,
    get_all_books,
    get_book_by_id,
    get_all_themes,
    bulk_update_series_lessons,
    bulk_update_book_lessons,
    update_book,
    regenerate_series_lessons_titles
)

router = Router()


class SeriesStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏—è–º–∏"""
    select_teacher = State()
    select_series = State()
    edit_name = State()
    edit_year = State()
    edit_description = State()
    select_book = State()
    select_theme = State()
    confirm_delete = State()
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏
    create_name = State()
    create_year = State()
    create_description = State()
    create_book = State()
    create_theme = State()


@router.callback_query(F.data == "admin_series")
@admin_required
async def series_menu(callback: CallbackQuery):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏—è–º–∏"""
    text = (
        "üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏ —É—Ä–æ–∫–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å–µ—Ä–∏–π:"
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = await get_all_lesson_teachers()

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        teacher_series = await get_series_by_teacher(teacher.id)
        series_count = len(teacher_series)

        builder.add(InlineKeyboardButton(
            text=f"üë§ {teacher.name} ({series_count} —Å–µ—Ä.)",
            callback_data=f"series_teacher_{teacher.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_teacher_"))
@admin_required
async def show_teacher_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = int(callback.data.split("_")[2])
    series_list = await get_series_by_teacher(teacher_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    from bot.services.database_service import get_lesson_teacher_by_id
    teacher = await get_lesson_teacher_by_id(teacher_id)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    if not series_list:
        # –ù–µ—Ç —Å–µ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è
        text = (
            f"üìÅ <b>–°–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}</b>\n\n"
            f"–£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–π."
        )
    else:
        text = f"üìÅ <b>–°–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}</b>\n\n"

    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    for series in series_list:
        lessons_count = series.total_lessons
        status = "‚úÖ" if series.is_completed else "üîÑ"
        active = "‚úÖ" if series.is_active else "‚ùå"

        button_text = f"{status} {series.year} - {series.name} ({lessons_count} —É—Ä.) {active}"
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"series_view_{series.id}"
        ))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
    builder.add(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Ä–∏—é", callback_data=f"series_create_teacher_{teacher_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_series"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_view_"))
@admin_required
async def view_series(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[2])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" - –ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_edit_name_"))
@admin_required
async def edit_series_name(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Single-Window UX
    await state.update_data(
        series_id=series_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(SeriesStates.edit_name)

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{series.name}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}")
        ]])
    )
    await callback.answer()


@router.message(SeriesStates.edit_name)
@admin_required
async def save_series_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    series = await get_series_by_id(series_id)
    if not series:
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text="‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        await state.clear()
        return

    series.name = message.text.strip()
    await update_lesson_series(series)

    # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    updated_lessons = await regenerate_series_lessons_titles(series_id)
    if updated_lessons > 0:
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤: {updated_lessons} (—Å–µ—Ä–∏—è {series_id})")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    series = await get_series_by_id(series_id)

    # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–µ—Ä–∏–∏
    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=text,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("series_toggle_completed_"))
@admin_required
async def toggle_series_completed(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    series.is_completed = not series.is_completed
    await update_lesson_series(series)

    status = "–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π" if series.is_completed else "–Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–π"
    await callback.answer(f"‚úÖ –°–µ—Ä–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Ä–∏–∏
    await view_series(callback)


@router.callback_query(F.data.startswith("series_toggle_active_"))
@admin_required
async def toggle_series_active(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    series.is_active = not series.is_active
    await update_lesson_series(series)

    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if series.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await callback.answer(f"‚úÖ –°–µ—Ä–∏—è {status}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Ä–∏–∏
    await view_series(callback)


@router.callback_query(F.data.startswith("series_delete_") & ~F.data.startswith("series_delete_confirm_"))
@admin_required
async def confirm_delete_series(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[2])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    text = (
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∏</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é:\n"
        f"<b>{series.display_name}</b>\n\n"
        f"–£—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–∏–∏: {series.total_lessons}\n\n"
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –£—Ä–æ–∫–∏ –ù–ï –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã, –Ω–æ —É –Ω–∏—Ö —Å—Ç–∞–Ω–µ—Ç series_id = NULL"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"series_delete_confirm_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series.id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_delete_confirm_"))
@admin_required
async def delete_series_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    teacher_id = series.teacher_id
    series_name = series.display_name

    await delete_lesson_series(series_id)

    await callback.message.edit_text(
        f"‚úÖ <b>–°–µ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞:</b> {series_name}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{teacher_id}")
        ]])
    )
    await callback.answer("‚úÖ –°–µ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞")


@router.callback_query(F.data.startswith("series_edit_year_"))
@admin_required
async def edit_series_year(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–¥–∞ —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Single-Window UX
    await state.update_data(
        series_id=series_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(SeriesStates.edit_year)

    await callback.message.edit_text(
        f"üìÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–¥–∞ —Å–µ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –≥–æ–¥: <b>{series.year}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥ (2000-2050):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}")
        ]])
    )
    await callback.answer()


@router.message(SeriesStates.edit_year)
@admin_required
async def save_series_year(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ —Å–µ—Ä–∏–∏"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    series = await get_series_by_id(series_id)
    if not series:
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text="‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        await state.clear()
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–¥–∞
    try:
        year = int(message.text.strip())
        if year < 2000 or year > 2050:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
            await message.bot.edit_message_text(
                chat_id=data['edit_chat_id'],
                message_id=data['edit_message_id'],
                text=f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2050.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}")
                ]])
            )
            return
    except ValueError:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ç–æ–º –∂–µ –æ–∫–Ω–µ
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text=f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}")
            ]])
        )
        return

    series.year = year
    await update_lesson_series(series)

    # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    updated_lessons = await regenerate_series_lessons_titles(series_id)
    if updated_lessons > 0:
        import logging
        logger = logging.getLogger(__name__)
        logger.info(f"–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤: {updated_lessons} (—Å–µ—Ä–∏—è {series_id})")

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    series = await get_series_by_id(series_id)

    # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–µ—Ä–∏–∏
    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=text,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("series_edit_desc_"))
@admin_required
async def edit_series_description(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Single-Window UX
    await state.update_data(
        series_id=series_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(SeriesStates.edit_description)

    current_desc = series.description if series.description else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: <i>{current_desc}</i>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}")
        ]])
    )
    await callback.answer()


@router.message(SeriesStates.edit_description)
@admin_required
async def save_series_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    series = await get_series_by_id(series_id)
    if not series:
        await message.bot.edit_message_text(
            chat_id=data['edit_chat_id'],
            message_id=data['edit_message_id'],
            text="‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        )
        await state.clear()
        return

    if message.text.strip() == "-":
        series.description = None
    else:
        series.description = message.text.strip()

    await update_lesson_series(series)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    series = await get_series_by_id(series_id)

    # –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω–æ–µ –º–µ–Ω—é —Å–µ—Ä–∏–∏
    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.bot.edit_message_text(
        chat_id=data['edit_chat_id'],
        message_id=data['edit_message_id'],
        text=text,
        reply_markup=builder.as_markup()
    )
    await state.clear()


@router.callback_query(F.data.startswith("series_edit_book_"))
@admin_required
async def edit_series_book(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    books = await get_all_books()

    await state.update_data(series_id=series_id)
    await state.set_state(SeriesStates.select_book)

    text = (
        f"üìñ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —Å–µ—Ä–∏–∏</b>\n\n"
        f"–°–µ—Ä–∏—è: <b>{series.year} - {series.name}</b>\n"
        f"–¢–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞: <b>{series.book_title or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É:"
    )

    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–ë–µ–∑ –∫–Ω–∏–≥–∏"
    builder.add(InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–Ω–∏–≥–∏", callback_data=f"series_set_book_{series_id}_none"))

    for book in books:
        builder.add(InlineKeyboardButton(
            text=book.name,
            callback_data=f"series_set_book_{series_id}_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_set_book_"))
@admin_required
async def set_series_book(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É"""
    parts = callback.data.split("_")
    series_id = int(parts[3])
    book_id = None if parts[4] == "none" else int(parts[4])

    series = await get_series_by_id(series_id)
    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return

    series.book_id = book_id
    await update_lesson_series(series)

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ –≤ —Å–µ—Ä–∏–∏
    updated_count = await bulk_update_series_lessons(series_id, book_id=book_id)

    await state.clear()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–∏—é –∏–∑ –ë–î —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    series = await get_series_by_id(series_id)
    book_name = series.book_title if series.book_title else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    await callback.answer(f"‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {book_name} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count})")

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Ä–∏–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("series_edit_theme_"))
@admin_required
async def edit_series_theme(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —Å–µ—Ä–∏–∏ (–∏–ª–∏ —Ç–µ–º—É –∫–Ω–∏–≥–∏, –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ —Å —Ç–µ–º–æ–π)"""
    series_id = int(callback.data.split("_")[3])
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–µ—Ä–∏–∏ –∫–Ω–∏–≥–∞ —Å —Ç–µ–º–æ–π
    book_has_theme = False
    book_theme_id = None
    book_name = None
    try:
        if series.book and series.book.theme_id:
            book_has_theme = True
            book_theme_id = series.book.theme_id
            book_name = series.book.name
    except Exception:
        pass

    themes = await get_all_themes()

    await state.update_data(series_id=series_id, book_has_theme=book_has_theme, book_id=series.book_id if series.book else None)
    await state.set_state(SeriesStates.select_theme)

    if book_has_theme:
        # –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        text = (
            f"‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è –∫–Ω–∏–≥–∏</b>\n\n"
            f"–°–µ—Ä–∏—è: <b>{series.year} - {series.name}</b>\n"
            f"–ö–Ω–∏–≥–∞: <b>{book_name}</b>\n\n"
            f"üìå –£ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–º–∞.\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑–º–µ–Ω–∏—Ç –µ—ë –¥–ª—è <b>–í–°–ï–•</b> —Å–µ—Ä–∏–π –∏ —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π –∫–Ω–∏–≥–∏.\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: <b>{series.theme_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:"
        )
    else:
        # –ö–Ω–∏–≥–∏ –Ω–µ—Ç –∏–ª–∏ —É –∫–Ω–∏–≥–∏ –Ω–µ—Ç —Ç–µ–º—ã - –æ–±—ã—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã —Å–µ—Ä–∏–∏
        text = (
            f"üìÅ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –¥–ª—è —Å–µ—Ä–∏–∏</b>\n\n"
            f"–°–µ—Ä–∏—è: <b>{series.year} - {series.name}</b>\n"
            f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: <b>{series.theme_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:"
        )

    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–ë–µ–∑ —Ç–µ–º—ã"
    builder.add(InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ç–µ–º—ã", callback_data=f"series_set_theme_{series_id}_none"))

    for theme in themes:
        builder.add(InlineKeyboardButton(
            text=theme.name,
            callback_data=f"series_set_theme_{series_id}_{theme.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_view_{series_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_set_theme_"))
@admin_required
async def set_series_theme(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É (–¥–ª—è —Å–µ—Ä–∏–∏ –∏–ª–∏ –¥–ª—è –∫–Ω–∏–≥–∏)"""
    parts = callback.data.split("_")
    series_id = int(parts[3])
    theme_id = None if parts[4] == "none" else int(parts[4])

    data = await state.get_data()
    book_has_theme = data.get("book_has_theme", False)
    book_id = data.get("book_id")

    series = await get_series_by_id(series_id)
    if not series:
        await callback.answer("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return

    updated_count = 0

    if book_has_theme and book_id:
        # –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–º–∞ - –º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–Ω–∏–≥–∏ + –æ–±–Ω–æ–≤–ª—è–µ–º –í–°–ï —É—Ä–æ–∫–∏ —ç—Ç–æ–π –∫–Ω–∏–≥–∏
        book = series.book
        book.theme_id = theme_id
        await update_book(book)

        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–∏–π —ç—Ç–æ–π –∫–Ω–∏–≥–∏
        updated_count = await bulk_update_book_lessons(book_id, theme_id=theme_id)
    else:
        # –ö–Ω–∏–≥–∏ –Ω–µ—Ç –∏–ª–∏ —É –Ω–µ—ë –Ω–µ—Ç —Ç–µ–º—ã - –º–µ–Ω—è–µ–º —Ç–µ–º—É —Å–µ—Ä–∏–∏
        series.theme_id = theme_id
        await update_lesson_series(series)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ –≤ —Å–µ—Ä–∏–∏
        updated_count = await bulk_update_series_lessons(series_id, theme_id=theme_id)

    await state.clear()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–∏—é –∏–∑ –ë–î —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    series = await get_series_by_id(series_id)
    theme_name = series.theme_name if series.theme_name else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    if book_has_theme:
        await callback.answer(f"‚úÖ –¢–µ–º–∞ –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {theme_name} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–∏—è—Ö: {updated_count})")
    else:
        await callback.answer(f"‚úÖ –¢–µ–º–∞ —Å–µ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {theme_name} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count})")

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–µ—Ä–∏–∏ - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = series.full_info

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"series_edit_name_{series.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–¥", callback_data=f"series_edit_year_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"series_edit_desc_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìñ –ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"series_edit_book_{series.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"series_edit_theme_{series.id}"))

    if series.is_completed:
        builder.add(InlineKeyboardButton(text="üîÑ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é", callback_data=f"series_toggle_completed_{series.id}"))

    if series.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"series_toggle_active_{series.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"series_delete_{series.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π", callback_data=f"series_teacher_{series.teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())


# ============= –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ô –°–ï–†–ò–ò =============

@router.callback_query(F.data.startswith("series_create_teacher_"))
@admin_required
async def create_series_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = int(callback.data.split("_")[3])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Single-Window UX
    await state.update_data(
        teacher_id=teacher_id,
        create_message_id=callback.message.message_id,
        create_chat_id=callback.message.chat.id
    )
    await state.set_state(SeriesStates.create_name)

    await callback.message.edit_text(
        "üìÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏</b>\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")
        ]])
    )
    await callback.answer()


@router.message(SeriesStates.create_name)
@admin_required
async def create_series_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≥–æ–¥"""
    data = await state.get_data()
    teacher_id = data.get("teacher_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    name = message.text.strip()

    if not name:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")
            ]])
        )
        return

    await state.update_data(name=name)
    await state.set_state(SeriesStates.create_year)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text=f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
             f"–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–µ—Ä–∏–∏ (2000-2050):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")
        ]])
    )


@router.message(SeriesStates.create_year)
@admin_required
async def create_series_year(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–¥ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    data = await state.get_data()
    teacher_id = data.get("teacher_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≥–æ–¥–∞
    try:
        year = int(message.text.strip())
        if year < 2000 or year > 2050:
            await message.bot.edit_message_text(
                chat_id=data['create_chat_id'],
                message_id=data['create_message_id'],
                text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2050.\n\n–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")
                ]])
            )
            return
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (—á–∏—Å–ª–æ).\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")
            ]])
        )
        return

    await state.update_data(year=year)
    await state.set_state(SeriesStates.create_description)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text=f"‚úÖ –ì–æ–¥: <b>{year}</b>\n\n"
             f"–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="series_create_skip_desc")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}")]
        ])
    )


@router.callback_query(F.data == "series_create_skip_desc")
@admin_required
async def create_series_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏"""
    await state.update_data(description=None)
    await ask_series_book(callback, state)


@router.message(SeriesStates.create_description)
@admin_required
async def create_series_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏"""
    data = await state.get_data()

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    description = message.text.strip()
    await state.update_data(description=description)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–Ω–∏–≥–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è)
    books = await get_all_books()
    teacher_id = data.get("teacher_id")

    await state.set_state(SeriesStates.create_book)

    text = (
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        f"–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Å–µ—Ä–∏–∏:"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–Ω–∏–≥–∏", callback_data="series_create_book_none"))

    for book in books:
        builder.add(InlineKeyboardButton(
            text=book.name,
            callback_data=f"series_create_book_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}"))
    builder.adjust(1)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text=text,
        reply_markup=builder.as_markup()
    )


async def ask_series_book(callback: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏ (–¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è)"""
    data = await state.get_data()
    teacher_id = data.get("teacher_id")

    books = await get_all_books()

    await state.set_state(SeriesStates.create_book)

    text = (
        f"–®–∞–≥ 4/5: –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Å–µ—Ä–∏–∏:"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∫–Ω–∏–≥–∏", callback_data="series_create_book_none"))

    for book in books:
        builder.add(InlineKeyboardButton(
            text=book.name,
            callback_data=f"series_create_book_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_create_book_"))
@admin_required
async def create_series_book(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –∏ —Ä–µ—à–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ —Ç–µ–º–∞"""
    parts = callback.data.split("_")
    book_id = None if parts[3] == "none" else int(parts[3])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–º—É
    need_theme = True
    book_theme_id = None

    if book_id:
        book = await get_book_by_id(book_id)
        if book and book.theme_id:
            # –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–º–∞ - –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
            need_theme = False
            book_theme_id = book.theme_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–∞–ª—å—à–µ
    if need_theme:
        # –ö–Ω–∏–≥–∏ –Ω–µ—Ç –∏–ª–∏ —É –Ω–µ—ë –Ω–µ—Ç —Ç–µ–º—ã - –±—É–¥–µ–º —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–º—É
        await state.update_data(book_id=book_id, book_has_theme=False)
        await ask_series_theme(callback, state)
    else:
        # –£ –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–º–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë –∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Ä–∏—é
        await state.update_data(book_id=book_id, theme_id=book_theme_id, book_has_theme=True)
        await create_series_final(callback, state)


async def ask_series_theme(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã"""
    data = await state.get_data()
    teacher_id = data.get("teacher_id")

    themes = await get_all_themes()

    await state.set_state(SeriesStates.create_theme)

    text = (
        f"‚úÖ –ö–Ω–∏–≥–∞ –≤—ã–±—Ä–∞–Ω–∞\n\n"
        f"–®–∞–≥ 5/5: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–µ—Ä–∏–∏:"
    )

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –ë–µ–∑ —Ç–µ–º—ã", callback_data="series_create_theme_none"))

    for theme in themes:
        builder.add(InlineKeyboardButton(
            text=theme.name,
            callback_data=f"series_create_theme_{theme.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"series_teacher_{teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("series_create_theme_"))
@admin_required
async def create_series_theme(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä–∏—é"""
    parts = callback.data.split("_")
    theme_id = None if parts[3] == "none" else int(parts[3])

    await state.update_data(theme_id=theme_id)
    await create_series_final(callback, state)


async def create_series_final(callback: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    data = await state.get_data()

    teacher_id = data.get("teacher_id")
    name = data.get("name")
    year = data.get("year")
    description = data.get("description")
    book_id = data.get("book_id")
    theme_id = data.get("theme_id")
    book_has_theme = data.get("book_has_theme", False)

    # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–∏—é
    created_series = await create_lesson_series(
        name=name,
        year=year,
        teacher_id=teacher_id,
        description=description,
        book_id=book_id,
        theme_id=theme_id if not book_has_theme else None  # –ï—Å–ª–∏ —É –∫–Ω–∏–≥–∏ –µ—Å—Ç—å —Ç–µ–º–∞, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º theme_id –≤ —Å–µ—Ä–∏–∏
    )

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑—è–º–∏
    created_series = await get_series_by_id(created_series.id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∫–∞–∑–∞
    series_list = await get_series_by_teacher(teacher_id)
    from bot.services.database_service import get_lesson_teacher_by_id
    teacher = await get_lesson_teacher_by_id(teacher_id)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    text = f"üìÅ <b>–°–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_name}</b>\n\n"

    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏
    for series in series_list:
        lessons_count = series.total_lessons
        status = "‚úÖ" if series.is_completed else "üîÑ"
        active = "‚úÖ" if series.is_active else "‚ùå"

        button_text = f"{status} {series.year} - {series.name} ({lessons_count} —É—Ä.) {active}"
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"series_view_{series.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Ä–∏—é", callback_data=f"series_create_teacher_{teacher_id}"))
    builder.add(InlineKeyboardButton(text="üîô –ö –≤—ã–±–æ—Ä—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="admin_series"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å–µ—Ä–∏–π
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer(f"‚úÖ –°–µ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {created_series.year} - {created_series.name}")

    await state.clear()


# TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ (series_bulk_update)
