"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import os
import re
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.utils.audio_converter import convert_to_mp3_auto, get_audio_duration
from bot.utils.formatters import format_duration, format_file_size
from bot.utils.config import config
from bot.services.database_service import (
    get_all_lessons,
    get_all_books,
    get_all_themes,
    get_all_lesson_teachers,
    get_lesson_by_id,
    get_lesson_teacher_by_id,
    get_book_by_id,
    create_lesson,
    update_lesson,
    delete_lesson,
    get_series_by_teacher,
    get_series_by_id,
    check_lesson_number_exists,
    regenerate_lesson_title,
)
from bot.models.lesson import Lesson
from bot.models.book import Book
from bot.models.database import async_session_maker
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload, joinedload

logger = logging.getLogger(__name__)

router = Router()


class LessonStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
    description = State()
    series_id = State()  # –í—ã–±–æ—Ä —Å–µ—Ä–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    book_id = State()
    theme_id = State()
    teacher_id = State()
    lesson_number = State()
    tags = State()
    audio_file = State()
    replace_audio = State()  # –î–ª—è –∑–∞–º–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_description = State()
    edit_number = State()
    edit_tags = State()


# === Helper —Ñ—É–Ω–∫—Ü–∏–∏ ===

async def _get_teacher_name(teacher_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    return teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"


@router.callback_query(F.data == "admin_lessons")
@admin_required
async def admin_lessons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
    teachers = await get_all_lesson_teachers()

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        lessons = await get_all_lessons()
        teacher_lessons_count = len([l for l in lessons if l.teacher_id == teacher.id])

        builder.add(InlineKeyboardButton(
            text=f"üë§ {teacher.name} ({teacher_lessons_count} —É—Ä–æ–∫.)",
            callback_data=f"lessons_teacher_{teacher.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üéß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lessons_teacher_"))
@admin_required
async def show_teacher_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = int(callback.data.split("_")[2])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Ä–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    series_list = await get_series_by_teacher(teacher_id)

    if not series_list:
        await callback.message.edit_text(
            f"üéß <b>–£—Ä–æ–∫–∏: {await _get_teacher_name(teacher_id)}</b>\n\n"
            "‚ùå –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–π.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–∏—é –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏'",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ä–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—Ä–æ–∫–æ–≤
    for series in series_list:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–∏–∏
        async with async_session_maker() as session:
            result = await session.execute(
                select(Lesson).where(Lesson.series_id == series.id)
            )
            lessons_count = len(result.scalars().all())

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        button_text = f"üìÅ {series.year} - {series.name}"
        if series.book_title:
            button_text += f" ({series.book_title})"
        button_text += f" ‚Ä¢ {lessons_count} —É—Ä–æ–∫."

        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"lessons_series_id_{series.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {await _get_teacher_name(teacher_id)}</b>\n\n"
        f"–í—Å–µ–≥–æ —Å–µ—Ä–∏–π: {len(series_list)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^lessons_no_theme_\d+$"))
@admin_required
async def show_lessons_without_theme(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–º—ã (effective_theme_id == None)"""
    teacher_id = int(callback.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(Lesson.teacher_id == teacher_id)
            .options(
                joinedload(Lesson.book).joinedload(Book.theme),
                joinedload(Lesson.theme)
            )
            .order_by(Lesson.series_id)
        )
        all_lessons = result.scalars().unique().all()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–º—ã
    lessons = [lesson for lesson in all_lessons if lesson.effective_theme_id is None]

    if not lessons:
        await callback.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤", show_alert=True)
        return

    builder = InlineKeyboardBuilder()

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–Ω–∏–≥–∞–º
    book_map = {}
    lessons_without_book_count = 0

    for lesson in lessons:
        if lesson.book:
            book_id = lesson.book.id
            if book_id not in book_map:
                book_map[book_id] = {
                    "id": book_id,
                    "name": lesson.book.name,
                    "lessons": []
                }
            book_map[book_id]["lessons"].append(lesson)
        else:
            lessons_without_book_count += 1

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–Ω–∏–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if lessons_without_book_count > 0:
        builder.add(InlineKeyboardButton(
            text=f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏ ({lessons_without_book_count} —É—Ä–æ–∫.)",
            callback_data=f"lessons_no_theme_no_book_{teacher_id}"
        ))

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    for book_id, book_data in sorted(book_map.items(), key=lambda x: x[1]["name"]):
        builder.add(InlineKeyboardButton(
            text=f"üìñ {book_data['name']} ({len(book_data['lessons'])} —É—Ä–æ–∫.)",
            callback_data=f"lessons_no_theme_book_{teacher_id}_{book_id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìö <b>–£—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–º—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=builder.as_markup()
    )

    await callback.answer()


@router.callback_query(F.data.startswith("lessons_no_theme_no_book_"))
@admin_required
async def show_no_theme_no_book_lessons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–º—ã –∏ –±–µ–∑ –∫–Ω–∏–≥–∏"""
    teacher_id = int(callback.data.split("_")[5])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ —Ç–µ–º—ã –∏ –±–µ–∑ –∫–Ω–∏–≥–∏
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(and_(
                Lesson.teacher_id == teacher_id,
                Lesson.book_id == None,
                Lesson.theme_id == None
            ))
            .options(joinedload(Lesson.series))
            .order_by(Lesson.series_id, Lesson.lesson_number)
        )
        lessons = result.scalars().unique().all()

    if not lessons:
        await callback.answer("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–∏—è–º
    series_map = {}
    for lesson in lessons:
        if lesson.series_id:
            series_key = f"series_{lesson.series_id}"
            if series_key not in series_map:
                series_map[series_key] = {
                    "year": lesson.series.year if lesson.series else 0,
                    "name": lesson.series.name if lesson.series else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    "lessons": []
                }
            series_map[series_key]["lessons"].append(lesson)

    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–µ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É —É—Ä–æ–∫–∏
    if len(series_map) == 1:
        series_data = list(series_map.values())[0]
        for lesson in sorted(series_data["lessons"], key=lambda x: x.lesson_number or 0):
            lesson_num = f"–£—Ä–æ–∫ {lesson.lesson_number}" if lesson.lesson_number else "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            builder.add(InlineKeyboardButton(
                text=f"üéß {lesson_num}",
                callback_data=f"edit_lesson_{lesson.id}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_no_theme_{teacher_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìö <b>–ë–µ–∑ —Ç–µ–º—ã</b>\n"
            f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏\n"
            f"üìÅ –°–µ—Ä–∏—è: {series_data['year']} - {series_data['name']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
            reply_markup=builder.as_markup()
        )
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
        for series_key in sorted(series_map.keys(), key=lambda x: (-series_map[x]["year"], series_map[x]["name"])):
            series_data = series_map[series_key]
            builder.add(InlineKeyboardButton(
                text=f"üìö {series_data['year']} - {series_data['name']} ({len(series_data['lessons'])} —É—Ä–æ–∫.)",
                callback_data=f"lessons_no_theme_no_book_series_{teacher_id}_{series_data['year']}_{series_data['name']}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_no_theme_{teacher_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìö <b>–ë–µ–∑ —Ç–µ–º—ã</b>\n"
            f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("lessons_no_theme_book_"))
@admin_required
async def show_no_theme_book_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ –¥–ª—è –∫–Ω–∏–≥–∏ –±–µ–∑ —Ç–µ–º—ã"""
    parts = callback.data.split("_")
    teacher_id = int(parts[4])
    book_id = int(parts[5])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(and_(
                Lesson.teacher_id == teacher_id,
                Lesson.book_id == book_id
            ))
            .options(joinedload(Lesson.book), joinedload(Lesson.series))
            .order_by(Lesson.series_id, Lesson.lesson_number)
        )
        lessons = result.scalars().unique().all()

    if not lessons:
        await callback.answer("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    book_name = lessons[0].book.name if lessons[0].book else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–∏—è–º
    series_map = {}
    for lesson in lessons:
        if lesson.series_id:
            series_key = f"series_{lesson.series_id}"
            if series_key not in series_map:
                series_map[series_key] = {
                    "year": lesson.series.year if lesson.series else 0,
                    "name": lesson.series.name if lesson.series else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                    "lessons": []
                }
            series_map[series_key]["lessons"].append(lesson)

    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–µ—Ä–∏—è - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏
    if len(series_map) == 1:
        series_data = list(series_map.values())[0]
        for lesson in sorted(series_data["lessons"], key=lambda x: x.lesson_number or 0):
            lesson_num = f"–£—Ä–æ–∫ {lesson.lesson_number}" if lesson.lesson_number else "–ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            builder.add(InlineKeyboardButton(
                text=f"üéß {lesson_num}",
                callback_data=f"edit_lesson_{lesson.id}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_no_theme_{teacher_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìñ <b>{book_name}</b>\n"
            f"üìÅ –°–µ—Ä–∏—è: {series_data['year']} - {series_data['name']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
            reply_markup=builder.as_markup()
        )
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
        for series_key in sorted(series_map.keys(), key=lambda x: (-series_map[x]["year"], series_map[x]["name"])):
            series_data = series_map[series_key]
            builder.add(InlineKeyboardButton(
                text=f"üìö {series_data['year']} - {series_data['name']} ({len(series_data['lessons'])} —É—Ä–æ–∫.)",
                callback_data=f"lessons_no_theme_series_{teacher_id}_{book_id}_{series_data['year']}_{series_data['name']}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_no_theme_{teacher_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìñ <b>{book_name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )

    await callback.answer()




@router.callback_query(F.data.regexp(r"^lessons_theme_\d+_\d+$"))
@admin_required
async def show_theme_books(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    theme_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(Lesson.teacher_id == teacher_id)
            .options(
                joinedload(Lesson.book).joinedload(Book.theme),
                joinedload(Lesson.theme)
            )
        )
        teacher_lessons = result.scalars().unique().all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ–º–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        book_data = {}
        theme_name = None
        lessons_without_book = 0

        for lesson in teacher_lessons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ä–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —ç—Ç–æ–π —Ç–µ–º–µ
            if lesson.effective_theme_id == theme_id:
                if theme_name is None:
                    effective_theme = lesson.effective_theme
                    if effective_theme:
                        theme_name = effective_theme.name

                if lesson.book:
                    # –£—Ä–æ–∫ —Å –∫–Ω–∏–≥–æ–π
                    book_id = lesson.book.id
                    if book_id not in book_data:
                        book_data[book_id] = {
                            "id": book_id,
                            "name": lesson.book.name,
                            "count": 0
                        }
                    book_data[book_id]["count"] += 1
                else:
                    # –£—Ä–æ–∫ –±–µ–∑ –∫–Ω–∏–≥–∏, –Ω–æ —Å —Ç–µ–º–æ–π
                    lessons_without_book += 1

    if not book_data and lessons_without_book == 0:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ —Å —É—Ä–æ–∫–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–Ω–∏–≥–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if lessons_without_book > 0:
        builder.add(InlineKeyboardButton(
            text=f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏ ({lessons_without_book} —É—Ä–æ–∫.)",
            callback_data=f"lessons_theme_no_book_{teacher_id}_{theme_id}"
        ))

    for book in sorted(book_data.values(), key=lambda x: x["name"]):
        builder.add(InlineKeyboardButton(
            text=f"üìñ {book['name']} ({book['count']} —É—Ä–æ–∫.)",
            callback_data=f"lessons_book_{teacher_id}_{theme_id}_{book['id']}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    if theme_name is None:
        themes = await get_all_themes()
        theme = next((t for t in themes if t.id == theme_id), None)
        theme_name = theme.name if theme else "–¢–µ–º–∞"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
        f"üìö –¢–µ–º–∞: {theme_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lessons_theme_no_book_"))
@admin_required
async def show_theme_lessons_without_book(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –±–µ–∑ –∫–Ω–∏–≥–∏ –≤ —Ä–∞–º–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã"""
    parts = callback.data.split("_")
    teacher_id = int(parts[4])
    theme_id = int(parts[5])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ –∫–Ω–∏–≥–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(and_(
                Lesson.teacher_id == teacher_id,
                Lesson.book_id == None,
                Lesson.theme_id == theme_id
            ))
            .options(joinedload(Lesson.theme), joinedload(Lesson.series))
            .order_by(Lesson.series_id, Lesson.lesson_number)
        )
        lessons = result.scalars().unique().all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–∏—è–º
        series_map = {}
        theme_name = None

        for lesson in lessons:
            if theme_name is None and lesson.theme:
                theme_name = lesson.theme.name

            if lesson.series_id:
                series_key = f"series_{lesson.series_id}"
                if series_key not in series_map:
                    series_map[series_key] = {
                        "year": lesson.series.year if lesson.series else 0,
                        "name": lesson.series.name if lesson.series else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "lessons": []
                    }
                series_map[series_key]["lessons"].append({
                    "id": lesson.id,
                    "title": lesson.title,
                    "lesson_number": lesson.lesson_number,
                    "is_active": lesson.is_active
                })

    if not series_map:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç —É—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–Ω–∏–≥–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()

    # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å–µ—Ä–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É —É—Ä–æ–∫–∏
    if len(series_map) == 1:
        series_data = list(series_map.values())[0]
        for lesson_data in series_data["lessons"]:
            lesson_title = f"üéß –£—Ä–æ–∫ {lesson_data['lesson_number']}" if lesson_data['lesson_number'] else "üéß –ë–µ–∑ –Ω–æ–º–µ—Ä–∞"
            if not lesson_data['is_active']:
                lesson_title += " ‚ùå"

            builder.add(InlineKeyboardButton(
                text=lesson_title,
                callback_data=f"edit_lesson_{lesson_data['id']}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìö <b>{theme_name or '–¢–µ–º–∞'}</b>\n"
            f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏\n"
            f"üìÅ –°–µ—Ä–∏—è: {series_data['year']} - {series_data['name']}\n\n"
            f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(series_data['lessons'])}",
            reply_markup=builder.as_markup()
        )
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
        for series_key in sorted(series_map.keys(), key=lambda x: (-series_map[x]["year"], series_map[x]["name"])):
            series_data = series_map[series_key]
            builder.add(InlineKeyboardButton(
                text=f"üìö {series_data['year']} - {series_data['name']} ({len(series_data['lessons'])} —É—Ä–æ–∫.)",
                callback_data=f"lessons_theme_no_book_series_{teacher_id}_{theme_id}_{series_data['year']}_{series_data['name']}"
            ))

        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}"))
        builder.adjust(1)

        await callback.message.edit_text(
            f"üìö <b>{theme_name or '–¢–µ–º–∞'}</b>\n"
            f"üìï –ë–µ–∑ –∫–Ω–∏–≥–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )

    await callback.answer()


@router.callback_query(F.data.regexp(r"^lessons_book_\d+_\d+_\d+$"))
@admin_required
async def show_book_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    theme_id = int(parts[3])
    book_id = int(parts[4])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson).where(
                and_(
                    Lesson.teacher_id == teacher_id,
                    Lesson.book_id == book_id
                )
            ).options(selectinload(Lesson.book), selectinload(Lesson.series))
        )
        book_lessons = result.scalars().unique().all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ —Å–µ—Ä–∏—è–º
        series_map = {}
        book_name = None

        for lesson in book_lessons:
            if book_name is None and lesson.book:
                book_name = lesson.book.name

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º series_id –∫–∞–∫ –∫–ª—é—á
            if lesson.series_id:
                series_key = f"series_{lesson.series_id}"
                if series_key not in series_map:
                    series_map[series_key] = {
                        "series_id": lesson.series_id,
                        "year": lesson.series.year if lesson.series else 0,
                        "name": lesson.series.name if lesson.series else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        "count": 0
                    }
                series_map[series_key]["count"] += 1

    if not series_map:
        await callback.message.edit_text(
            "‚ùå –ü–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –ø–æ –≥–æ–¥—É (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏) –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    for series_key in sorted(series_map.keys(), key=lambda x: (-series_map[x]["year"], series_map[x]["name"])):
        series_data = series_map[series_key]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º series_id –≤ callback_data + –∏—Å—Ç–æ—á–Ω–∏–∫ "themes"
        callback_data = f"lessons_series_id_{series_data['series_id']}_from_themes"

        builder.add(InlineKeyboardButton(
            text=f"üìö {series_data['year']} - {series_data['name']} ({series_data['count']} —É—Ä–æ–∫.)",
            callback_data=callback_data
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    if book_name is None:
        books = await get_all_books()
        book = next((b for b in books if b.id == book_id), None)
        book_name = book.name if book else "–ö–Ω–∏–≥–∞"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
        f"üìñ –ö–Ω–∏–≥–∞: {book_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lessons_series_id_"))
@admin_required
async def show_series_lessons_by_id(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –ø–æ series_id"""
    series_id = int(callback.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏
    series = await get_series_by_id(series_id)
    if not series:
        await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏ –ø–æ series_id
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson).where(
                Lesson.series_id == series_id
            ).order_by(Lesson.lesson_number)
            .options(selectinload(Lesson.book))
        )
        series_lessons = result.scalars().all()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
        lessons_data = []
        book_name = None
        teacher_id = None
        theme_id = None
        book_id = None

        for lesson in series_lessons:
            if book_name is None and lesson.book:
                book_name = lesson.book.name
            if teacher_id is None:
                teacher_id = lesson.teacher_id
            if theme_id is None:
                theme_id = lesson.theme_id
            if book_id is None:
                book_id = lesson.book_id

            lessons_data.append({
                "id": lesson.id,
                "title": lesson.title,
                "lesson_number": lesson.lesson_number,
                "is_active": lesson.is_active
            })

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏
    if book_name is None and book_id:
        books = await get_all_books()
        book = next((b for b in books if b.id == book_id), None)
        book_name = book.name if book else "–ö–Ω–∏–≥–∞"

    builder = InlineKeyboardBuilder()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if lessons_data:
        for lesson_data in lessons_data:
            lesson_title = f"üéß –£—Ä–æ–∫ {lesson_data['lesson_number']}" if lesson_data['lesson_number'] else "üéß –ë–µ–∑ –Ω–æ–º–µ—Ä–∞"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if not lesson_data['is_active']:
                lesson_title += " ‚ùå"

            builder.add(InlineKeyboardButton(
                text=lesson_title,
                callback_data=f"edit_lesson_{lesson_data['id']}"
            ))

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data=f"add_lesson_series_{series_id}"))

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤—Å–µ–≥–¥–∞ –≤–µ–¥—ë—Ç –∫ —Å–µ—Ä–∏—è–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}"))

    builder.adjust(1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if lessons_data:
        text = (
            f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
            f"üìñ –ö–Ω–∏–≥–∞: {book_name or '–ë–µ–∑ –∫–Ω–∏–≥–∏'}\n"
            f"üìÅ –°–µ—Ä–∏—è: {series.year} - {series.name}\n\n"
            f"–£—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–∏–∏: {len(lessons_data)}"
        )
    else:
        text = (
            f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
            f"üìñ –ö–Ω–∏–≥–∞: {book_name or '–ë–µ–∑ –∫–Ω–∏–≥–∏'}\n"
            f"üìÅ –°–µ—Ä–∏—è: {series.year} - {series.name}\n\n"
            f"–í —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤."
        )

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()




@router.callback_query(F.data.startswith("add_lesson_series_"))
@admin_required
async def add_lesson_with_series(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏"""
    series_id = int(callback.data.split("_")[3])

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–∏—é –∏–∑ –ë–î
    series = await get_series_by_id(series_id)

    if not series:
        await callback.answer("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Ä–∏–∏ –≤ state + –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è Single-Window
    await state.update_data(
        series_id=series_id,
        teacher_id=series.teacher_id,
        book_id=series.book_id if series.book_id else None,
        theme_id=series.theme_id if series.theme_id else None,
        create_message_id=callback.message.message_id,
        create_chat_id=callback.message.chat.id
    )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        f"–°–µ—Ä–∏—è: {series.year} - {series.name}\n\n"
        "–®–∞–≥ 1/3: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –≤ —Å–µ—Ä–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]])
    )
    await state.set_state(LessonStates.lesson_number)
    await callback.answer()


@router.callback_query(F.data == "skip_lesson_description")
@admin_required
async def add_lesson_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await state.update_data(description=None)

    data = await state.get_data()
    series_id = data.get("series_id")

    # –°–µ—Ä–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–≥–∞–º
    await callback.message.edit_text(
        "–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_lesson_tags")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]
        ])
    )
    await state.set_state(LessonStates.tags)
    await callback.answer()


@router.message(LessonStates.description)
@admin_required
async def add_lesson_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    description = message.text.strip()
    await state.update_data(description=description)

    # –°–µ—Ä–∏—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–≥–∞–º
    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text="‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
             "–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_lesson_tags")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]
        ])
    )
    await state.set_state(LessonStates.tags)


@router.message(LessonStates.lesson_number)
@admin_required
async def add_lesson_number(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ—Ä–∏–∏"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    if not series_id:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå –û—à–∏–±–∫–∞: —Å–µ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")]])
        )
        await state.clear()
        return

    try:
        lesson_number = int(message.text.strip())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞ –≤ —Å–µ—Ä–∏–∏
        is_duplicate = await check_lesson_number_exists(series_id, lesson_number)

        if is_duplicate:
            await message.bot.edit_message_text(
                chat_id=data['create_chat_id'],
                message_id=data['create_message_id'],
                text=f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–£—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º {lesson_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏.\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]])
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
        await state.update_data(lesson_number=lesson_number)

        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚úÖ –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n\n"
                 "–®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_lesson_description")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]
            ])
        )
        await state.set_state(LessonStates.description)
    except ValueError:
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text="‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]])
        )


@router.callback_query(F.data == "skip_lesson_tags")
@admin_required
async def add_lesson_skip_tags(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    await state.update_data(tags=None)

    data = await state.get_data()
    series_id = data.get("series_id")

    await callback.message.edit_text(
        "‚úÖ –¢–µ–≥–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã\n\n"
        "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞\n\n"
        "üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> MP3, WAV, FLAC, M4A, OGG, AAC, WMA\n\n"
        "‚ÑπÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</b>\n"
        "‚úì –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3\n"
        "‚úì –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏\n"
        "‚úì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏—Ç—Ä–µ–π—Ç–∞ (16-64 kbps)\n\n"
        "üìè <b>–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 20 –ú–ë</b>\n"
        "üí° –î–æ 40 –º–∏–Ω—É—Ç –≤ MP3 64kbps\n\n"
        f"üåê <b>–î–ª—è —Ñ–∞–π–ª–æ–≤ –¥–æ 2 –ì–ë:</b> {config.web_converter_url}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]])
    )
    await state.set_state(LessonStates.audio_file)
    await callback.answer()


@router.message(LessonStates.tags)
@admin_required
async def add_lesson_tags(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    series_id = data.get("series_id")

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await message.delete()
    except:
        pass

    tags = message.text.strip()
    await state.update_data(tags=tags)

    await message.bot.edit_message_text(
        chat_id=data['create_chat_id'],
        message_id=data['create_message_id'],
        text="‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
             "üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞\n\n"
             "üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> MP3, WAV, FLAC, M4A, OGG, AAC, WMA\n\n"
             "‚ÑπÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</b>\n"
             "‚úì –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3\n"
             "‚úì –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏\n"
             "‚úì –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏—Ç—Ä–µ–π—Ç–∞ (16-64 kbps)\n\n"
             "üìè <b>–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä: 20 –ú–ë</b>\n"
             "üí° –î–æ 40 –º–∏–Ω—É—Ç –≤ MP3 64kbps\n\n"
             f"üåê <b>–î–ª—è —Ñ–∞–π–ª–æ–≤ –¥–æ 2 –ì–ë:</b> {config.web_converter_url}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"lessons_series_id_{series_id}")]])
    )
    await state.set_state(LessonStates.audio_file)


@router.message(LessonStates.audio_file)
@admin_required
async def add_lesson_audio(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ FFmpeg"""
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    audio_file = None
    file_ext = None

    if message.audio:
        audio_file = message.audio
        file_ext = "mp3"
    elif message.voice:
        audio_file = message.voice
        file_ext = "ogg"
    elif message.document:
        audio_file = message.document

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if audio_file.file_name:
            file_ext = audio_file.file_name.split('.')[-1].lower() if '.' in audio_file.file_name else "unknown"
        else:
            file_ext = "unknown"
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, FLAC, M4A, OGG, AAC –∏ –¥—Ä—É–≥–∏–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = audio_file.file_size / (1024 * 1024) if audio_file.file_size else 0
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: —Ä–∞–∑–º–µ—Ä={file_size_mb:.2f} –ú–ë, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ={file_ext}")

    if file_size_mb > config.max_audio_size_mb:
        logger.warning(f"–§–∞–π–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω: {file_size_mb:.2f} –ú–ë > {config.max_audio_size_mb} –ú–ë")
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë)\n\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.max_audio_size_mb} –ú–ë (–ª–∏–º–∏—Ç Telegram Bot API)\n\n"
            f"üåê –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            f"{config.web_converter_url}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    try:
        file_info = await message.bot.get_file(audio_file.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)
    except Exception as e:
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—É–¥–∏–æ
    original_dir = "bot/audio_files/original"
    converted_dir = "bot/audio_files/converted"
    os.makedirs(original_dir, exist_ok=True)
    os.makedirs(converted_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_path = os.path.join(original_dir, f"{audio_file.file_unique_id}.{file_ext}")
    with open(original_path, "wb") as f:
        f.write(downloaded_file.getvalue())

    logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {original_path}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if file_size_mb > 100:
        time_estimate = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
    elif file_size_mb > 500:
        time_estimate = "5-10 –º–∏–Ω—É—Ç"
    else:
        time_estimate = "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

    await processing_msg.edit_text(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...\n\n"
        f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {format_file_size(audio_file.file_size)}\n"
        f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_estimate}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º –±–∏—Ç—Ä–µ–π—Ç–∞
    converted_path = os.path.join(converted_dir, f"{audio_file.file_unique_id}.mp3")
    success, error, used_bitrate = await convert_to_mp3_auto(
        original_path,
        converted_path,
        preferred_bitrate=64  # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    )

    if not success:
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:\n\n{error}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (MP3, WAV, FLAC) "
            "–∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —É—Ä–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 1-2 —á–∞—Å–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(original_path):
            os.remove(original_path)
        if os.path.exists(converted_path):
            os.remove(converted_path)
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    duration_seconds = await get_audio_duration(converted_path)

    if not duration_seconds:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {converted_path}")
        duration_seconds = 0

    # –°–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–∞
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
    teacher = await get_lesson_teacher_by_id(data["teacher_id"]) if data.get("teacher_id") else None
    book = await get_book_by_id(data["book_id"]) if data.get("book_id") else None
    series = await get_series_by_id(data["series_id"]) if data.get("series_id") else None

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    auto_generated_title = generate_lesson_title(
        teacher_name=teacher.name if teacher else "",
        book_name=book.name if book else "",
        series_year=series.year if series else 0,
        series_name=series.name if series else "",
        lesson_number=data.get("lesson_number", 0)
    )

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    def sanitize_filename(name):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        if not name:
            return "unnamed"
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
        name = re.sub(r'[<>:"/\\|?*]', '_', name)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        name = re.sub(r'[\s_]+', '_', name)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return name[:50]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    parts = []
    if teacher:
        parts.append(sanitize_filename(teacher.name))
    if book:
        parts.append(sanitize_filename(book.name))
    if series:
        parts.append(f"{series.year}")
        parts.append(sanitize_filename(series.name))
    if data.get('lesson_number'):
        parts.append(f"—É—Ä–æ–∫_{data['lesson_number']}")

    new_filename = "_".join(parts) + ".mp3"
    new_converted_path = os.path.join(converted_dir, new_filename)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
    if os.path.exists(converted_path):
        os.rename(converted_path, new_converted_path)
        logger.info(f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {converted_path} -> {new_converted_path}")
        converted_path = new_converted_path

    # –°–æ–∑–¥–∞—ë–º —É—Ä–æ–∫ –≤ –±–∞–∑–µ
    try:
        lesson = await create_lesson(
            title=auto_generated_title,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            description=data.get("description", ""),
            audio_file_path=converted_path,  # –ü—É—Ç—å –∫ MP3 —Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            duration_seconds=duration_seconds,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            lesson_number=data["lesson_number"],
            book_id=data.get("book_id"),
            theme_id=data.get("theme_id"),
            teacher_id=data["teacher_id"],
            tags=data.get("tags", ""),
            is_active=True,
            series_id=data.get("series_id")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ series_id
        )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        try:
            await processing_msg.delete()
        except:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∞—É–¥–∏–æ
        try:
            await message.delete()
        except:
            pass

        logger.info(f"–£—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: {lesson.id} - {lesson.title}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds}—Å")

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ file_id: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∞–¥–º–∏–Ω—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
        try:
            from aiogram.types import FSInputFile
            audio_for_cache = FSInputFile(converted_path)
            cache_msg = await message.bot.send_audio(
                chat_id=message.chat.id,
                audio=audio_for_cache,
                title=auto_generated_title
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            if cache_msg.audio:
                lesson.telegram_file_id = cache_msg.audio.file_id
                await update_lesson(lesson)
                logger.info(f"File_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —É—Ä–æ–∫–∞ {lesson.id}")

            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await cache_msg.delete()
            except:
                pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å file_id: {e}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —É—Å–ø–µ—Ö–∞ —Å –∫–Ω–æ–ø–∫–æ–π OK (Single-Window Pattern)
        series_id = data.get("series_id")
        mp3_size = os.path.getsize(converted_path)

        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text=f"‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                 f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {lesson.title}\n"
                 f"üî¢ –ù–æ–º–µ—Ä: {lesson.lesson_number}\n"
                 f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration_seconds)}\n"
                 f"üéµ –ë–∏—Ç—Ä–µ–π—Ç: {used_bitrate} kbps\n"
                 f"üíæ –†–∞–∑–º–µ—Ä: {format_file_size(mp3_size)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚úÖ OK", callback_data=f"admin_lesson_created_ok_{series_id}")
            ]])
        )

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞: {str(e)}")

        # –£–¥–∞–ª—è–µ–º processing_msg
        try:
            await processing_msg.delete()
        except:
            pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        series_id = data.get("series_id")
        await message.bot.edit_message_text(
            chat_id=data['create_chat_id'],
            message_id=data['create_message_id'],
            text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Ä–æ–∫–∞!</b>\n\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_series_id_{series_id}" if series_id else "admin_lessons")
            ]])
        )
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(original_path):
            os.remove(original_path)
        if os.path.exists(converted_path):
            os.remove(converted_path)
        await state.clear()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ OK –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞
@router.callback_query(F.data.startswith("admin_lesson_created_ok_"))
@admin_required
async def lesson_created_ok_handler(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
    series_id = int(callback.data.split("_")[4])

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–∫–∞–∑ —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º data
    class FakeCallback:
        def __init__(self, original_callback, new_data):
            self.message = original_callback.message
            self.data = new_data
            self.from_user = original_callback.from_user

        async def answer(self, *args, **kwargs):
            pass

    fake_callback = FakeCallback(callback, f"lessons_series_id_{series_id}")
    await show_series_lessons_by_id(fake_callback)
    await callback.answer()


# === Helper —Ñ—É–Ω–∫—Ü–∏–∏ ===

def generate_lesson_title(teacher_name: str, book_name: str, series_year: int, series_name: str, lesson_number: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    parts = []
    if teacher_name:
        parts.append(teacher_name.replace(" ", "_"))
    if book_name:
        parts.append(book_name.replace(" ", "_"))
    parts.append(str(series_year))
    parts.append(series_name.replace(" ", "_"))
    parts.append(f"—É—Ä–æ–∫_{lesson_number}")
    return "_".join(parts)


def build_lesson_info_and_menu(lesson) -> tuple[str, InlineKeyboardMarkup]:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
    info = f"üéß <b>–£—Ä–æ–∫ {lesson.lesson_number}</b>\n\n"
    info += f"üìÅ –°–µ—Ä–∏—è: {lesson.series_display}\n"
    info += f"üìö –¢–µ–º–∞: {lesson.theme_name}\n"
    info += f"üìñ –ö–Ω–∏–≥–∞: {lesson.book_title}\n"
    info += f"üë§ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"

    if lesson.description:
        info += f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}\n"

    if lesson.duration_seconds:
        info += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"

    if lesson.tags:
        info += f"üè∑ –¢–µ–≥–∏: {lesson.tags}\n"

    info += f"\nüìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª: {'‚úÖ –ï—Å—Ç—å' if lesson.has_audio() else '‚ùå –ù–µ—Ç'}\n"
    info += f"{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if lesson.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"

    # –°—Ç—Ä–æ–∏–º –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞", callback_data=f"edit_lesson_number_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_lesson_description_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data=f"edit_lesson_tags_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="üéµ –ó–∞–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª", callback_data=f"replace_lesson_audio_{lesson.id}"))

    if lesson.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_lesson_active_{lesson.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_lesson_active_{lesson.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{lesson.id}"))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ - –∫ —É—Ä–æ–∫–∞–º —Å–µ—Ä–∏–∏
    if lesson.series_id:
        builder.add(InlineKeyboardButton(text="üîô –ö —É—Ä–æ–∫–∞–º —Å–µ—Ä–∏–∏", callback_data=f"lessons_series_id_{lesson.series_id}"))
    else:
        builder.add(InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Ä–æ–∫–∞–º–∏", callback_data="admin_lessons"))
    builder.adjust(1)

    return info, builder.as_markup()


@router.callback_query(F.data.regexp(r"^edit_lesson_\d+$"))
@admin_required
async def edit_lesson_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[2])

    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.message.edit_text(
            "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")
            ]])
        )
        await callback.answer()
        return

    info, markup = build_lesson_info_and_menu(lesson)
    await callback.message.edit_text(info, reply_markup=markup)
    await callback.answer()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —É—Ä–æ–∫–∞ ===

@router.callback_query(F.data.regexp(r"^edit_lesson_number_\d+$"))
@admin_required
async def edit_lesson_number_handler(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_id –∏ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        editing_lesson_id=lesson_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: {lesson.lesson_number}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")
        ]])
    )
    await state.set_state(LessonStates.edit_number)
    await callback.answer()


@router.message(LessonStates.edit_number)
@admin_required
async def save_edited_lesson_number(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    lesson_id = data.get("editing_lesson_id")

    try:
        new_number = int(message.text)

        lesson = await get_lesson_by_id(lesson_id)
        if not lesson:
            await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ –≤ —Å–µ—Ä–∏–∏
        if lesson.series_id:
            is_duplicate = await check_lesson_number_exists(lesson.series_id, new_number, exclude_lesson_id=lesson_id)
            if is_duplicate:
                await message.answer(
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£—Ä–æ–∫ —Å –Ω–æ–º–µ—Ä–æ–º {new_number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏.\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")
                    ]])
                )
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
        old_number = lesson.lesson_number
        lesson.lesson_number = new_number
        await update_lesson(lesson)

        # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–π—Ç–ª —É—Ä–æ–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞
        if old_number != new_number:
            success = await regenerate_lesson_title(lesson_id)
            if success:
                logger.info(f"–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–∞–π—Ç–ª —É—Ä–æ–∫–∞ {lesson_id}: –Ω–æ–º–µ—Ä –∏–∑–º–µ–Ω—ë–Ω —Å {old_number} –Ω–∞ {new_number}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
        data = await state.get_data()
        edit_message_id = data.get("edit_message_id")
        edit_chat_id = data.get("edit_chat_id")

        # –û—á–∏—â–∞–µ–º state
        await state.clear()

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        lesson = await get_lesson_by_id(lesson_id)
        info, markup = build_lesson_info_and_menu(lesson)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message_id and edit_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=edit_chat_id,
                    message_id=edit_message_id,
                    text=info,
                    reply_markup=markup
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(info, reply_markup=markup)

    except ValueError:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")
            ]])
        )


@router.callback_query(F.data.regexp(r"^edit_lesson_description_\d+$"))
@admin_required
async def edit_lesson_description_handler(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_id –∏ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        editing_lesson_id=lesson_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    current_desc = lesson.description if lesson.description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

    await callback.message.edit_text(
        f"üìÑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {current_desc}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"clear_lesson_description_{lesson_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
    )
    await state.set_state(LessonStates.edit_description)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^clear_lesson_description_\d+$"))
@admin_required
async def clear_lesson_description_handler(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])

    lesson = await get_lesson_by_id(lesson_id)
    if lesson:
        lesson.description = None
        await update_lesson(lesson)

    await state.clear()

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    class FakeCallback:
        def __init__(self, message, lesson_id):
            self.message = message
            self.data = f"edit_lesson_{lesson_id}"
        async def answer(self, text=None, show_alert=False):
            pass

    fake_callback = FakeCallback(callback.message, lesson_id)
    await edit_lesson_menu(fake_callback)


@router.message(LessonStates.edit_description)
@admin_required
async def save_edited_lesson_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    lesson_id = data.get("editing_lesson_id")

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    new_description = message.text.strip()
    lesson.description = new_description
    await update_lesson(lesson)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    edit_message_id = data.get("edit_message_id")
    edit_chat_id = data.get("edit_chat_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    lesson = await get_lesson_by_id(lesson_id)
    info, markup = build_lesson_info_and_menu(lesson)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if edit_message_id and edit_chat_id:
        try:
            await message.bot.edit_message_text(
                chat_id=edit_chat_id,
                message_id=edit_message_id,
                text=info,
                reply_markup=markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(info, reply_markup=markup)


@router.callback_query(F.data.regexp(r"^edit_lesson_tags_\d+$"))
@admin_required
async def edit_lesson_tags_handler(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_id –∏ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        editing_lesson_id=lesson_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    current_tags = lesson.tags if lesson.tags else "–ù–µ—Ç —Ç–µ–≥–æ–≤"

    await callback.message.edit_text(
        f"üè∑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ç–µ–≥–∏: {current_tags}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏", callback_data=f"clear_lesson_tags_{lesson_id}")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}")]
        ])
    )
    await state.set_state(LessonStates.edit_tags)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^clear_lesson_tags_\d+$"))
@admin_required
async def clear_lesson_tags_handler(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])

    lesson = await get_lesson_by_id(lesson_id)
    if lesson:
        lesson.tags = None
        await update_lesson(lesson)

    await state.clear()

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    class FakeCallback:
        def __init__(self, message, lesson_id):
            self.message = message
            self.data = f"edit_lesson_{lesson_id}"
        async def answer(self, text=None, show_alert=False):
            pass

    fake_callback = FakeCallback(callback.message, lesson_id)
    await edit_lesson_menu(fake_callback)


@router.message(LessonStates.edit_tags)
@admin_required
async def save_edited_lesson_tags(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    lesson_id = data.get("editing_lesson_id")

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    new_tags = message.text.strip()
    lesson.tags = new_tags
    await update_lesson(lesson)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    edit_message_id = data.get("edit_message_id")
    edit_chat_id = data.get("edit_chat_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    lesson = await get_lesson_by_id(lesson_id)
    info, markup = build_lesson_info_and_menu(lesson)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if edit_message_id and edit_chat_id:
        try:
            await message.bot.edit_message_text(
                chat_id=edit_chat_id,
                message_id=edit_message_id,
                text=info,
                reply_markup=markup
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await message.answer(info, reply_markup=markup)


@router.callback_query(F.data.regexp(r"^toggle_lesson_active_\d+$"))
@admin_required
async def toggle_lesson_active_handler(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    lesson.is_active = not lesson.is_active
    await update_lesson(lesson)

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º data –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    class FakeCallback:
        def __init__(self, message, lesson_id):
            self.message = message
            self.data = f"edit_lesson_{lesson_id}"
        async def answer(self, text=None, show_alert=False):
            pass

    fake_callback = FakeCallback(callback.message, lesson_id)
    await edit_lesson_menu(fake_callback)


@router.callback_query(F.data.regexp(r"^edit_lesson_book_\d+$"))
@admin_required
async def edit_lesson_book_handler(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
    books = await get_all_books()

    builder = InlineKeyboardBuilder()
    for book in books:
        builder.add(InlineKeyboardButton(
            text=book.name,
            callback_data=f"update_lesson_book_{lesson_id}_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="üìï –ë–µ–∑ –∫–Ω–∏–≥–∏", callback_data=f"update_lesson_book_{lesson_id}_none"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìñ <b>–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–∏–≥—É —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –∫–Ω–∏–≥–∞: {lesson.book_title}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("update_lesson_book_"))
@admin_required
async def update_lesson_book_handler(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–∏–≥—É —É—Ä–æ–∫–∞"""
    parts = callback.data.split("_")
    lesson_id = int(parts[3])
    book_id = None if parts[4] == "none" else int(parts[4])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    lesson.book_id = book_id
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É, —É–¥–∞–ª—è–µ–º theme_id (—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏–∑ –∫–Ω–∏–≥–∏)
    if book_id:
        lesson.theme_id = None

    await update_lesson(lesson)
    await callback.answer("‚úÖ –ö–Ω–∏–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_lesson_menu(callback)


@router.callback_query(F.data.regexp(r"^edit_lesson_theme_\d+$"))
@admin_required
async def edit_lesson_theme_handler(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —É—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—Ä–æ–∫–æ–≤ –±–µ–∑ –∫–Ω–∏–≥–∏)"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if lesson.book_id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É, —Ç–∞–∫ –∫–∞–∫ —É—Ä–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ. –°–Ω–∞—á–∞–ª–∞ —É–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
    themes = await get_all_themes()

    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(
            text=theme.name,
            callback_data=f"update_lesson_theme_{lesson_id}_{theme.id}"
        ))

    builder.add(InlineKeyboardButton(text="üìö –ë–µ–∑ —Ç–µ–º—ã", callback_data=f"update_lesson_theme_{lesson_id}_none"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìö <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {lesson.theme_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("update_lesson_theme_"))
@admin_required
async def update_lesson_theme_handler(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É —É—Ä–æ–∫–∞"""
    parts = callback.data.split("_")
    lesson_id = int(parts[3])
    theme_id = None if parts[4] == "none" else int(parts[4])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if lesson.book_id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É, —Ç–∞–∫ –∫–∞–∫ —É—Ä–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–Ω–∏–≥–µ", show_alert=True)
        return

    lesson.theme_id = theme_id
    await update_lesson(lesson)
    await callback.answer("‚úÖ –¢–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_lesson_menu(callback)


@router.callback_query(F.data.regexp(r"^edit_lesson_teacher_\d+$"))
@admin_required
async def edit_lesson_teacher_handler(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[3])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = await get_all_lesson_teachers()

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        builder.add(InlineKeyboardButton(
            text=teacher.name,
            callback_data=f"update_lesson_teacher_{lesson_id}_{teacher.id}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üë§ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Ä–æ–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("update_lesson_teacher_"))
@admin_required
async def update_lesson_teacher_handler(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Ä–æ–∫–∞"""
    parts = callback.data.split("_")
    lesson_id = int(parts[3])
    teacher_id = int(parts[4])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    lesson.teacher_id = teacher_id
    await update_lesson(lesson)
    await callback.answer("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_lesson_menu(callback)


@router.callback_query(F.data.startswith("delete_lesson_"))
@admin_required
async def delete_lesson_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[-1])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞",
        callback_data=f"confirm_delete_lesson_{lesson_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data=f"edit_lesson_{lesson_id}"
    ))
    builder.adjust(1)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    duration_text = lesson.formatted_duration if lesson.duration_seconds else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫?\n\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {lesson.title}\n"
        f"<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration_text}\n\n"
        f"‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_lesson_"))
@admin_required
async def confirm_delete_lesson_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[-1])

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    series_id = lesson.series_id
    series = await get_series_by_id(series_id) if series_id else None

    # –£–¥–∞–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
    if lesson.audio_path:
        import os
        audio_path = os.path.join(config.audio_files_path, lesson.audio_path)
        if os.path.exists(audio_path):
            try:
                os.remove(audio_path)
                logger.info(f"–£–¥–∞–ª—ë–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {audio_path}: {e}")

    # –£–¥–∞–ª—è–µ–º —É—Ä–æ–∫ –∏–∑ –ë–î
    await delete_lesson(lesson_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    remaining_count = 0
    if series_id:
        async with async_session_maker() as session:
            remaining_lessons = await session.execute(
                select(Lesson).where(Lesson.series_id == series_id)
            )
            remaining_count = len(remaining_lessons.scalars().all())

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    series_info = f"{series.year} - {series.name}" if series else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ä–∏—è"
    message = f"‚úÖ <b>–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω</b>\n\n" \
              f"–£–¥–∞–ª—ë–Ω —É—Ä–æ–∫: {lesson.title}\n" \
              f"–°–µ—Ä–∏—è: {series_info}"

    if series_id and remaining_count == 0:
        message += f"\n\n‚ö†Ô∏è <b>–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –≤ —Å–µ—Ä–∏–∏!</b>\n" \
                   f"–°–µ—Ä–∏—è '{series_info}' –±–æ–ª—å—à–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ä–æ–∫–æ–≤."

    await callback.message.edit_text(
        message,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —É—Ä–æ–∫–∞–º–∏", callback_data="admin_lessons")
        ]])
    )
    await callback.answer("‚úÖ –£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω")


@router.callback_query(F.data.startswith("replace_lesson_audio_"))
@admin_required
async def replace_lesson_audio_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–º–µ–Ω—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[-1])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —É—Ä–æ–∫–∞, message_id –∏ chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        lesson_id=lesson_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )
    await state.set_state(LessonStates.replace_audio)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–µ
    info = f"üéµ <b>–ó–∞–º–µ–Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞</b>\n\n"
    info += f"<b>–£—Ä–æ–∫:</b> {lesson.display_title}\n"
    info += f"<b>–°–µ—Ä–∏—è:</b> {lesson.series_display}\n\n"

    if lesson.audio_path:
        if lesson.duration_seconds:
            info += f"<b>–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª:</b>\n"
            info += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"
            info += f"üìÅ –§–∞–π–ª: {os.path.basename(lesson.audio_path)}\n\n"
        else:
            info += f"<b>–¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª:</b> {os.path.basename(lesson.audio_path)}\n\n"
    else:
        info += "‚ö†Ô∏è –£ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞\n\n"

    info += "üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª</b>\n\n"
    info += "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, FLAC, M4A, OGG, AAC –∏ –¥—Ä—É–≥–∏–µ\n"
    info += f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.max_audio_size_mb} –ú–ë\n\n"
    info += f"üåê –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ {config.max_audio_size_mb} –ú–ë –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n{config.web_converter_url}"

    await callback.message.edit_text(
        info,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson.id}")
        ]])
    )
    await callback.answer()


@router.message(LessonStates.replace_audio)
@admin_required
async def replace_lesson_audio_file(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã"""
    data = await state.get_data()
    lesson_id = data.get("lesson_id")

    if not lesson_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: ID —É—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    lesson = await get_lesson_by_id(lesson_id)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    audio_file = None
    file_ext = None

    if message.audio:
        audio_file = message.audio
        file_ext = "mp3"
    elif message.voice:
        audio_file = message.voice
        file_ext = "ogg"
    elif message.document:
        audio_file = message.document

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if audio_file.file_name:
            file_ext = audio_file.file_name.split('.')[-1].lower() if '.' in audio_file.file_name else "unknown"
        else:
            file_ext = "unknown"
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, FLAC, M4A, OGG, AAC –∏ –¥—Ä—É–≥–∏–µ",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson.id}")
            ]])
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size_mb = audio_file.file_size / (1024 * 1024) if audio_file.file_size else 0
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∑–∞–º–µ–Ω—ã: —É—Ä–æ–∫_id={lesson_id}, —Ä–∞–∑–º–µ—Ä={file_size_mb:.2f} –ú–ë, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ={file_ext}")

    if file_size_mb > config.max_audio_size_mb:
        logger.warning(f"–§–∞–π–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω: {file_size_mb:.2f} –ú–ë > {config.max_audio_size_mb} –ú–ë")
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë)\n\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {config.max_audio_size_mb} –ú–ë (–ª–∏–º–∏—Ç Telegram Bot API)\n\n"
            f"üåê –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
            f"{config.web_converter_url}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson.id}")
            ]])
        )
        await state.clear()
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("‚è≥ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...")

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    try:
        file_info = await message.bot.get_file(audio_file.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)
    except Exception as e:
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_lesson_{lesson.id}")
            ]])
        )
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—É–¥–∏–æ
    original_dir = "bot/audio_files/original"
    converted_dir = "bot/audio_files/converted"
    os.makedirs(original_dir, exist_ok=True)
    os.makedirs(converted_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    original_path = os.path.join(original_dir, f"{audio_file.file_unique_id}.{file_ext}")
    with open(original_path, "wb") as f:
        f.write(downloaded_file.getvalue())

    logger.info(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {original_path}")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if file_size_mb > 100:
        time_estimate = "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
    elif file_size_mb > 500:
        time_estimate = "5-10 –º–∏–Ω—É—Ç"
    else:
        time_estimate = "–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥"

    await processing_msg.edit_text(
        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞...\n\n"
        f"üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {format_file_size(audio_file.file_size)}\n"
        f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {time_estimate}\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    teacher = await get_lesson_teacher_by_id(lesson.teacher_id) if lesson.teacher_id else None
    book = await get_book_by_id(lesson.book_id) if lesson.book_id else None
    series = await get_series_by_id(lesson.series_id) if lesson.series_id else None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    def sanitize_filename(name):
        """–£–¥–∞–ª—è–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        if not name:
            return "unnamed"
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
        name = re.sub(r'[<>:"/\\|?*]', '_', name)
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
        name = re.sub(r'[\s_]+', '_', name)
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        return name[:50]

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    parts = []
    if teacher:
        parts.append(sanitize_filename(teacher.name))
    if book:
        parts.append(sanitize_filename(book.name))
    if series:
        parts.append(f"{series.year}")
        parts.append(sanitize_filename(series.name))
    if lesson.lesson_number:
        parts.append(f"—É—Ä–æ–∫_{lesson.lesson_number}")

    new_filename = "_".join(parts) + ".mp3"
    converted_path = os.path.join(converted_dir, new_filename)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º –±–∏—Ç—Ä–µ–π—Ç–∞
    success, error, used_bitrate = await convert_to_mp3_auto(
        original_path,
        converted_path,
        preferred_bitrate=64  # –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    )

    if not success:
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ:\n\n{error}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (MP3, WAV, FLAC) "
            "–∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ —É—Ä–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 1-2 —á–∞—Å–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞", callback_data=f"edit_lesson_{lesson.id}")
            ]])
        )
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(original_path):
            os.remove(original_path)
        if os.path.exists(converted_path):
            os.remove(converted_path)
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    duration_seconds = await get_audio_duration(converted_path)

    if not duration_seconds:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è {converted_path}")
        duration_seconds = 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–∞–π–ª—É (—É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î)
    old_audio_path = None
    if lesson.audio_path:
        old_audio_path = os.path.join(config.audio_files_path, lesson.audio_path)

    # –°–ù–ê–ß–ê–õ–ê –æ–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫ –≤ –±–∞–∑–µ
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —É—Ä–æ–∫–∞
        lesson.audio_path = converted_path
        lesson.duration_seconds = duration_seconds
        lesson.telegram_file_id = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫—ç—à

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
        await update_lesson(lesson)
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞: —É—Ä–æ–∫ {lesson.id}, –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {converted_path}")

        # –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        if old_audio_path and os.path.exists(old_audio_path):
            try:
                os.remove(old_audio_path)
                logger.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª: {old_audio_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ {old_audio_path}: {e}")
                # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –Ω–æ–≤—ã–π —Ñ–∞–π–ª —É–∂–µ –≤ –ë–î, –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—ã–π –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –¥–∏—Å–∫–µ

        # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ file_id: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∞—É–¥–∏–æ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
        try:
            from aiogram.types import FSInputFile
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            auto_generated_title = generate_lesson_title(
                teacher_name=teacher.name if teacher else "",
                book_name=book.name if book else "",
                series_year=series.year if series else 0,
                series_name=series.name if series else "",
                lesson_number=lesson.lesson_number if lesson.lesson_number else 0
            )

            audio_for_cache = FSInputFile(converted_path)
            cache_msg = await message.bot.send_audio(
                chat_id=message.chat.id,
                audio=audio_for_cache,
                title=auto_generated_title
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
            if cache_msg.audio:
                lesson.telegram_file_id = cache_msg.audio.file_id
                await update_lesson(lesson)
                logger.info(f"File_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —É—Ä–æ–∫–∞ {lesson.id}")

            # –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await cache_msg.delete()
            except:
                pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å file_id: {e}")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await processing_msg.delete()
        try:
            await message.delete()
        except:
            pass

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
        edit_message_id = data.get("edit_message_id")
        edit_chat_id = data.get("edit_chat_id")

        # –û—á–∏—â–∞–µ–º state
        await state.clear()

        # –ó–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–∫ –∏–∑ –ë–î —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lesson = await get_lesson_by_id(lesson_id)
        info, markup = build_lesson_info_and_menu(lesson)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if edit_message_id and edit_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=edit_chat_id,
                    message_id=edit_message_id,
                    text=info,
                    reply_markup=markup
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await message.answer(info, reply_markup=markup)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
        mp3_size = os.path.getsize(converted_path)
        success_notification = await message.answer(
            f"‚úÖ <b>–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω!</b>\n\n"
            f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(duration_seconds)}\n"
            f"üéµ –ë–∏—Ç—Ä–µ–π—Ç: {used_bitrate} kbps\n"
            f"üíæ –†–∞–∑–º–µ—Ä: {format_file_size(mp3_size)}"
        )

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(3)
        try:
            await success_notification.delete()
        except:
            pass

        logger.info(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞ {lesson.id} –∑–∞–º–µ–Ω—ë–Ω: {converted_path}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds}—Å")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞: {str(e)}")
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n{str(e)}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —É—Ä–æ–∫–∞", callback_data=f"edit_lesson_{lesson.id}")
            ]])
        )
        # –£–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if os.path.exists(original_path):
            os.remove(original_path)
        if os.path.exists(converted_path):
            os.remove(converted_path)
        await state.clear()
