"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_lessons,
    get_all_books,
    get_all_themes,
    get_all_lesson_teachers,
    get_lesson_by_id,
    create_lesson
)
from bot.models.lesson import Lesson
from bot.models.book import Book
from bot.models.database import async_session_maker
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload, joinedload

router = Router()


class LessonStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
    title = State()
    description = State()
    series_year = State()
    series_name = State()
    book_id = State()
    teacher_id = State()
    lesson_number = State()
    duration_minutes = State()
    tags = State()
    audio_file = State()


@router.callback_query(F.data == "admin_lessons")
@admin_required
async def admin_lessons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
    teachers = await get_all_lesson_teachers()

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        lessons = await get_all_lessons()
        teacher_lessons_count = len([l for l in lessons if l.teacher_id == teacher.id])

        builder.add(InlineKeyboardButton(
            text=f"üë®‚Äçüè´ {teacher.name} ({teacher_lessons_count} —É—Ä–æ–∫.)",
            callback_data=f"lessons_teacher_{teacher.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üéß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lessons_teacher_"))
@admin_required
async def show_teacher_themes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã —Å —É—Ä–æ–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    teacher_id = int(callback.data.split("_")[2])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–º—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–Ω–∏–≥–∏ —Å —É—Ä–æ–∫–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async with async_session_maker() as session:
        session.expire_on_commit = False
        result = await session.execute(
            select(Lesson)
            .where(Lesson.teacher_id == teacher_id)
            .options(joinedload(Lesson.book).joinedload(Book.theme))
        )
        teacher_lessons = result.scalars().unique().all()

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∫–Ω–∏–≥–∏ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    theme_data = {}
    for lesson in teacher_lessons:
        if lesson.book and lesson.book.theme:
            theme_id = lesson.book.theme.id
            if theme_id not in theme_data:
                theme_data[theme_id] = {
                    "id": theme_id,
                    "name": lesson.book.theme.name,
                    "count": 0
                }
            theme_data[theme_id]["count"] += 1

    if not theme_data:
        await callback.message.edit_text(
            "‚ùå –£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for theme in sorted(theme_data.values(), key=lambda x: x["name"]):
        builder.add(InlineKeyboardButton(
            text=f"üìö {theme['name']} ({theme['count']} —É—Ä–æ–∫.)",
            callback_data=f"lessons_theme_{teacher_id}_{theme['id']}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^lessons_theme_\d+_\d+$"))
@admin_required
async def show_theme_books(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    theme_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson)
            .where(Lesson.teacher_id == teacher_id)
            .options(selectinload(Lesson.book).selectinload(Book.theme))
        )
        teacher_lessons = result.scalars().all()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ–º–µ –∏ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
        book_data = {}
        theme_name = None
        for lesson in teacher_lessons:
            if lesson.book and lesson.book.theme_id == theme_id:
                if theme_name is None and lesson.book.theme:
                    theme_name = lesson.book.theme.name

                book_id = lesson.book.id
                if book_id not in book_data:
                    book_data[book_id] = {
                        "id": book_id,
                        "name": lesson.book.name,
                        "count": 0
                    }
                book_data[book_id]["count"] += 1

    if not book_data:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥ —Å —É—Ä–æ–∫–∞–º–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for book in sorted(book_data.values(), key=lambda x: x["name"]):
        builder.add(InlineKeyboardButton(
            text=f"üìñ {book['name']} ({book['count']} —É—Ä–æ–∫.)",
            callback_data=f"lessons_book_{teacher_id}_{theme_id}_{book['id']}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_teacher_{teacher_id}"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–∑ —Å–µ—Å—Å–∏–∏
    if theme_name is None:
        themes = await get_all_themes()
        theme = next((t for t in themes if t.id == theme_id), None)
        theme_name = theme.name if theme else "–¢–µ–º–∞"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
        f"üìö –¢–µ–º–∞: {theme_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^lessons_book_\d+_\d+_\d+$"))
@admin_required
async def show_book_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    theme_id = int(parts[3])
    book_id = int(parts[4])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –¥–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson).where(
                and_(
                    Lesson.teacher_id == teacher_id,
                    Lesson.book_id == book_id
                )
            ).options(selectinload(Lesson.book))
        )
        book_lessons = result.scalars().all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ —Å–µ—Ä–∏—è–º (–≥–æ–¥ + –Ω–∞–∑–≤–∞–Ω–∏–µ) –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
        series_map = {}
        book_name = None
        for lesson in book_lessons:
            if book_name is None and lesson.book:
                book_name = lesson.book.name

            series_key = f"{lesson.series_year}_{lesson.series_name}"
            if series_key not in series_map:
                series_map[series_key] = {
                    "year": lesson.series_year,
                    "name": lesson.series_name,
                    "count": 0
                }
            series_map[series_key]["count"] += 1

    if not series_map:
        await callback.message.edit_text(
            "‚ùå –ü–æ —ç—Ç–æ–π –∫–Ω–∏–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –ø–æ –≥–æ–¥—É (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏) –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
    for series_key in sorted(series_map.keys(), key=lambda x: (-series_map[x]["year"], series_map[x]["name"])):
        series_data = series_map[series_key]

        builder.add(InlineKeyboardButton(
            text=f"üìö {series_data['year']} - {series_data['name']} ({series_data['count']} —É—Ä–æ–∫.)",
            callback_data=f"lessons_series_{teacher_id}_{theme_id}_{book_id}_{series_data['year']}_{series_data['name']}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_theme_{teacher_id}_{theme_id}"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    if book_name is None:
        books = await get_all_books()
        book = next((b for b in books if b.id == book_id), None)
        book_name = book.name if book else "–ö–Ω–∏–≥–∞"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
        f"üìñ –ö–Ω–∏–≥–∞: {book_name}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("lessons_series_"))
@admin_required
async def show_series_lessons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_")
    teacher_id = int(parts[2])
    theme_id = int(parts[3])
    book_id = int(parts[4])
    series_year = int(parts[5])
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –±–µ—Ä–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
    series_name = "_".join(parts[6:])

    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –¥–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson).where(
                and_(
                    Lesson.teacher_id == teacher_id,
                    Lesson.book_id == book_id,
                    Lesson.series_year == series_year,
                    Lesson.series_name == series_name
                )
            ).order_by(Lesson.lesson_number)
            .options(selectinload(Lesson.book))
        )
        series_lessons = result.scalars().all()

        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
        lessons_data = []
        book_name = None
        for lesson in series_lessons:
            if book_name is None and lesson.book:
                book_name = lesson.book.name

            lessons_data.append({
                "id": lesson.id,
                "title": lesson.title,
                "lesson_number": lesson.lesson_number,
                "is_active": lesson.is_active
            })

    if not lessons_data:
        await callback.message.edit_text(
            "‚ùå –í —ç—Ç–æ–π —Å–µ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_book_{teacher_id}_{theme_id}_{book_id}")
            ]])
        )
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for lesson_data in lessons_data:
        lesson_title = f"üéß –£—Ä–æ–∫ {lesson_data['lesson_number']}: {lesson_data['title']}" if lesson_data['lesson_number'] else f"üéß {lesson_data['title']}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if not lesson_data['is_active']:
            lesson_title += " ‚ùå"

        builder.add(InlineKeyboardButton(
            text=lesson_title,
            callback_data=f"edit_lesson_{lesson_data['id']}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"lessons_book_{teacher_id}_{theme_id}_{book_id}"))
    builder.adjust(1)

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teachers = await get_all_lesson_teachers()
    teacher = next((t for t in teachers if t.id == teacher_id), None)
    teacher_name = teacher.name if teacher else "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
    if book_name is None:
        books = await get_all_books()
        book = next((b for b in books if b.id == book_id), None)
        book_name = book.name if book else "–ö–Ω–∏–≥–∞"

    await callback.message.edit_text(
        f"üéß <b>–£—Ä–æ–∫–∏: {teacher_name}</b>\n"
        f"üìñ –ö–Ω–∏–≥–∞: {book_name}\n"
        f"üìö –°–µ—Ä–∏—è: {series_year} - {series_name}\n\n"
        f"–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons_data)}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_lesson")
@admin_required
async def add_lesson_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    books = await get_all_books()
    teachers = await get_all_lesson_teachers()

    if not books or not teachers:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–Ω–∏–≥—É –∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")]])
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.title)
    await callback.answer()


@router.message(LessonStates.title)
@admin_required
async def add_lesson_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await state.update_data(title=message.text)

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_lesson_description")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]
        ])
    )
    await state.set_state(LessonStates.description)


@router.callback_query(F.data == "skip_lesson_description")
@admin_required
async def add_lesson_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.series_year)
    await callback.answer()


@router.message(LessonStates.description)
@admin_required
async def add_lesson_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await state.update_data(description=message.text)

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.series_year)


@router.message(LessonStates.series_year)
@admin_required
async def add_lesson_series_year(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–¥ —Å–µ—Ä–∏–∏"""
    try:
        year = int(message.text)
        if year < 2000 or year > 2050:
            await message.answer(
                "‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2050. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
            )
            return

        await state.update_data(series_year=year)

        await message.answer(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–µ—á–µ—Ç—å, —Ñ–∞–∏–¥–∞):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )
        await state.set_state(LessonStates.series_name)
    except ValueError:
        await message.answer(
            "‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )


@router.message(LessonStates.series_name)
@admin_required
async def add_lesson_series_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    await state.update_data(series_name=message.text)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books = await get_all_books()

    builder = InlineKeyboardBuilder()
    for book in books:
        builder.add(InlineKeyboardButton(text=book.name, callback_data=f"select_book_{book.id}"))
    builder.adjust(1)

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LessonStates.book_id)


@router.callback_query(F.data.startswith("select_book_"))
@admin_required
async def select_book_for_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –¥–ª—è —É—Ä–æ–∫–∞"""
    book_id = int(callback.data.split("_")[2])
    await state.update_data(book_id=book_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = await get_all_lesson_teachers()

    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        builder.add(InlineKeyboardButton(text=teacher.name, callback_data=f"select_teacher_{teacher.id}"))

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LessonStates.teacher_id)
    await callback.answer()


@router.callback_query(F.data.startswith("select_teacher_"))
@admin_required
async def select_teacher_for_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Ä–æ–∫–∞"""
    teacher_id = int(callback.data.split("_")[2])
    await state.update_data(teacher_id=teacher_id)

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.lesson_number)
    await callback.answer()


@router.message(LessonStates.lesson_number)
@admin_required
async def add_lesson_number(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"""
    try:
        lesson_number = int(message.text)
        await state.update_data(lesson_number=lesson_number)

        await message.answer(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )
        await state.set_state(LessonStates.duration_minutes)
    except ValueError:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )


@router.message(LessonStates.duration_minutes)
@admin_required
async def add_lesson_duration(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞"""
    try:
        duration_minutes = int(message.text)
        await state.update_data(duration_minutes=duration_minutes)

        await message.answer(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_lesson_tags")],
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]
            ])
        )
        await state.set_state(LessonStates.tags)
    except ValueError:
        await message.answer(
            "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )


@router.callback_query(F.data == "skip_lesson_tags")
@admin_required
async def add_lesson_skip_tags(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.audio_file)
    await callback.answer()


@router.message(LessonStates.tags)
@admin_required
async def add_lesson_tags(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    await state.update_data(tags=message.text)

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.audio_file)


@router.message(LessonStates.audio_file)
@admin_required
async def add_lesson_audio(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞"""
    data = await state.get_data()

    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    SUPPORTED_FORMATS = ['mp3', 'm4a', 'ogg', 'oga']
    SUPPORTED_MIME_TYPES = [
        'audio/mpeg', 'audio/mp3',           # MP3
        'audio/mp4', 'audio/x-m4a', 'audio/m4a',  # M4A
        'audio/ogg', 'audio/opus', 'audio/vorbis'  # OGG
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    if message.audio:
        audio_file = message.audio
        file_ext = "mp3"
    elif message.voice:
        audio_file = message.voice
        file_ext = "ogg"
    elif message.document:
        audio_file = message.document

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º MIME-—Ç–∏–ø
        if audio_file.mime_type and not audio_file.mime_type.startswith('audio/'):
            await message.answer(
                "‚ùå –≠—Ç–æ –Ω–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª!\n\n"
                "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ MP3 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ M4A\n"
                "‚Ä¢ OGG\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
                ]])
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ mime_type –∏–ª–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if audio_file.file_name:
            file_ext = audio_file.file_name.split('.')[-1].lower() if '.' in audio_file.file_name else "mp3"
        elif audio_file.mime_type:
            mime_to_ext = {
                "audio/mpeg": "mp3", "audio/mp3": "mp3",
                "audio/mp4": "m4a", "audio/x-m4a": "m4a", "audio/m4a": "m4a",
                "audio/ogg": "ogg", "audio/opus": "ogg", "audio/vorbis": "ogg"
            }
            file_ext = mime_to_ext.get(audio_file.mime_type, "mp3")
        else:
            file_ext = "mp3"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        if file_ext not in SUPPORTED_FORMATS:
            await message.answer(
                f"‚ùå –§–æ—Ä–º–∞—Ç .{file_ext.upper()} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è!\n\n"
                "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                "‚Ä¢ MP3 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) ‚úÖ\n"
                "‚Ä¢ M4A ‚úÖ\n"
                "‚Ä¢ OGG ‚úÖ\n\n"
                f"–í–∞—à —Ñ–∞–π–ª: .{file_ext.upper()}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –≤ MP3 –∏–ª–∏ M4A –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
                ]])
            )
            return
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª\n\n"
            "üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ MP3 (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ M4A\n"
            "‚Ä¢ OGG"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20 –ú–ë = 20 * 1024 * 1024 –±–∞–π—Ç)
    file_size_mb = audio_file.file_size / (1024 * 1024) if audio_file.file_size else 0
    if file_size_mb > 20:
        await message.answer(
            f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size_mb:.1f} –ú–ë)\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        await state.clear()
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    try:
        file_info = await message.bot.get_file(audio_file.file_id)
        downloaded_file = await message.bot.download_file(file_info.file_path)
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")
            ]])
        )
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    audio_dir = "bot/audio_files"
    os.makedirs(audio_dir, exist_ok=True)

    file_path = os.path.join(audio_dir, f"{audio_file.file_unique_id}.{file_ext}")
    with open(file_path, "wb") as f:
        f.write(downloaded_file.getvalue())

    lesson = await create_lesson(
        title=data["title"],
        series_year=data["series_year"],
        series_name=data["series_name"],
        description=data.get("description", ""),
        audio_file_path=file_path,
        duration_minutes=data["duration_minutes"],
        lesson_number=data["lesson_number"],
        book_id=data["book_id"],
        teacher_id=data["teacher_id"],
        tags=data.get("tags", ""),
        is_active=True
    )

    await message.answer(
        f"‚úÖ –£—Ä–æ–∫ ¬´{lesson.title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data="admin_lessons")]])
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_lesson_"))
@admin_required
async def edit_lesson_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞"""
    lesson_id = int(callback.data.split("_")[2])
    lesson = await get_lesson_by_id(lesson_id)

    if not lesson:
        await callback.message.edit_text(
            "‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")
            ]])
        )
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
    info = f"üéß <b>{lesson.display_title}</b>\n\n"
    info += f"üìö –°–µ—Ä–∏—è: {lesson.series_display}\n"
    info += f"üìñ –ö–Ω–∏–≥–∞: {lesson.book_title}\n"
    info += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson.teacher_name}\n"

    if lesson.description:
        info += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {lesson.description}\n"

    if lesson.duration_seconds:
        info += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.formatted_duration}\n"

    if lesson.tags:
        info += f"üè∑ –¢–µ–≥–∏: {lesson.tags}\n"

    info += f"\nüìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª: {'‚úÖ –ï—Å—Ç—å' if lesson.has_audio() else '‚ùå –ù–µ—Ç'}\n"
    info += f"{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if lesson.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_lesson_title_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_lesson_description_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–¥ —Å–µ—Ä–∏–∏", callback_data=f"edit_lesson_year_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏", callback_data=f"edit_lesson_series_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞", callback_data=f"edit_lesson_number_{lesson.id}"))
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data=f"edit_lesson_tags_{lesson.id}"))

    if lesson.is_active:
        builder.add(InlineKeyboardButton(text="‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_lesson_active_{lesson.id}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_lesson_active_{lesson.id}"))

    builder.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫", callback_data=f"delete_lesson_{lesson.id}"))

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏
    theme_id = lesson.theme_id if lesson.theme_id else 0
    back_callback = f"lessons_series_{lesson.teacher_id}_{theme_id}_{lesson.book_id}_{lesson.series_year}_{lesson.series_name}"
    builder.add(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data=back_callback))
    builder.adjust(1)

    await callback.message.edit_text(
        info,
        reply_markup=builder.as_markup()
    )
    await callback.answer()
