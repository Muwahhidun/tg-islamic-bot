"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
"""
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_books,
    get_book_by_id,
    create_book,
    update_book,
    delete_book,
    get_all_themes,
    get_all_book_authors,
    regenerate_book_lessons_titles,
)

logger = logging.getLogger(__name__)

router = Router()


class BookStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏"""
    name = State()
    description = State()
    theme_id = State()
    author_id = State()


@router.callback_query(F.data == "admin_books")
@admin_required
async def admin_books(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    books = await get_all_books()

    builder = InlineKeyboardBuilder()
    for book in books:
        status = "‚úÖ" if book.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {book.name}",
            callback_data=f"edit_book_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_book")
@admin_required
async def add_book_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏"""
    await state.update_data(
        create_message_id=callback.message.message_id,
        create_chat_id=callback.message.chat.id
    )
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]])
    )
    await state.set_state(BookStates.name)
    await callback.answer()


@router.message(BookStates.name)
@admin_required
async def add_book_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    data = await state.get_data()
    new_name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    all_books = await get_all_books()
    book_id = data.get("book_id")
    existing_book = next((b for b in all_books if b.name == new_name and (not book_id or b.id != book_id)), None)

    if existing_book:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if book_id:
            # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            chat_id = data.get("edit_chat_id")
            message_id = data.get("edit_message_id")
            cancel_callback = f"edit_book_{book_id}"
        else:
            # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è
            chat_id = data.get("create_chat_id")
            message_id = data.get("create_message_id")
            cancel_callback = "admin_books"

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
        if chat_id and message_id:
            await message.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n–ö–Ω–∏–≥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ¬´{new_name}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback)
                ]])
            )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ
    if "book_id" in data:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏
        book_id = data["book_id"]
        book = await get_book_by_id(book_id)
        if book:
            old_name = book.name
            book.name = new_name
            await update_book(book)

            # –†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∞–π—Ç–ª—ã –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π –∫–Ω–∏–≥–∏
            if old_name != new_name:
                updated_lessons = await regenerate_book_lessons_titles(book_id)
                if updated_lessons > 0:
                    logger.info(f"–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤: {updated_lessons} (–∫–Ω–∏–≥–∞ {book_id})")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.delete()
            except:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
            edit_message_id = data.get("edit_message_id")
            edit_chat_id = data.get("edit_chat_id")

            # –û—á–∏—â–∞–µ–º state
            await state.clear()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            book = await get_book_by_id(book_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ edit_book_menu)
            theme_name = book.theme.name if book.theme else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            author_name = book.author.name if book.author else "–ù–µ —É–∫–∞–∑–∞–Ω"
            status = "–ê–∫—Ç–∏–≤–Ω–∞" if book.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_book_name_{book.id}"))
            builder.add(InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_book_description_{book.id}"))
            builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"edit_book_theme_{book.id}"))
            builder.add(InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"edit_book_author_{book.id}"))
            toggle_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if book.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            builder.add(InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_book_{book.id}"))
            builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book.id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_books"))
            builder.adjust(1)

            info = (
                f"üìñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book.name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {book.desc or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"<b>–¢–µ–º–∞:</b> {theme_name}\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> {author_name}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message_id and edit_chat_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=edit_chat_id,
                        message_id=edit_message_id,
                        text=info,
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await message.answer(info, reply_markup=builder.as_markup())
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        create_message_id = data.get("create_message_id")
        create_chat_id = data.get("create_chat_id")

        await state.update_data(name=new_name)

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if create_message_id and create_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=create_chat_id,
                    message_id=create_message_id,
                    text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
                         "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_description")],
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]
                    ])
                )
            except:
                await message.answer(
                    "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_description")],
                        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]
                    ])
                )
        await state.set_state(BookStates.description)


@router.callback_query(F.data == "skip_book_description")
@admin_required
async def add_book_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = await get_all_themes()

    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))
    builder.add(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_theme"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.theme_id)
    await callback.answer()


@router.message(BookStates.description)
@admin_required
async def add_book_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ
    if "book_id" in data:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–∏–≥–∏
        book_id = data["book_id"]
        book = await get_book_by_id(book_id)
        if book:
            book.desc = message.text
            await update_book(book)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await message.delete()
            except:
                pass

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
            edit_message_id = data.get("edit_message_id")
            edit_chat_id = data.get("edit_chat_id")

            # –û—á–∏—â–∞–µ–º state
            await state.clear()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            book = await get_book_by_id(book_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ –≤ edit_book_menu)
            theme_name = book.theme.name if book.theme else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            author_name = book.author.name if book.author else "–ù–µ —É–∫–∞–∑–∞–Ω"
            status = "–ê–∫—Ç–∏–≤–Ω–∞" if book.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_book_name_{book.id}"))
            builder.add(InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_book_description_{book.id}"))
            builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"edit_book_theme_{book.id}"))
            builder.add(InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"edit_book_author_{book.id}"))
            toggle_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if book.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
            builder.add(InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_book_{book.id}"))
            builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book.id}"))
            builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_books"))
            builder.adjust(1)

            info = (
                f"üìñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book.name}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {book.desc or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"<b>–¢–µ–º–∞:</b> {theme_name}\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> {author_name}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if edit_message_id and edit_chat_id:
                try:
                    await message.bot.edit_message_text(
                        chat_id=edit_chat_id,
                        message_id=edit_message_id,
                        text=info,
                        reply_markup=builder.as_markup()
                    )
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await message.answer(info, reply_markup=builder.as_markup())
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.delete()

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        create_message_id = data.get("create_message_id")
        create_chat_id = data.get("create_chat_id")

        await state.update_data(desc=message.text)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        themes = await get_all_themes()

        builder = InlineKeyboardBuilder()
        for theme in themes:
            builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))
        builder.add(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_theme"))
        builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books"))
        builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if create_message_id and create_chat_id:
            try:
                await message.bot.edit_message_text(
                    chat_id=create_chat_id,
                    message_id=create_message_id,
                    text="üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
                    reply_markup=builder.as_markup()
                )
            except:
                await message.answer(
                    "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
                    reply_markup=builder.as_markup()
                )
        await state.set_state(BookStates.theme_id)


@router.callback_query(F.data == "skip_book_theme")
@admin_required
async def skip_book_theme(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã"""
    await state.update_data(theme_id=None)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    authors = await get_all_book_authors()

    builder = InlineKeyboardBuilder()
    for author in authors:
        builder.add(InlineKeyboardButton(text=author.name, callback_data=f"select_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_author"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.author_id)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^select_theme_\d+$"))
@admin_required
async def select_theme_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏"""
    theme_id = int(callback.data.split("_")[2])
    await state.update_data(theme_id=theme_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    authors = await get_all_book_authors()

    builder = InlineKeyboardBuilder()
    for author in authors:
        builder.add(InlineKeyboardButton(text=author.name, callback_data=f"select_author_{author.id}"))
    builder.add(InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_author"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books"))
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.author_id)
    await callback.answer()


@router.callback_query(F.data == "skip_book_author")
@admin_required
async def skip_book_author(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –∞–≤—Ç–æ—Ä–∞"""
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É
    book = await create_book(
        name=data["name"],
        desc=data.get("desc", ""),
        theme_id=data.get("theme_id"),
        author_id=None,
        is_active=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    create_message_id = data.get("create_message_id")
    create_chat_id = data.get("create_chat_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books = await get_all_books()

    # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ –≤ admin_books)
    builder = InlineKeyboardBuilder()
    for book_item in books:
        status = "‚úÖ" if book_item.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {book_item.name}",
            callback_data=f"edit_book_{book_item.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if create_message_id and create_chat_id:
        try:
            await callback.bot.edit_message_text(
                chat_id=create_chat_id,
                message_id=create_message_id,
                text="üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.edit_text(
                "üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=builder.as_markup()
            )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^select_author_\d+$"))
@admin_required
async def select_author_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–Ω–∏–≥–∏"""
    author_id = int(callback.data.split("_")[2])
    data = await state.get_data()

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É
    book = await create_book(
        name=data["name"],
        desc=data.get("desc", ""),
        theme_id=data.get("theme_id"),
        author_id=author_id,
        is_active=True
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    create_message_id = data.get("create_message_id")
    create_chat_id = data.get("create_chat_id")

    # –û—á–∏—â–∞–µ–º state
    await state.clear()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books = await get_all_books()

    # –°—Ç—Ä–æ–∏–º —Å–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∫–∞–∫ –≤ admin_books)
    builder = InlineKeyboardBuilder()
    for book_item in books:
        status = "‚úÖ" if book_item.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {book_item.name}",
            callback_data=f"edit_book_{book_item.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if create_message_id and create_chat_id:
        try:
            await callback.bot.edit_message_text(
                chat_id=create_chat_id,
                message_id=create_message_id,
                text="üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.edit_text(
                "üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
                reply_markup=builder.as_markup()
            )
    await callback.answer()


@router.callback_query(F.data.startswith("edit_book_name_"))
@admin_required
async def edit_book_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[3])
    await state.update_data(
        book_id=book_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}")
        ]])
    )
    await state.set_state(BookStates.name)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_book_description_"))
@admin_required
async def edit_book_description_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[3])
    await state.update_data(
        book_id=book_id,
        edit_message_id=callback.message.message_id,
        edit_chat_id=callback.message.chat.id
    )

    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}")
        ]])
    )
    await state.set_state(BookStates.description)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_book_theme_"))
@admin_required
async def edit_book_theme_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[3])
    await state.update_data(book_id=book_id)

    themes = await get_all_themes()

    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"update_book_theme_{book_id}_{theme.id}"))
    builder.add(InlineKeyboardButton(text="üö´ –ë–µ–∑ —Ç–µ–º—ã", callback_data=f"update_book_theme_{book_id}_none"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^update_book_theme_\d+_\d+$"))
@admin_required
async def update_book_theme(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É –∫–Ω–∏–≥–∏ –∏ –≤—Å–µ—Ö –µ—ë —É—Ä–æ–∫–æ–≤"""
    parts = callback.data.split("_")
    book_id = int(parts[3])
    theme_id = int(parts[4])

    book = await get_book_by_id(book_id)
    if book:
        book.theme_id = theme_id
        await update_book(book)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–∏—è—Ö
        from bot.services.database_service import bulk_update_book_lessons
        updated_count = await bulk_update_book_lessons(book_id, theme_id=theme_id)

        await callback.answer(f"‚úÖ –¢–µ–º–∞ –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count})", show_alert=True)
    else:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    await edit_book_menu(callback)


@router.callback_query(F.data.regexp(r"^update_book_theme_\d+_none$"))
@admin_required
async def update_book_theme_none(callback: CallbackQuery):
    """–£–±—Ä–∞—Ç—å —Ç–µ–º—É —É –∫–Ω–∏–≥–∏"""
    parts = callback.data.split("_")
    book_id = int(parts[3])

    book = await get_book_by_id(book_id)
    if book:
        book.theme_id = None
        await update_book(book)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –≤–æ –≤—Å–µ—Ö —Å–µ—Ä–∏—è—Ö
        from bot.services.database_service import bulk_update_book_lessons
        updated_count = await bulk_update_book_lessons(book_id, theme_id=None)

        await callback.answer(f"‚úÖ –¢–µ–º–∞ —É–±—Ä–∞–Ω–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count})", show_alert=True)
    else:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    await edit_book_menu(callback)


@router.callback_query(F.data.startswith("edit_book_author_"))
@admin_required
async def edit_book_author_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[3])
    await state.update_data(book_id=book_id)

    authors = await get_all_book_authors()

    builder = InlineKeyboardBuilder()
    for author in authors:
        builder.add(InlineKeyboardButton(text=author.name, callback_data=f"update_book_author_{book_id}_{author.id}"))
    builder.add(InlineKeyboardButton(text="üö´ –ë–µ–∑ –∞–≤—Ç–æ—Ä–∞", callback_data=f"update_book_author_{book_id}_none"))
    builder.add(InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        "‚úçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^update_book_author_\d+_\d+$"))
@admin_required
async def update_book_author(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    parts = callback.data.split("_")
    book_id = int(parts[3])
    author_id = int(parts[4])

    book = await get_book_by_id(book_id)
    if book:
        book.author_id = author_id
        await update_book(book)

    await callback.answer(f"‚úÖ –ê–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    await edit_book_menu(callback)


@router.callback_query(F.data.regexp(r"^update_book_author_\d+_none$"))
@admin_required
async def update_book_author_none(callback: CallbackQuery):
    """–£–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ —É –∫–Ω–∏–≥–∏"""
    parts = callback.data.split("_")
    book_id = int(parts[3])

    book = await get_book_by_id(book_id)
    if book:
        book.author_id = None
        await update_book(book)

    await callback.answer(f"‚úÖ –ê–≤—Ç–æ—Ä —É–±—Ä–∞–Ω", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
    await edit_book_menu(callback)


@router.callback_query(F.data.startswith("toggle_book_"))
@admin_required
async def toggle_book_status(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    book = await get_book_by_id(book_id)

    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    book.is_active = not book.is_active
    await update_book(book)

    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if book.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await callback.answer(f"‚úÖ –ö–Ω–∏–≥–∞ {status_text}", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await edit_book_menu(callback)


@router.callback_query(F.data.startswith("delete_book_"))
@admin_required
async def delete_book_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    book = await get_book_by_id(book_id)

    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Ä–æ–∫–æ–≤
    lessons_count = len(book.lessons) if book.lessons else 0

    warning_text = f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
    warning_text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É ¬´{book.name}¬ª?\n\n"

    if lessons_count > 0:
        warning_text += f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£ —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –µ—Å—Ç—å {lessons_count} —É—Ä–æ–∫(–æ–≤).\n"
        warning_text += "–£—Ä–æ–∫–∏ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–æ –±—É–¥—É—Ç –æ—Ç–≤—è–∑–∞–Ω—ã –æ—Ç –∫–Ω–∏–≥–∏.\n\n"

    warning_text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_book_{book_id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_book_{book_id}"))
    builder.adjust(1)

    await callback.message.edit_text(warning_text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_book_"))
@admin_required
async def delete_book_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    book_id = int(callback.data.split("_")[3])
    book = await get_book_by_id(book_id)

    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    book_name = book.name
    await delete_book(book_id)

    await callback.message.edit_text(
        f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{book_name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="admin_books")
        ]])
    )
    await callback.answer()


# –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö edit_book_* –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
@router.callback_query(F.data.regexp(r"^edit_book_\d+$"))
@admin_required
async def edit_book_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
    book_id = int(callback.data.split("_")[2])
    book = await get_book_by_id(book_id)

    if not book:
        await callback.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –∏ –∞–≤—Ç–æ—Ä–µ
    theme_name = book.theme.name if book.theme else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
    author_name = book.author.name if book.author else "–ù–µ —É–∫–∞–∑–∞–Ω"
    status = "–ê–∫—Ç–∏–≤–Ω–∞" if book.is_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_book_name_{book.id}"))
    builder.add(InlineKeyboardButton(text="üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_book_description_{book.id}"))
    builder.add(InlineKeyboardButton(text="üìö –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"edit_book_theme_{book.id}"))
    builder.add(InlineKeyboardButton(text="‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data=f"edit_book_author_{book.id}"))

    # –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    toggle_text = "‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" if book.is_active else "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"
    builder.add(InlineKeyboardButton(text=toggle_text, callback_data=f"toggle_book_{book.id}"))

    builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", callback_data=f"delete_book_{book.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_books"))
    builder.adjust(1)

    text = f"üìñ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏</b>\n\n"
    text += f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {book.name}\n"
    text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {book.desc or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    text += f"<b>–¢–µ–º–∞:</b> {theme_name}\n"
    text += f"<b>–ê–≤—Ç–æ—Ä:</b> {author_name}\n"
    text += f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()
