"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
"""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_books,
    get_book_by_id,
    create_book,
    update_book,
    delete_book,
    get_all_themes,
    get_all_book_authors,
)

router = Router()


class BookStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏"""
    name = State()
    description = State()
    theme_id = State()
    author_id = State()


@router.callback_query(F.data == "admin_books")
@admin_required
async def admin_books(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    books = await get_all_books()

    builder = InlineKeyboardBuilder()
    for book in books:
        status = "‚úÖ" if book.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {book.name}",
            callback_data=f"edit_book_{book.id}"
        ))

    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)

    await callback.message.edit_text(
        "üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_book")
@admin_required
async def add_book_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–≤
    themes = await get_all_themes()
    authors = await get_all_book_authors()

    if not themes or not authors:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_books")]])
        )
        await callback.answer()
        return

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]])
    )
    await state.set_state(BookStates.name)
    await callback.answer()


@router.message(BookStates.name)
@admin_required
async def add_book_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    await state.update_data(name=message.text)

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_book_description")],
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]
        ])
    )
    await state.set_state(BookStates.description)


@router.callback_query(F.data == "skip_book_description")
@admin_required
async def add_book_skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = await get_all_themes()

    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.theme_id)
    await callback.answer()


@router.message(BookStates.description)
@admin_required
async def add_book_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    await state.update_data(description=message.text)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = await get_all_themes()

    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))

    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.theme_id)


@router.callback_query(F.data.regexp(r"^select_theme_\d+$"))
@admin_required
async def select_theme_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏"""
    theme_id = int(callback.data.split("_")[2])
    await state.update_data(theme_id=theme_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    authors = await get_all_book_authors()

    builder = InlineKeyboardBuilder()
    for author in authors:
        builder.add(InlineKeyboardButton(text=author.name, callback_data=f"select_author_{author.id}"))

    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.author_id)
    await callback.answer()


@router.callback_query(F.data.regexp(r"^select_author_\d+$"))
@admin_required
async def select_author_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–Ω–∏–≥–∏"""
    author_id = int(callback.data.split("_")[2])
    data = await state.get_data()

    book = await create_book(
        name=data["name"],
        description=data.get("description", ""),
        theme_id=data["theme_id"],
        author_id=author_id,
        is_active=True
    )

    await callback.message.edit_text(
        f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{book.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="admin_books")]])
    )
    await state.clear()
    await callback.answer()
