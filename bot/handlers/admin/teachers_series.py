"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏ —É—Ä–æ–∫–æ–≤ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, distinct, update
from sqlalchemy.ext.asyncio import AsyncSession

from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_lesson_teacher_by_id,
    get_all_lessons,
    get_all_books,
)
from bot.models.lesson import Lesson
from bot.models.database import async_session_maker
from bot.handlers.admin.teachers import LessonTeacherStates

router = Router()


@router.callback_query(F.data.startswith("manage_teacher_series_"))
@admin_required
async def manage_teacher_series(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏—è–º–∏"""
    teacher_id = int(callback.data.split("_")[3])
    teacher = await get_lesson_teacher_by_id(teacher_id)

    if not teacher:
        await callback.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    all_lessons = await get_all_lessons()
    teacher_lessons = [l for l in all_lessons if l.teacher_id == teacher_id]

    if not teacher_lessons:
        await callback.message.edit_text(
            f"üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏</b>\n\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n\n"
            f"–£ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_teacher_{teacher_id}")
            ]])
        )
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–∏–≥–∏
    book_ids = list(set([l.book_id for l in teacher_lessons if l.book_id]))
    books = await get_all_books()
    teacher_books = [b for b in books if b.id in book_ids]

    builder = InlineKeyboardBuilder()
    for book in teacher_books:
        builder.add(InlineKeyboardButton(
            text=f"üìñ {book.name}",
            callback_data=f"teacher_series_book_{teacher_id}_{book.id}"
        ))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_teacher_{teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏</b>\n\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^teacher_series_book_\d+_\d+$"))
@admin_required
async def show_series_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–µ"""
    parts = callback.data.split("_")
    teacher_id = int(parts[3])
    book_id = int(parts[4])

    teacher = await get_lesson_teacher_by_id(teacher_id)
    books = await get_all_books()
    book = next((b for b in books if b.id == book_id), None)

    if not teacher or not book:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    async with async_session_maker() as session:
        result = await session.execute(
            select(distinct(Lesson.series_year), distinct(Lesson.series_name))
            .where(Lesson.teacher_id == teacher_id, Lesson.book_id == book_id)
            .order_by(Lesson.series_year.desc(), Lesson.series_name)
        )
        series_data = result.all()

    if not series_data:
        await callback.message.edit_text(
            f"üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏</b>\n\n"
            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
            f"–ö–Ω–∏–≥–∞: {book.name}\n\n"
            f"–ù–µ—Ç —Å–µ—Ä–∏–π –¥–ª—è —ç—Ç–æ–π –∫–Ω–∏–≥–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_teacher_series_{teacher_id}")
            ]])
        )
        await callback.answer()
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    async with async_session_maker() as session:
        result = await session.execute(
            select(Lesson.series_year, Lesson.series_name)
            .where(Lesson.teacher_id == teacher_id, Lesson.book_id == book_id)
            .group_by(Lesson.series_year, Lesson.series_name)
            .order_by(Lesson.series_year.desc(), Lesson.series_name)
        )
        series_list = result.all()

    builder = InlineKeyboardBuilder()
    for year, name in series_list:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ —Å–µ—Ä–∏–∏
        async with async_session_maker() as session:
            count_result = await session.execute(
                select(Lesson.id)
                .where(
                    Lesson.teacher_id == teacher_id,
                    Lesson.book_id == book_id,
                    Lesson.series_year == year,
                    Lesson.series_name == name
                )
            )
            lessons_count = len(count_result.all())

        builder.add(InlineKeyboardButton(
            text=f"üìö {year} - {name} ({lessons_count} —É—Ä–æ–∫.)",
            callback_data=f"edit_series_{teacher_id}_{book_id}_{year}_{name}"
        ))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"manage_teacher_series_{teacher_id}"))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏—è–º–∏</b>\n\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"–ö–Ω–∏–≥–∞: {book.name}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^edit_series_\d+_\d+_\d+_.+$"))
@admin_required
async def edit_series_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_", 4)
    teacher_id = int(parts[2])
    book_id = int(parts[3])
    year = int(parts[4].split("_")[0])
    name = "_".join(parts[4].split("_")[1:])

    teacher = await get_lesson_teacher_by_id(teacher_id)
    books = await get_all_books()
    book = next((b for b in books if b.id == book_id), None)

    if not teacher or not book:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
    async with async_session_maker() as session:
        count_result = await session.execute(
            select(Lesson.id)
            .where(
                Lesson.teacher_id == teacher_id,
                Lesson.book_id == book_id,
                Lesson.series_year == year,
                Lesson.series_name == name
            )
        )
        lessons_count = len(count_result.all())

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–¥",
        callback_data=f"edit_series_year_{teacher_id}_{book_id}_{year}_{name}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        callback_data=f"edit_series_name_{teacher_id}_{book_id}_{year}_{name}"
    ))
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data=f"teacher_series_book_{teacher_id}_{book_id}"
    ))
    builder.adjust(1)

    await callback.message.edit_text(
        f"üìÅ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏</b>\n\n"
        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher.name}\n"
        f"–ö–Ω–∏–≥–∞: {book.name}\n"
        f"–°–µ—Ä–∏—è: {year} - {name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤: {lessons_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.regexp(r"^edit_series_year_\d+_\d+_\d+_.+$"))
@admin_required
async def edit_series_year_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞ —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_", 5)
    teacher_id = int(parts[3])
    book_id = int(parts[4])
    old_year = int(parts[5].split("_")[0])
    old_name = "_".join(parts[5].split("_")[1:])

    await state.update_data(
        teacher_id=teacher_id,
        book_id=book_id,
        old_year=old_year,
        old_name=old_name
    )

    await callback.message.edit_text(
        f"üìÖ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–¥–∞ —Å–µ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –≥–æ–¥: {old_year}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ–¥ (2000-2050):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_series_{teacher_id}_{book_id}_{old_year}_{old_name}")
        ]])
    )
    await state.set_state(LessonTeacherStates.edit_series_year)
    await callback.answer()


@router.message(LessonTeacherStates.edit_series_year)
@admin_required
async def edit_series_year_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ–¥ —Å–µ—Ä–∏–∏"""
    try:
        new_year = int(message.text)
        if new_year < 2000 or new_year > 2050:
            await message.answer(
                "‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 2000-2050. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return

        data = await state.get_data()
        teacher_id = data["teacher_id"]
        book_id = data["book_id"]
        old_year = data["old_year"]
        old_name = data["old_name"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–¥ —É –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
        async with async_session_maker() as session:
            await session.execute(
                update(Lesson)
                .where(
                    Lesson.teacher_id == teacher_id,
                    Lesson.book_id == book_id,
                    Lesson.series_year == old_year,
                    Lesson.series_name == old_name
                )
                .values(series_year=new_year)
            )
            await session.commit()

        await message.answer(
            f"‚úÖ –ì–æ–¥ —Å–µ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω —Å {old_year} –Ω–∞ {new_year}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–∏–∏", callback_data=f"edit_series_{teacher_id}_{book_id}_{new_year}_{old_name}")
            ]])
        )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


@router.callback_query(F.data.regexp(r"^edit_series_name_\d+_\d+_\d+_.+$"))
@admin_required
async def edit_series_name_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏"""
    parts = callback.data.split("_", 5)
    teacher_id = int(parts[3])
    book_id = int(parts[4])
    year = int(parts[5].split("_")[0])
    old_name = "_".join(parts[5].split("_")[1:])

    await state.update_data(
        teacher_id=teacher_id,
        book_id=book_id,
        year=year,
        old_name=old_name
    )

    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–∏–∏</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_name}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_series_{teacher_id}_{book_id}_{year}_{old_name}")
        ]])
    )
    await state.set_state(LessonTeacherStates.edit_series_name)
    await callback.answer()


@router.message(LessonTeacherStates.edit_series_name)
@admin_required
async def edit_series_name_save(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏"""
    new_name = message.text
    data = await state.get_data()
    teacher_id = data["teacher_id"]
    book_id = data["book_id"]
    year = data["year"]
    old_name = data["old_name"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ —ç—Ç–æ–π —Å–µ—Ä–∏–∏
    async with async_session_maker() as session:
        await session.execute(
            update(Lesson)
            .where(
                Lesson.teacher_id == teacher_id,
                Lesson.book_id == book_id,
                Lesson.series_year == year,
                Lesson.series_name == old_name
            )
            .values(series_name=new_name)
        )
        await session.commit()

    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–æ —Å ¬´{old_name}¬ª –Ω–∞ ¬´{new_name}¬ª",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –ö —Å–µ—Ä–∏–∏", callback_data=f"edit_series_{teacher_id}_{book_id}_{year}_{new_name}")
        ]])
    )
    await state.clear()
