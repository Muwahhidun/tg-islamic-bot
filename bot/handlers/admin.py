"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
"""
from typing import Dict, List, Optional, Union
from datetime import datetime

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.utils.config import config
from bot.utils.decorators import admin_required
from bot.services.database_service import (
    get_all_themes,
    get_theme_by_id,
    create_theme,
    update_theme,
    delete_theme,
    get_all_book_authors,
    get_book_author_by_id,
    create_book_author,
    update_book_author,
    delete_book_author,
    get_all_lesson_teachers,
    get_lesson_teacher_by_id,
    create_lesson_teacher,
    update_lesson_teacher,
    delete_lesson_teacher,
    get_all_books,
    get_book_by_id,
    create_book,
    update_book,
    delete_book,
    get_all_lessons,
    get_lesson_by_id,
    create_lesson,
    update_lesson,
    delete_lesson,
    get_user_by_telegram_id,
    UserService,
    RoleService
)
from bot.models import Theme, BookAuthor, LessonTeacher, Book, Lesson

router = Router()


class ThemeStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏"""
    name = State()
    description = State()


class BookAuthorStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥"""
    name = State()
    biography = State()


class LessonTeacherStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏"""
    name = State()
    biography = State()


class BookStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∞–º–∏"""
    name = State()
    description = State()
    theme_id = State()
    author_id = State()


class LessonStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞–º–∏"""
    title = State()
    description = State()
    book_id = State()
    teacher_id = State()
    lesson_number = State()
    duration_minutes = State()
    tags = State()
    audio_file = State()


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    role = State()


@router.message(Command("admin"))
@admin_required
async def admin_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏", callback_data="admin_themes"))
    builder.add(InlineKeyboardButton(text="‚úçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏", callback_data="admin_authors"))
    builder.add(InlineKeyboardButton(text="üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_teachers"))
    builder.add(InlineKeyboardButton(text="üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏", callback_data="admin_books"))
    builder.add(InlineKeyboardButton(text="üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏", callback_data="admin_lessons"))
    builder.add(InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    builder.adjust(2)
    
    await message.answer(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏
@router.callback_query(F.data == "admin_themes")
@admin_required
async def admin_themes(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    themes = await get_all_themes()
    
    builder = InlineKeyboardBuilder()
    for theme in themes:
        status = "‚úÖ" if theme.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {theme.name}",
            callback_data=f"edit_theme_{theme.id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É", callback_data="add_theme"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìö <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_theme")
@admin_required
async def add_theme_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_themes")]])
    )
    await state.set_state(ThemeStates.name)
    await callback.answer()


@router.message(ThemeStates.name)
@admin_required
async def add_theme_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_themes")]])
    )
    await state.set_state(ThemeStates.description)


@router.message(ThemeStates.description, F.text == "/skip")
@admin_required
async def add_theme_skip_description(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"""
    data = await state.get_data()
    
    theme = await create_theme(
        name=data["name"],
        description="",
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –¢–µ–º–∞ ¬´{theme.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ–º", callback_data="admin_themes")]])
    )
    await state.clear()


@router.message(ThemeStates.description)
@admin_required
async def add_theme_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"""
    data = await state.get_data()
    
    theme = await create_theme(
        name=data["name"],
        description=message.text,
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –¢–µ–º–∞ ¬´{theme.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ–º", callback_data="admin_themes")]])
    )
    await state.clear()


@router.callback_query(F.data.startswith("edit_theme_"))
@admin_required
async def edit_theme_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    theme_id = int(callback.data.split("_")[2])
    theme = await get_theme_by_id(theme_id)
    
    if not theme:
        await callback.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if theme.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_theme_name_{theme.id}"))
    builder.add(InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_theme_desc_{theme.id}"))
    builder.add(InlineKeyboardButton(text=f"üîÑ –°—Ç–∞—Ç—É—Å: {status}", callback_data=f"toggle_theme_{theme.id}"))
    builder.add(InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_theme_{theme.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_themes"))
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üìö <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {theme.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {theme.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("toggle_theme_"))
@admin_required
async def toggle_theme(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ–º—ã"""
    theme_id = int(callback.data.split("_")[2])
    theme = await get_theme_by_id(theme_id)
    
    if not theme:
        await callback.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    theme.is_active = not theme.is_active
    await update_theme(theme)
    
    status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if theme.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await callback.answer(f"‚úÖ –¢–µ–º–∞ {status}")
    await edit_theme_menu(callback)


@router.callback_query(F.data.startswith("delete_theme_"))
@admin_required
async def delete_theme_prompt(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã"""
    theme_id = int(callback.data.split("_")[2])
    theme = await get_theme_by_id(theme_id)
    
    if not theme:
        await callback.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_theme_{theme.id}"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_theme_menu"))
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É ¬´{theme.name}¬ª?\n"
        f"–≠—Ç–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –∏ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ!",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_theme_"))
@admin_required
async def confirm_delete_theme(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã"""
    theme_id = int(callback.data.split("_")[3])
    theme = await get_theme_by_id(theme_id)
    
    if not theme:
        await callback.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await delete_theme(theme_id)
    
    await callback.message.edit_text(
        f"‚úÖ –¢–µ–º–∞ ¬´{theme.name}¬ª –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ–º", callback_data="admin_themes")]])
    )
    await callback.answer()


@router.callback_query(F.data == "admin_panel")
@admin_required
async def back_to_admin_panel(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    builder = InlineKeyboardBuilder()

    builder.add(InlineKeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏", callback_data="admin_themes"))
    builder.add(InlineKeyboardButton(text="‚úçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏", callback_data="admin_authors"))
    builder.add(InlineKeyboardButton(text="üë®‚Äçüè´ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_teachers"))
    builder.add(InlineKeyboardButton(text="üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏", callback_data="admin_books"))
    builder.add(InlineKeyboardButton(text="üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏", callback_data="admin_lessons"))
    builder.add(InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"))
    builder.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"))
    builder.adjust(2)

    await callback.message.edit_text(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥
@router.callback_query(F.data == "admin_authors")
@admin_required
async def admin_authors(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    authors = await get_all_book_authors()
    
    builder = InlineKeyboardBuilder()
    for author in authors:
        status = "‚úÖ" if author.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {author.name}",
            callback_data=f"edit_author_{author.id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="add_author"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚úçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_author")
@admin_required
async def add_author_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_authors")]])
    )
    await state.set_state(BookAuthorStates.name)
    await callback.answer()


@router.message(BookAuthorStates.name)
@admin_required
async def add_author_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –∞–≤—Ç–æ—Ä–∞"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_authors")]])
    )
    await state.set_state(BookAuthorStates.biography)


@router.message(BookAuthorStates.biography, F.text == "/skip")
@admin_required
async def add_author_skip_biography(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞"""
    data = await state.get_data()
    
    author = await create_book_author(
        name=data["name"],
        biography="",
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –ê–≤—Ç–æ—Ä ¬´{author.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–æ–≤", callback_data="admin_authors")]])
    )
    await state.clear()


@router.message(BookAuthorStates.biography)
@admin_required
async def add_author_biography(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∞–≤—Ç–æ—Ä–∞"""
    data = await state.get_data()
    
    author = await create_book_author(
        name=data["name"],
        biography=message.text,
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –ê–≤—Ç–æ—Ä ¬´{author.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∞–≤—Ç–æ—Ä–æ–≤", callback_data="admin_authors")]])
    )
    await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data == "admin_teachers")
@admin_required
async def admin_teachers(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    teachers = await get_all_lesson_teachers()
    
    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        status = "‚úÖ" if teacher.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {teacher.name}",
            callback_data=f"edit_teacher_{teacher.id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", callback_data="add_teacher"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üë®‚Äçüè´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_teacher")
@admin_required
async def add_teacher_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_teachers")]])
    )
    await state.set_state(LessonTeacherStates.name)
    await callback.answer()


@router.message(LessonTeacherStates.name)
@admin_required
async def add_teacher_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–º—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_teachers")]])
    )
    await state.set_state(LessonTeacherStates.biography)


@router.message(LessonTeacherStates.biography, F.text == "/skip")
@admin_required
async def add_teacher_skip_biography(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    
    teacher = await create_lesson_teacher(
        name=data["name"],
        biography="",
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ¬´{teacher.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_teachers")]])
    )
    await state.clear()


@router.message(LessonTeacherStates.biography)
@admin_required
async def add_teacher_biography(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    
    teacher = await create_lesson_teacher(
        name=data["name"],
        biography=message.text,
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å ¬´{teacher.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_teachers")]])
    )
    await state.clear()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏
@router.callback_query(F.data == "admin_books")
@admin_required
async def admin_books(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    books = await get_all_books()
    
    builder = InlineKeyboardBuilder()
    for book in books:
        status = "‚úÖ" if book.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} {book.name}",
            callback_data=f"edit_book_{book.id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üìñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_book")
@admin_required
async def add_book_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–≤
    themes = await get_all_themes()
    authors = await get_all_book_authors()
    
    if not themes or not authors:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É –∏ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_books")]])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]])
    )
    await state.set_state(BookStates.name)
    await callback.answer()


@router.message(BookStates.name)
@admin_required
async def add_book_name(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_books")]])
    )
    await state.set_state(BookStates.description)


@router.message(BookStates.description, F.text == "/skip")
@admin_required
async def add_book_skip_description(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = await get_all_themes()
    
    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.theme_id)


@router.message(BookStates.description)
@admin_required
async def add_book_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"""
    await state.update_data(description=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    themes = await get_all_themes()
    
    builder = InlineKeyboardBuilder()
    for theme in themes:
        builder.add(InlineKeyboardButton(text=theme.name, callback_data=f"select_theme_{theme.id}"))
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.theme_id)


@router.callback_query(F.data.startswith("select_theme_"))
@admin_required
async def select_theme_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –∫–Ω–∏–≥–∏"""
    theme_id = int(callback.data.split("_")[2])
    await state.update_data(theme_id=theme_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    authors = await get_all_book_authors()
    
    builder = InlineKeyboardBuilder()
    for author in authors:
        builder.add(InlineKeyboardButton(text=author.name, callback_data=f"select_author_{author.id}"))
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(BookStates.author_id)
    await callback.answer()


@router.callback_query(F.data.startswith("select_author_"))
@admin_required
async def select_author_for_book(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –∫–Ω–∏–≥–∏"""
    author_id = int(callback.data.split("_")[2])
    data = await state.get_data()
    
    book = await create_book(
        name=data["name"],
        description=data.get("description", ""),
        theme_id=data["theme_id"],
        author_id=author_id,
        is_active=True
    )
    
    await callback.message.edit_text(
        f"‚úÖ –ö–Ω–∏–≥–∞ ¬´{book.name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –∫–Ω–∏–≥", callback_data="admin_books")]])
    )
    await state.clear()
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏
@router.callback_query(F.data == "admin_lessons")
@admin_required
async def admin_lessons(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    lessons = await get_all_lessons()
    
    builder = InlineKeyboardBuilder()
    for lesson in lessons:
        status = "‚úÖ" if lesson.is_active else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{status} –£—Ä–æ–∫ {lesson.lesson_number}: {lesson.title}",
            callback_data=f"edit_lesson_{lesson.id}"
        ))
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫", callback_data="add_lesson"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üéß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_lesson")
@admin_required
async def add_lesson_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    books = await get_all_books()
    teachers = await get_all_lesson_teachers()
    
    if not books or not teachers:
        await callback.message.edit_text(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–Ω–∏–≥—É –∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_lessons")]])
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.title)
    await callback.answer()


@router.message(LessonStates.title)
@admin_required
async def add_lesson_title(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await state.update_data(title=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.description)


@router.message(LessonStates.description, F.text == "/skip")
@admin_required
async def add_lesson_skip_description(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books = await get_all_books()
    
    builder = InlineKeyboardBuilder()
    for book in books:
        builder.add(InlineKeyboardButton(text=book.name, callback_data=f"select_book_{book.id}"))
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LessonStates.book_id)


@router.message(LessonStates.description)
@admin_required
async def add_lesson_description(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞"""
    await state.update_data(description=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥
    books = await get_all_books()
    
    builder = InlineKeyboardBuilder()
    for book in books:
        builder.add(InlineKeyboardButton(text=book.name, callback_data=f"select_book_{book.id}"))
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LessonStates.book_id)


@router.callback_query(F.data.startswith("select_book_"))
@admin_required
async def select_book_for_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –¥–ª—è —É—Ä–æ–∫–∞"""
    book_id = int(callback.data.split("_")[2])
    await state.update_data(book_id=book_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    teachers = await get_all_lesson_teachers()
    
    builder = InlineKeyboardBuilder()
    for teacher in teachers:
        builder.add(InlineKeyboardButton(text=teacher.name, callback_data=f"select_teacher_{teacher.id}"))
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —É—Ä–æ–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(LessonStates.teacher_id)
    await callback.answer()


@router.callback_query(F.data.startswith("select_teacher_"))
@admin_required
async def select_teacher_for_lesson(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É—Ä–æ–∫–∞"""
    teacher_id = int(callback.data.split("_")[2])
    await state.update_data(teacher_id=teacher_id)
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.lesson_number)
    await callback.answer()


@router.message(LessonStates.lesson_number)
@admin_required
async def add_lesson_number(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞"""
    try:
        lesson_number = int(message.text)
        await state.update_data(lesson_number=lesson_number)
        
        await message.answer(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )
        await state.set_state(LessonStates.duration_minutes)
    except ValueError:
        await message.answer(
            "‚ùå –ù–æ–º–µ—Ä —É—Ä–æ–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )


@router.message(LessonStates.duration_minutes)
@admin_required
async def add_lesson_duration(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ä–æ–∫–∞"""
    try:
        duration_minutes = int(message.text)
        await state.update_data(duration_minutes=duration_minutes)
        
        await message.answer(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ –¥–ª—è —É—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )
        await state.set_state(LessonStates.tags)
    except ValueError:
        await message.answer(
            "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
        )


@router.message(LessonStates.tags, F.text == "/skip")
@admin_required
async def add_lesson_skip_tags(message: Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.audio_file)


@router.message(LessonStates.tags)
@admin_required
async def add_lesson_tags(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–≥–∏ —É—Ä–æ–∫–∞"""
    await state.update_data(tags=message.text)
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_lessons")]])
    )
    await state.set_state(LessonStates.audio_file)


@router.message(LessonStates.audio_file, F.audio)
@admin_required
async def add_lesson_audio(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª —É—Ä–æ–∫–∞"""
    data = await state.get_data()
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    audio_file = message.audio
    file_info = await message.bot.get_file(audio_file.file_id)
    downloaded_file = await message.bot.download_file(file_info.file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    import os
    audio_dir = "bot/audio_files"
    os.makedirs(audio_dir, exist_ok=True)
    
    file_path = os.path.join(audio_dir, f"{audio_file.file_unique_id}.mp3")
    with open(file_path, "wb") as f:
        f.write(downloaded_file.getvalue())
    
    lesson = await create_lesson(
        title=data["title"],
        description=data.get("description", ""),
        audio_file_path=file_path,
        duration_minutes=data["duration_minutes"],
        lesson_number=data["lesson_number"],
        book_id=data["book_id"],
        teacher_id=data["teacher_id"],
        tags=data.get("tags", ""),
        is_active=True
    )
    
    await message.answer(
        f"‚úÖ –£—Ä–æ–∫ ¬´{lesson.title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤", callback_data="admin_lessons")]])
    )
    await state.clear()


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "admin_stats")
@admin_required
async def admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    themes = await get_all_themes()
    authors = await get_all_book_authors()
    teachers = await get_all_lesson_teachers()
    books = await get_all_books()
    lessons = await get_all_lessons()
    
    active_themes = len([t for t in themes if t.is_active])
    active_authors = len([a for a in authors if a.is_active])
    active_teachers = len([t for t in teachers if t.is_active])
    active_books = len([b for b in books if b.is_active])
    active_lessons = len([l for l in lessons if l.is_active])
    
    total_duration = sum(l.duration_minutes for l in lessons if l.is_active)
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üìö –¢–µ–º—ã: {active_themes}/{len(themes)}\n"
        f"‚úçÔ∏è –ê–≤—Ç–æ—Ä—ã: {active_authors}/{len(authors)}\n"
        f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: {active_teachers}/{len(teachers)}\n"
        f"üìñ –ö–Ω–∏–≥–∏: {active_books}/{len(books)}\n"
        f"üéß –£—Ä–æ–∫–∏: {active_lessons}/{len(lessons)}\n"
        f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {total_duration} –º–∏–Ω—É—Ç\n\n"
        f"üî• –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã / –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
    )
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(F.data == "admin_users")
@admin_required
async def admin_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await UserService.get_all_users(limit=50)
    
    builder = InlineKeyboardBuilder()
    
    if not users:
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
        await callback.message.edit_text(
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    admins = []
    moderators = []
    regular_users = []
    
    for user in users:
        if user.role and user.role.name == "admin":
            admins.append(user)
        elif user.role and user.role.name == "moderator":
            moderators.append(user)
        else:
            regular_users.append(user)
    
    text = "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
    
    if admins:
        text += f"üîπ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ({len(admins)})</b>\n"
        for user in admins[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
            status = "‚úÖ" if user.is_active else "‚ùå"
            text += f"{status} {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{user.username or 'no_username'}) - ID: {user.telegram_id}\n"
        if len(admins) > 5:
            text += f"... –∏ –µ—â–µ {len(admins) - 5}\n"
        text += "\n"
    
    if moderators:
        text += f"üîπ <b>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã ({len(moderators)})</b>\n"
        for user in moderators[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
            status = "‚úÖ" if user.is_active else "‚ùå"
            text += f"{status} {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{user.username or 'no_username'}) - ID: {user.telegram_id}\n"
        if len(moderators) > 5:
            text += f"... –∏ –µ—â–µ {len(moderators) - 5}\n"
        text += "\n"
    
    if regular_users:
        text += f"üîπ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(regular_users)})</b>\n"
        for user in regular_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
            status = "‚úÖ" if user.is_active else "‚ùå"
            text += f"{status} {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{user.username or 'no_username'}) - ID: {user.telegram_id}\n"
        if len(regular_users) > 5:
            text += f"... –∏ –µ—â–µ {len(regular_users) - 5}\n"
    
    builder.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user_role"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_panel"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "add_user_role")
@admin_required
async def add_user_role_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:\n\n"
        "<i>–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /id –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±–æ—Ç–∞–º–∏ –≤—Ä–æ–¥–µ @userinfobot</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]])
    )
    await state.set_state(UserStates.role)
    await callback.answer()


@router.message(UserStates.role)
@admin_required
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_id = int(message.text)
        user = await UserService.get_user_by_telegram_id(telegram_id)
        
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            user = await UserService.create_user(
                telegram_id=telegram_id,
                username=None,  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
                first_name=None,
                last_name=None,
                role_id=3  # –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏
        roles = await RoleService.get_all_roles()
        
        builder = InlineKeyboardBuilder()
        for role in roles:
            builder.add(InlineKeyboardButton(
                text=f"{role.name} ({role.description})",
                callback_data=f"set_role_{user.id}_{role.id}"
            ))
        
        builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users"))
        builder.adjust(1)
        
        current_role = user.role.name if user.role else "–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞"
        
        await message.answer(
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω</b>\n\n"
            f"ID: {user.telegram_id}\n"
            f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {current_role}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
            reply_markup=builder.as_markup()
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]])
        )


@router.callback_query(F.data.startswith("set_role_"))
@admin_required
async def set_user_role(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    parts = callback.data.split("_")
    user_id = int(parts[2])  # –≠—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π DB ID
    role_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É DB ID –∏ —Ä–æ–ª—å
    user = await UserService.get_user_by_id(user_id)
    role = await RoleService.get_role_by_id(role_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if not role:
        await callback.answer("‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É DB ID
    await UserService.update_user_role_by_id(user_id, role_id)

    await callback.answer(f"‚úÖ –†–æ–ª—å '{role.name}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", show_alert=True)
    await admin_users(callback)