"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from bot.models import Theme, Book, Lesson, LessonSeries


def get_main_keyboard(is_admin: bool = False) -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–∞—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        is_admin: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

    Returns:
        InlineKeyboardMarkup: –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    buttons = [
        [InlineKeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data="show_themes")],
        [InlineKeyboardButton(text="üìå –ó–∞–∫–ª–∞–¥–∫–∏", callback_data="bookmarks")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —É—Ä–æ–∫–æ–≤", callback_data="search_lessons")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about_project")],
        [InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="get_my_id")],
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if is_admin:
        buttons.append([InlineKeyboardButton(text="üõ†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="admin_panel")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏")],
            [KeyboardButton(text="‚úçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞–º–∏ –∫–Ω–∏–≥")],
            [KeyboardButton(text="üéôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∞–º–∏")],
            [KeyboardButton(text="üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞–º–∏")],
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )
    return keyboard


def get_themes_keyboard(themes: list[Theme], no_theme_books_count: int = 0) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º

    Args:
        themes: –°–ø–∏—Å–æ–∫ —Ç–µ–º
        no_theme_books_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –±–µ–∑ —Ç–µ–º—ã

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–µ–º–∞–º–∏
    """
    keyboard = []

    for theme in themes:
        keyboard.append([InlineKeyboardButton(
            text=f"üîπ {theme.name}",
            callback_data=f"theme_{theme.id}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ë–µ–∑ —Ç–µ–º—ã", –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–∏–≥–∏ –±–µ–∑ —Ç–µ–º—ã
    if no_theme_books_count > 0:
        keyboard.append([InlineKeyboardButton(
            text=f"üìÇ –ë–µ–∑ —Ç–µ–º—ã ({no_theme_books_count})",
            callback_data="theme_none"
        )])

    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_books_keyboard(books: list[Book]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–Ω–∏–≥

    Args:
        books: –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–∏–≥–∞–º–∏
    """
    keyboard = []

    for book in books:
        keyboard.append([InlineKeyboardButton(
            text=f"üìñ {book.display_name}",
            callback_data=f"book_{book.id}"
        )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º",
        callback_data="back_to_themes"
    )])
    keyboard.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_series_keyboard(series_list: list[LessonSeries], book_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–µ—Ä–∏–π –∫–Ω–∏–≥–∏

    Args:
        series_list: –°–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
        book_id: ID –∫–Ω–∏–≥–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å–µ—Ä–∏—è–º–∏
    """
    keyboard = []

    for series in series_list:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
        lessons_count = series.active_lessons_count
        text = f"üìÅ {series.year} - {series.name} ({lessons_count} —É—Ä–æ–∫–æ–≤)"
        keyboard.append([InlineKeyboardButton(
            text=text,
            callback_data=f"series_{series.id}"
        )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º",
        callback_data=f"theme_{book_id}"  # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–º–µ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–∏–≥–∏
    )])
    keyboard.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_series_menu_keyboard(series_id: int, has_test: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Å–µ—Ä–∏–∏ (–£—Ä–æ–∫–∏ / –û–±—â–∏–π —Ç–µ—Å—Ç / –ù–∞–∑–∞–¥)

    Args:
        series_id: ID —Å–µ—Ä–∏–∏
        has_test: –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —Å–µ—Ä–∏–∏

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —Å–µ—Ä–∏–∏
    """
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ "–£—Ä–æ–∫–∏"
    keyboard.append([InlineKeyboardButton(
        text="üéß –£—Ä–æ–∫–∏",
        callback_data=f"series_lessons_{series_id}"
    )])

    # –ö–Ω–æ–ø–∫–∞ "–û–±—â–∏–π —Ç–µ—Å—Ç" (–µ—Å–ª–∏ —Ç–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if has_test:
        keyboard.append([InlineKeyboardButton(
            text="üéì –û–±—â–∏–π —Ç–µ—Å—Ç",
            callback_data=f"general_test_{series_id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏—è–º",
        callback_data=f"back_to_series_list"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_lessons_keyboard(lessons: list[Lesson], series_id: int, has_tests: dict = None) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–∫–æ–≤ —Å–µ—Ä–∏–∏ (—Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥ –∫–∞–∂–¥—ã–º —É—Ä–æ–∫–æ–º)

    Args:
        lessons: –°–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        series_id: ID —Å–µ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        has_tests: –°–ª–æ–≤–∞—Ä—å {lesson_id: bool} - –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —É—Ä–æ–∫–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —É—Ä–æ–∫–∞–º–∏ –∏ —Ç–µ—Å—Ç–∞–º–∏
    """
    keyboard = []
    has_tests = has_tests or {}

    for lesson in lessons:
        title = lesson.display_title
        if lesson.duration_seconds:
            duration_formatted = lesson.formatted_duration
            title += f" ({duration_formatted})"

        # –ö–Ω–æ–ø–∫–∞ —É—Ä–æ–∫–∞
        keyboard.append([InlineKeyboardButton(
            text=f"üéß {title}",
            callback_data=f"lesson_{lesson.id}"
        )])

        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥ —É—Ä–æ–∫–æ–º (–µ—Å–ª–∏ —Ç–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if has_tests.get(lesson.id, False):
            keyboard.append([InlineKeyboardButton(
                text=f"üéì –¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É {lesson.lesson_number}",
                callback_data=f"lesson_test_{lesson.id}"
            )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–∏–∏",
        callback_data=f"series_{series_id}"
    )])
    keyboard.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_lesson_control_keyboard(lesson: Lesson, has_test: bool = False, has_bookmark: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º —É—Ä–æ–∫–∞

    Args:
        lesson: –û–±—ä–µ–∫—Ç —É—Ä–æ–∫–∞
        has_test: –ï—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —Å–µ—Ä–∏–∏ —É—Ä–æ–∫–∞
        has_bookmark: –ï—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —É—Ä–æ–∫

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    keyboard = []

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    nav_buttons.append(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π",
        callback_data=f"prev_{lesson.id}"
    ))
    nav_buttons.append(InlineKeyboardButton(
        text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
        callback_data=f"next_{lesson.id}"
    ))
    keyboard.append(nav_buttons)

    # –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ –∏ –∞–≤—Ç–æ—Ä–µ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ)
    book_author_buttons = []
    if lesson.book:
        book_author_buttons.append(InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ",
            callback_data=f"book_info_{lesson.book.id}"
        ))
    if lesson.book and lesson.book.author:
        book_author_buttons.append(InlineKeyboardButton(
            text="‚ÑπÔ∏è –û–± –∞–≤—Ç–æ—Ä–µ",
            callback_data=f"author_{lesson.book.author.id}"
        ))
    if book_author_buttons:
        keyboard.append(book_author_buttons)

    # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
    if lesson.teacher:
        keyboard.append([InlineKeyboardButton(
            text="‚ÑπÔ∏è –û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ",
            callback_data=f"teacher_{lesson.teacher.id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if has_test:
        keyboard.append([InlineKeyboardButton(
            text="üéì –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É",
            callback_data=f"lesson_test_{lesson.id}"
        )])

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏ (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞)
    if has_bookmark:
        keyboard.append([InlineKeyboardButton(
            text="‚ûñ –í –∑–∞–∫–ª–∞–¥–∫–∞—Ö",
            callback_data=f"remove_bookmark_{lesson.id}"
        )])
    else:
        keyboard.append([InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–ª–∞–¥–∫–∏",
            callback_data=f"add_bookmark_{lesson.id}"
        )])

    # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—Ç
    keyboard.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ö —É—Ä–æ–∫–∞–º",
        callback_data=f"back_to_series_lessons_{lesson.series_id}"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_back_to_themes_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–µ–º–∞–º
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º",
                callback_data="back_to_themes"
            )]
        ]
    )
    return keyboard


def get_back_to_books_keyboard(theme_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–Ω–∏–≥–∞–º
    
    Args:
        theme_id: ID —Ç–µ–º—ã
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–Ω–∏–≥–∞–º",
                callback_data=f"back_to_books_{theme_id}"
            )]
        ]
    )
    return keyboard


def get_search_results_keyboard(lessons: list[Lesson], query: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞

    Args:
        lessons: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    keyboard = []

    for lesson in lessons:
        title = lesson.display_title
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ –∏ —Ç–µ–º–µ
        title += f"\nüìñ {lesson.book_title} | üîπ {lesson.theme_name}"

        keyboard.append([InlineKeyboardButton(
            text=f"üéß {title}",
            callback_data=f"lesson_{lesson.id}"
        )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    keyboard.append([InlineKeyboardButton(
        text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
        callback_data="search_lessons"
    )])
    keyboard.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="main_menu"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    
    Returns:
        ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    return keyboard


def get_confirm_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_no")
            ]
        ]
    )
    return keyboard