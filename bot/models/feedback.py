from datetime import datetime
from typing import TYPE_CHECKING, Optional

from sqlalchemy import String, Text, ForeignKey, BigInteger
from sqlalchemy.orm import Mapped, mapped_column, relationship

from bot.models.database import Base
from bot.utils.timezone_utils import get_moscow_now

if TYPE_CHECKING:
    from bot.models.user import User


class Feedback(Base):
    """
    –ú–æ–¥–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    –°—Ç–∞—Ç—É—Å—ã:
    - new: üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    - replied: ‚úÖ –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª
    - closed: üîí –û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ
    """
    __tablename__ = "feedbacks"

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"), index=True)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_text: Mapped[str] = mapped_column(Text, nullable=False)

    # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å NULL)
    admin_reply: Mapped[Optional[str]] = mapped_column(Text, nullable=True)

    # –°—Ç–∞—Ç—É—Å: new, replied, closed
    status: Mapped[str] = mapped_column(String(20), default="new", nullable=False, index=True)

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at: Mapped[datetime] = mapped_column(default=get_moscow_now, nullable=False)
    replied_at: Mapped[Optional[datetime]] = mapped_column(nullable=True)
    closed_at: Mapped[Optional[datetime]] = mapped_column(nullable=True)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user: Mapped["User"] = relationship(back_populates="feedbacks")

    def __repr__(self) -> str:
        return f"<Feedback(id={self.id}, user_id={self.user_id}, status='{self.status}')>"

    @property
    def status_emoji(self) -> str:
        """–≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            "new": "üÜï",
            "replied": "‚úÖ",
            "closed": "üîí"
        }
        return status_map.get(self.status, "‚ùì")

    @property
    def status_name(self) -> str:
        """–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            "new": "–ù–æ–≤–æ–µ",
            "replied": "–û—Ç–≤–µ—á–µ–Ω–æ",
            "closed": "–ó–∞–∫—Ä—ã—Ç–æ"
        }
        return status_map.get(self.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
