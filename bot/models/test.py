"""
–ú–æ–¥–µ–ª—å —Ç–µ—Å—Ç–æ–≤
"""
from datetime import datetime
from typing import TYPE_CHECKING, Optional
from enum import Enum

from sqlalchemy import String, Text, Integer, Boolean, DateTime, ForeignKey, Enum as SQLEnum, CheckConstraint
from sqlalchemy.orm import Mapped, mapped_column, relationship

from bot.models.database import Base
from bot.utils.timezone_utils import get_moscow_now

if TYPE_CHECKING:
    from bot.models.lesson import Lesson
    from bot.models.lesson_series import LessonSeries
    from bot.models.lesson_teacher import LessonTeacher
    from bot.models.test_question import TestQuestion
    from bot.models.test_attempt import TestAttempt


class TestType(str, Enum):
    """–¢–∏–ø —Ç–µ—Å—Ç–∞"""
    LESSON = "lesson"  # –¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É
    SERIES = "series"  # –¢–µ—Å—Ç –ø–æ –≤—Å–µ–π —Å–µ—Ä–∏–∏


class Test(Base):
    """–ú–æ–¥–µ–ª—å —Ç–µ—Å—Ç–∞"""

    __tablename__ = "tests"
    __table_args__ = (
        CheckConstraint(
            "(test_type = 'lesson' AND lesson_id IS NOT NULL AND series_id IS NULL) OR "
            "(test_type = 'series' AND series_id IS NOT NULL AND lesson_id IS NULL)",
            name="check_test_type_consistency"
        ),
    )

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    title: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str | None] = mapped_column(Text, nullable=True)

    # –¢–∏–ø —Ç–µ—Å—Ç–∞
    test_type: Mapped[TestType] = mapped_column(
        SQLEnum(TestType, native_enum=False, length=50),
        nullable=False,
        index=True
    )

    # –°–≤—è–∑–∏ —Å —É—Ä–æ–∫–æ–º –∏–ª–∏ —Å–µ—Ä–∏–µ–π (–æ–¥–Ω–æ –∏–∑ –¥–≤—É—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    lesson_id: Mapped[int | None] = mapped_column(
        Integer,
        ForeignKey("lessons.id", ondelete="CASCADE"),
        nullable=True,
        index=True
    )
    series_id: Mapped[int | None] = mapped_column(
        Integer,
        ForeignKey("lesson_series.id", ondelete="CASCADE"),
        nullable=True,
        index=True
    )

    # –°–æ–∑–¥–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–∞ (–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
    teacher_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("lesson_teachers.id", ondelete="RESTRICT"),
        nullable=False,
        index=True
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞
    passing_score: Mapped[int] = mapped_column(Integer, default=70)  # –ü—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (70%)
    time_per_question_seconds: Mapped[int] = mapped_column(Integer, default=30)  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤–æ–ø—Ä–æ—Å
    questions_count: Mapped[int] = mapped_column(Integer, default=0)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–µ—Ç—Å—è

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    is_active: Mapped[bool] = mapped_column(Boolean, default=True, index=True)
    order: Mapped[int] = mapped_column(Integer, default=0)  # –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    created_at: Mapped[datetime] = mapped_column(DateTime, default=get_moscow_now)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=get_moscow_now, onupdate=get_moscow_now)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    lesson: Mapped["Lesson | None"] = relationship(back_populates="tests", foreign_keys=[lesson_id])
    series: Mapped["LessonSeries | None"] = relationship(back_populates="tests", foreign_keys=[series_id])
    teacher: Mapped["LessonTeacher"] = relationship(back_populates="tests")
    questions: Mapped[list["TestQuestion"]] = relationship(
        back_populates="test",
        cascade="all, delete-orphan",
        order_by="TestQuestion.order"
    )
    attempts: Mapped[list["TestAttempt"]] = relationship(back_populates="test", cascade="all, delete-orphan")

    def __repr__(self) -> str:
        return f"<Test(id={self.id}, title='{self.title}', type={self.test_type})>"

    def __str__(self) -> str:
        return self.title

    @property
    def display_title(self) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
        if self.test_type == TestType.LESSON and self.lesson:
            return f"–¢–µ—Å—Ç: {self.lesson.title}"
        elif self.test_type == TestType.SERIES and self.series:
            return f"–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç: {self.series.display_name}"
        return self.title

    @property
    def total_time_seconds(self) -> int:
        """–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç–µ—Å—Ç"""
        return self.questions_count * self.time_per_question_seconds

    @property
    def formatted_time(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞"""
        total = self.total_time_seconds
        minutes = total // 60
        seconds = total % 60

        if minutes > 0:
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        return f"{seconds} —Å–µ–∫"

    @property
    def max_score(self) -> int:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª (–∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å = 1 –±–∞–ª–ª)"""
        return self.questions_count

    @property
    def passing_points(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
        return int(self.max_score * self.passing_score / 100)

    @property
    def attempts_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
        return len(self.attempts) if self.attempts else 0

    @property
    def passed_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π"""
        return len([a for a in self.attempts if a.passed]) if self.attempts else 0

    @property
    def full_info(self) -> str:
        """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ"""
        info = f"üìù {self.display_title}\n\n"

        if self.description:
            info += f"{self.description}\n\n"

        info += f"‚ùì –í–æ–ø—Ä–æ—Å–æ–≤: {self.questions_count}\n"
        info += f"‚è± –í—Ä–µ–º—è: {self.formatted_time} ({self.time_per_question_seconds} —Å–µ–∫/–≤–æ–ø—Ä–æ—Å)\n"
        info += f"‚úÖ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {self.passing_score}% ({self.passing_points}/{self.max_score} –±–∞–ª–ª–æ–≤)\n"
        info += f"üîÑ –ü–æ–ø—ã—Ç–æ–∫: –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (–∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ª—É—á—à–∞—è)\n"

        if self.test_type == TestType.SERIES:
            info += f"\n‚ö†Ô∏è –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ —É—Ä–æ–∫–∞–º —Å–µ—Ä–∏–∏"

        return info
