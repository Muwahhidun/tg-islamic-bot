"""
–ú–æ–¥–µ–ª—å –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
"""
from datetime import datetime
from typing import TYPE_CHECKING, Optional

from sqlalchemy import Integer, Boolean, DateTime, ForeignKey, JSON
from sqlalchemy.orm import Mapped, mapped_column, relationship

from bot.models.database import Base
from bot.utils.timezone_utils import get_moscow_now

if TYPE_CHECKING:
    from bot.models.test import Test
    from bot.models.user import User


class TestAttempt(Base):
    """–ú–æ–¥–µ–ª—å –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""

    __tablename__ = "test_attempts"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    # –°–≤—è–∑–∏
    user_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    test_id: Mapped[int] = mapped_column(
        Integer,
        ForeignKey("tests.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )

    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    started_at: Mapped[datetime] = mapped_column(DateTime, default=get_moscow_now, nullable=False)
    completed_at: Mapped[datetime | None] = mapped_column(DateTime, nullable=True)  # NULL = –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    score: Mapped[int] = mapped_column(Integer, default=0)  # –ù–∞–±—Ä–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã
    max_score: Mapped[int] = mapped_column(Integer, nullable=False)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã
    passed: Mapped[bool] = mapped_column(Boolean, default=False, index=True)  # –ü—Ä–æ—à—ë–ª –ª–∏ —Ç–µ—Å—Ç

    # –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (JSON)
    # –§–æ—Ä–º–∞—Ç: {"question_1": 0, "question_2": 2, ...}  –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    answers: Mapped[dict] = mapped_column(JSON, nullable=True)

    # –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    time_spent_seconds: Mapped[int | None] = mapped_column(Integer, nullable=True)

    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    user: Mapped["User"] = relationship(back_populates="test_attempts")
    test: Mapped["Test"] = relationship(back_populates="attempts")

    def __repr__(self) -> str:
        return f"<TestAttempt(id={self.id}, user_id={self.user_id}, test_id={self.test_id}, score={self.score}/{self.max_score})>"

    @property
    def is_completed(self) -> bool:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –ø–æ–ø—ã—Ç–∫–∞"""
        return self.completed_at is not None

    @property
    def score_percentage(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        if self.max_score == 0:
            return 0.0
        return round((self.score / self.max_score) * 100, 1)

    @property
    def formatted_time_spent(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
        if not self.time_spent_seconds:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

        minutes = self.time_spent_seconds // 60
        seconds = self.time_spent_seconds % 60

        if minutes > 0:
            return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        return f"{seconds} —Å–µ–∫"

    @property
    def result_summary(self) -> str:
        """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω" if self.passed else "‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω"
        return f"{status}\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.score}/{self.max_score} ({self.score_percentage}%)"

    @property
    def full_result(self) -> str:
        """–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ"""
        info = f"{'‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if self.passed else '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù'}\n\n"
        info += f"üìä –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.score}/{self.max_score} –±–∞–ª–ª–æ–≤ ({self.score_percentage}%)\n"
        info += f"‚úÖ –î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ: {self.test.passing_score}%\n"

        if self.time_spent_seconds:
            info += f"‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {self.formatted_time_spent}\n"

        if not self.passed:
            info += f"\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ."

        return info
