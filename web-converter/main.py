"""
–í–µ–±-—Å–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã (–¥–æ 2 –ì–ë) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ MP3
"""
import os
import sys
import logging
import asyncio
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç –±–æ—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

from fastapi import FastAPI, File, UploadFile, HTTPException, Form, Request, Depends, Cookie
from fastapi.responses import FileResponse, HTMLResponse, Response, RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBasic, HTTPBasicCredentials
import uvicorn
import secrets
import hashlib
import time

from bot.utils.audio_converter import convert_to_mp3_auto, get_audio_duration, calculate_optimal_bitrate
from bot.utils.formatters import format_duration, format_file_size
from bot.utils.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="Audio Converter API",
    description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞",
    version="1.0.0"
)

# CORS –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ 401 –æ—à–∏–±–∫–∏ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞, JSON –¥–ª—è API
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    if exc.status_code == 401:
        # –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
        if request.url.path.startswith("/convert") or request.url.path.startswith("/download"):
            return Response(
                content='{"detail":"–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"}',
                status_code=401,
                media_type="application/json"
            )
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
        return RedirectResponse(url="/login")
    raise exc

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = Path("web-converter/uploads")
CONVERTED_DIR = Path("web-converter/converted")
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)
CONVERTED_DIR.mkdir(parents=True, exist_ok=True)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (2 –ì–ë)
MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024  # 2 GB

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
active_sessions = {}

def generate_session_token(username: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    timestamp = str(time.time())
    raw = f"{username}:{timestamp}:{secrets.token_urlsafe(32)}"
    return hashlib.sha256(raw.encode()).hexdigest()

def verify_session(session_token: Optional[str] = Cookie(None, alias="session_token")) -> str:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Å—Å–∏–∏"""
    if not session_token or session_token not in active_sessions:
        raise HTTPException(status_code=401, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    return active_sessions[session_token]


@app.get("/login", response_class=HTMLResponse)
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–í—Ö–æ–¥ - –ê—É–¥–∏–æ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }

            .login-container {
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                padding: 40px;
                width: 100%;
                max-width: 400px;
                animation: slideIn 0.5s ease-out;
            }

            @keyframes slideIn {
                from {
                    opacity: 0;
                    transform: translateY(-30px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .login-header {
                text-align: center;
                margin-bottom: 30px;
            }

            .login-header h1 {
                font-size: 28px;
                color: #333;
                margin-bottom: 10px;
            }

            .login-header .icon {
                font-size: 60px;
                margin-bottom: 15px;
            }

            .login-header p {
                color: #666;
                font-size: 14px;
            }

            .form-group {
                margin-bottom: 20px;
            }

            .form-group label {
                display: block;
                margin-bottom: 8px;
                color: #333;
                font-weight: 500;
                font-size: 14px;
            }

            .form-group input {
                width: 100%;
                padding: 12px 16px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s;
                font-family: inherit;
            }

            .form-group input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

            .form-group input::placeholder {
                color: #999;
            }

            .btn-login {
                width: 100%;
                padding: 14px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s;
                margin-top: 10px;
            }

            .btn-login:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
            }

            .btn-login:active {
                transform: translateY(0);
            }

            .error-message {
                background: #fee;
                color: #c33;
                padding: 12px;
                border-radius: 8px;
                margin-bottom: 20px;
                font-size: 14px;
                display: none;
                animation: shake 0.5s;
            }

            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-10px); }
                75% { transform: translateX(10px); }
            }

            .error-message.show {
                display: block;
            }

            @media (max-width: 480px) {
                .login-container {
                    padding: 30px 20px;
                }

                .login-header h1 {
                    font-size: 24px;
                }
            }
        </style>
    </head>
    <body>
        <div class="login-container">
            <div class="login-header">
                <div class="icon">üéµ</div>
                <h1>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h1>
                <p>–ê—É–¥–∏–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –±–æ—Ç–∞</p>
            </div>

            <div class="error-message" id="errorMessage"></div>

            <form id="loginForm" method="POST" action="/login">
                <div class="form-group">
                    <label for="username">–õ–æ–≥–∏–Ω</label>
                    <input type="text" id="username" name="username" placeholder="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω" required autofocus>
                </div>

                <div class="form-group">
                    <label for="password">–ü–∞—Ä–æ–ª—å</label>
                    <input type="password" id="password" name="password" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required>
                </div>

                <button type="submit" class="btn-login">–í–æ–π—Ç–∏</button>
            </form>
        </div>

        <script>
            const form = document.getElementById('loginForm');
            const errorMessage = document.getElementById('errorMessage');

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const formData = new FormData(form);

                try {
                    const response = await fetch('/login', {
                        method: 'POST',
                        body: formData
                    });

                    if (response.ok) {
                        window.location.href = '/';
                    } else {
                        const data = await response.json();
                        errorMessage.textContent = data.detail || '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
                        errorMessage.classList.add('show');

                        setTimeout(() => {
                            errorMessage.classList.remove('show');
                        }, 3000);
                    }
                } catch (error) {
                    errorMessage.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É';
                    errorMessage.classList.add('show');
                }
            });
        </script>
    </body>
    </html>
    """


@app.post("/login")
async def login(username: str = Form(...), password: str = Form(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if username == config.web_converter_login and password == config.web_converter_password:
        session_token = generate_session_token(username)
        active_sessions[session_token] = username

        response = RedirectResponse(url="/", status_code=303)
        response.set_cookie(
            key="session_token",
            value=session_token,
            httponly=True,
            max_age=86400 * 7,  # 7 –¥–Ω–µ–π
            samesite="lax"
        )
        return response
    else:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")


@app.get("/logout")
async def logout(session_token: Optional[str] = Cookie(None, alias="session_token")):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    if session_token and session_token in active_sessions:
        del active_sessions[session_token]

    response = RedirectResponse(url="/login")
    response.delete_cookie("session_token")
    return response


@app.get("/manifest.json")
async def get_manifest(username: str = Depends(verify_session)):
    """PWA Manifest –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π"""
    return {
        "name": "–ê—É–¥–∏–æ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä - –ò—Å–ª–∞–º—Å–∫–∏–π –ë–æ—Ç",
        "short_name": "–ê—É–¥–∏–æ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä",
        "description": "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞",
        "start_url": "/",
        "display": "standalone",
        "background_color": "#667eea",
        "theme_color": "#667eea",
        "orientation": "portrait",
        "icons": [
            {
                "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect fill='%23667eea' width='100' height='100'/%3E%3Ctext y='75' font-size='70' fill='white' text-anchor='middle' x='50'%3Eüéµ%3C/text%3E%3C/svg%3E",
                "sizes": "192x192",
                "type": "image/svg+xml"
            },
            {
                "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect fill='%23667eea' width='100' height='100'/%3E%3Ctext y='75' font-size='70' fill='white' text-anchor='middle' x='50'%3Eüéµ%3C/text%3E%3C/svg%3E",
                "sizes": "512x512",
                "type": "image/svg+xml"
            }
        ]
    }


@app.get("/sw.js")
async def get_service_worker(username: str = Depends(verify_session)):
    """Service Worker –¥–ª—è PWA"""
    return HTMLResponse(content="""
// Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_NAME = 'audio-converter-v1';
const urlsToCache = [
  '/',
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
  );
});

self.addEventListener('fetch', event => {
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});
""", media_type="application/javascript")


@app.get("/", response_class=HTMLResponse)
async def read_root(username: str = Depends(verify_session)):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    return """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <meta name="theme-color" content="#667eea">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
        <meta name="apple-mobile-web-app-title" content="–ê—É–¥–∏–æ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä">
        <meta name="description" content="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞">
        <link rel="manifest" href="/manifest.json">
        <link rel="apple-touch-icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect fill='%23667eea' width='100' height='100'/%3E%3Ctext y='75' font-size='70' fill='white' text-anchor='middle' x='50'%3Eüéµ%3C/text%3E%3C/svg%3E">
        <title>–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞—É–¥–∏–æ –¥–ª—è –∏—Å–ª–∞–º—Å–∫–æ–≥–æ –±–æ—Ç–∞</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }

            .container {
                background: white;
                border-radius: 20px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                padding: 40px;
                max-width: 600px;
                width: 100%;
            }

            h1 {
                color: #333;
                margin-bottom: 10px;
                font-size: 28px;
                text-align: center;
            }

            .subtitle {
                color: #666;
                text-align: center;
                margin-bottom: 30px;
                font-size: 14px;
            }

            .upload-area {
                border: 3px dashed #667eea;
                border-radius: 15px;
                padding: 40px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s;
                margin-bottom: 20px;
                background: #f8f9ff;
            }

            .upload-area:hover {
                background: #eef1ff;
                border-color: #764ba2;
            }

            .upload-area.dragover {
                background: #e0e7ff;
                border-color: #764ba2;
                transform: scale(1.02);
            }

            .upload-icon {
                font-size: 50px;
                margin-bottom: 15px;
            }

            .upload-text {
                color: #667eea;
                font-weight: bold;
                margin-bottom: 5px;
            }

            .upload-hint {
                color: #999;
                font-size: 13px;
            }

            input[type="file"] {
                display: none;
            }

            .bitrate-selector {
                margin-bottom: 20px;
            }

            .bitrate-selector label {
                display: block;
                margin-bottom: 10px;
                color: #333;
                font-weight: bold;
            }

            .bitrate-options {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
                gap: 10px;
            }

            .bitrate-option {
                padding: 15px;
                border: 2px solid #e0e0e0;
                border-radius: 10px;
                cursor: pointer;
                transition: all 0.2s;
                text-align: center;
            }

            .bitrate-option:hover {
                border-color: #667eea;
                background: #f8f9ff;
            }

            .bitrate-option input {
                display: none;
            }

            .bitrate-option input:checked + label {
                color: #667eea;
                font-weight: bold;
            }

            .bitrate-option input:checked ~ .bitrate-parent {
                border-color: #667eea;
                background: #eef1ff;
            }

            .convert-btn {
                width: 100%;
                padding: 15px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 10px;
                font-size: 16px;
                font-weight: bold;
                cursor: pointer;
                transition: transform 0.2s;
            }

            .convert-btn:hover {
                transform: translateY(-2px);
            }

            .convert-btn:disabled {
                background: #ccc;
                cursor: not-allowed;
                transform: none;
            }

            .progress-container {
                display: none;
                margin-top: 20px;
            }

            .progress-bar {
                width: 100%;
                height: 30px;
                background: #f0f0f0;
                border-radius: 15px;
                overflow: hidden;
                margin-bottom: 10px;
            }

            .progress-fill {
                height: 100%;
                background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                transition: width 0.3s;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-weight: bold;
            }

            .file-info {
                background: #f8f9ff;
                border-radius: 10px;
                padding: 15px;
                margin-top: 20px;
                display: none;
            }

            .file-info-item {
                display: flex;
                justify-content: space-between;
                padding: 8px 0;
                border-bottom: 1px solid #e0e0e0;
            }

            .file-info-item:last-child {
                border-bottom: none;
            }

            .download-section {
                display: none;
                margin-top: 20px;
                text-align: center;
            }

            .download-btn {
                display: inline-block;
                padding: 15px 40px;
                background: #28a745;
                color: white;
                text-decoration: none;
                border-radius: 10px;
                font-weight: bold;
                transition: transform 0.2s;
            }

            .download-btn:hover {
                transform: translateY(-2px);
            }

            .error-message {
                background: #fee;
                border: 1px solid #fcc;
                color: #c00;
                padding: 15px;
                border-radius: 10px;
                margin-top: 20px;
                display: none;
            }

            /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
            @media (max-width: 768px) {
                body {
                    padding: 10px;
                }

                .container {
                    padding: 20px;
                    border-radius: 15px;
                }

                h1 {
                    font-size: 24px;
                }

                .subtitle {
                    font-size: 14px;
                }

                .upload-area {
                    padding: 30px 20px;
                }

                .upload-icon {
                    font-size: 48px;
                }

                .upload-text {
                    font-size: 16px;
                }

                .upload-hint {
                    font-size: 12px;
                }

                .bitrate-selector label {
                    font-size: 14px;
                }

                .bitrate-options {
                    gap: 8px;
                }

                .bitrate-btn {
                    padding: 10px 15px;
                    font-size: 14px;
                }

                .convert-btn {
                    padding: 12px;
                    font-size: 16px;
                }

                .file-info {
                    padding: 15px;
                }

                .download-section {
                    padding: 15px;
                }
            }

            /* –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ */
            @media (max-width: 400px) {
                .container {
                    padding: 15px;
                }

                h1 {
                    font-size: 20px;
                }

                .upload-area {
                    padding: 20px 15px;
                }

                .bitrate-options {
                    flex-direction: column;
                    gap: 10px;
                }

                .bitrate-btn {
                    width: 100%;
                }
            }

            /* –ü–æ–¥–¥–µ—Ä–∂–∫–∞ safe area –¥–ª—è iPhone —Å –≤—ã—Ä–µ–∑–æ–º */
            @supports (padding: max(0px)) {
                body {
                    padding-left: max(20px, env(safe-area-inset-left));
                    padding-right: max(20px, env(safe-area-inset-right));
                    padding-bottom: max(20px, env(safe-area-inset-bottom));
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéµ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –ê—É–¥–∏–æ</h1>
            <p class="subtitle">–î–ª—è –∏—Å–ª–∞–º—Å–∫–æ–≥–æ Telegram –±–æ—Ç–∞ —É—Ä–æ–∫–æ–≤</p>

            <div class="upload-area" id="uploadArea">
                <div class="upload-icon">üìÅ</div>
                <div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞</div>
                <div class="upload-hint">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP3, WAV, OGG, FLAC, M4A, AAC –∏ –¥—Ä—É–≥–∏–µ<br>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 2 –ì–ë</div>
                <input type="file" id="fileInput" accept="audio/*">
            </div>

            <div class="bitrate-selector">
                <label>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ (–±–∏—Ç—Ä–µ–π—Ç):</label>
                <div class="bitrate-options">
                    <div class="bitrate-option bitrate-parent">
                        <input type="radio" name="bitrate" value="64" id="bitrate64" checked>
                        <label for="bitrate64">
                            <strong>64 kbps</strong><br>
                            <small>–î–æ 40 –º–∏–Ω</small>
                        </label>
                    </div>
                    <div class="bitrate-option bitrate-parent">
                        <input type="radio" name="bitrate" value="48" id="bitrate48">
                        <label for="bitrate48">
                            <strong>48 kbps</strong><br>
                            <small>–î–æ 1 —á–∞—Å–∞</small>
                        </label>
                    </div>
                    <div class="bitrate-option bitrate-parent">
                        <input type="radio" name="bitrate" value="32" id="bitrate32">
                        <label for="bitrate32">
                            <strong>32 kbps</strong><br>
                            <small>–î–æ 1.5 —á–∞—Å–æ–≤</small>
                        </label>
                    </div>
                    <div class="bitrate-option bitrate-parent">
                        <input type="radio" name="bitrate" value="auto" id="bitrateAuto">
                        <label for="bitrateAuto">
                            <strong>–ê–≤—Ç–æ</strong><br>
                            <small>–ü–æ–¥–æ–±—Ä–∞—Ç—å</small>
                        </label>
                    </div>
                </div>
            </div>

            <button class="convert-btn" id="convertBtn" disabled>–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å</button>

            <div class="progress-container" id="progressContainer">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill">0%</div>
                </div>
                <div id="statusText" style="text-align: center; color: #666;"></div>
            </div>

            <div class="file-info" id="fileInfo"></div>

            <div class="download-section" id="downloadSection">
                <a href="#" class="download-btn" id="downloadBtn" download>üì• –°–∫–∞—á–∞—Ç—å MP3</a>
            </div>

            <div class="error-message" id="errorMessage"></div>
        </div>

        <script>
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');
            const convertBtn = document.getElementById('convertBtn');
            const progressContainer = document.getElementById('progressContainer');
            const progressFill = document.getElementById('progressFill');
            const statusText = document.getElementById('statusText');
            const fileInfo = document.getElementById('fileInfo');
            const downloadSection = document.getElementById('downloadSection');
            const downloadBtn = document.getElementById('downloadBtn');
            const errorMessage = document.getElementById('errorMessage');

            let selectedFile = null;

            // Drag & Drop
            uploadArea.addEventListener('click', () => fileInput.click());
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('dragover');
            });
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    handleFileSelect(files[0]);
                }
            });

            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFileSelect(e.target.files[0]);
                }
            });

            function handleFileSelect(file) {
                selectedFile = file;
                convertBtn.disabled = false;
                uploadArea.querySelector('.upload-text').textContent = `–í—ã–±—Ä–∞–Ω: ${file.name}`;
                uploadArea.querySelector('.upload-hint').textContent = `–†–∞–∑–º–µ—Ä: ${formatFileSize(file.size)}`;
            }

            convertBtn.addEventListener('click', async () => {
                if (!selectedFile) return;

                const bitrate = document.querySelector('input[name="bitrate"]:checked').value;

                convertBtn.disabled = true;
                progressContainer.style.display = 'block';
                downloadSection.style.display = 'none';
                errorMessage.style.display = 'none';
                fileInfo.style.display = 'none';

                const formData = new FormData();
                formData.append('file', selectedFile);
                formData.append('bitrate', bitrate);

                let progressInterval; // –û–±—ä—è–≤–ª—è–µ–º —Å–Ω–∞—Ä—É–∂–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch

                try {
                    updateProgress(10, '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤–æ –≤—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    let currentProgress = 10;
                    progressInterval = setInterval(() => {
                        if (currentProgress < 90) {
                            currentProgress += 5;
                            updateProgress(currentProgress, '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP3...');
                        }
                    }, 500); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500–º—Å

                    const response = await fetch('/convert', {
                        method: 'POST',
                        body: formData
                    });

                    clearInterval(progressInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é

                    if (!response.ok) {
                        // –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
                        if (response.status === 401) {
                            window.location.href = '/login';
                            return;
                        }
                        const error = await response.json();
                        throw new Error(error.detail || '–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
                    }

                    const result = await response.json();

                    updateProgress(100, '–ì–æ—Ç–æ–≤–æ!');

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                    showFileInfo(result);

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                    downloadBtn.href = `/download/${result.filename}`;
                    downloadSection.style.display = 'block';

                } catch (error) {
                    if (progressInterval) clearInterval(progressInterval); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    errorMessage.textContent = `–û—à–∏–±–∫–∞: ${error.message}`;
                    errorMessage.style.display = 'block';
                    progressContainer.style.display = 'none';
                } finally {
                    convertBtn.disabled = false;
                }
            });

            function updateProgress(percent, text) {
                progressFill.style.width = percent + '%';
                progressFill.textContent = percent + '%';
                statusText.textContent = text;
            }

            function showFileInfo(data) {
                fileInfo.innerHTML = `
                    <div class="file-info-item">
                        <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                        <strong>${data.duration}</strong>
                    </div>
                    <div class="file-info-item">
                        <span>–ë–∏—Ç—Ä–µ–π—Ç MP3:</span>
                        <strong>${data.bitrate} kbps</strong>
                    </div>
                    <div class="file-info-item">
                        <span>–†–∞–∑–º–µ—Ä MP3:</span>
                        <strong>${data.mp3_size}</strong>
                    </div>
                    <div class="file-info-item">
                        <span>–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:</span>
                        <strong>${data.original_size}</strong>
                    </div>
                `;
                fileInfo.style.display = 'block';
            }

            function formatFileSize(bytes) {
                if (bytes < 1024) return bytes + ' –ë';
                if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' –ö–ë';
                if (bytes < 1024 * 1024 * 1024) return (bytes / (1024 * 1024)).toFixed(1) + ' –ú–ë';
                return (bytes / (1024 * 1024 * 1024)).toFixed(1) + ' –ì–ë';
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –¥–ª—è PWA
            if ('serviceWorker' in navigator) {
                window.addEventListener('load', () => {
                    navigator.serviceWorker.register('/sw.js')
                        .then(registration => console.log('PWA: Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'))
                        .catch(err => console.log('PWA: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker', err));
                });
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
            let deferredPrompt;
            window.addEventListener('beforeinstallprompt', (e) => {
                e.preventDefault();
                deferredPrompt = e;
                console.log('PWA: –ì–æ—Ç–æ–≤–æ –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
            });
        </script>
    </body>
    </html>
    """


@app.post("/convert")
async def convert_audio(
    file: UploadFile = File(...),
    bitrate: str = Form("64"),
    username: str = Depends(verify_session)
):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≤ MP3

    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        bitrate: –ë–∏—Ç—Ä–µ–π—Ç (64, 48, 32 –∏–ª–∏ auto)

    Returns:
        JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
    """
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file.filename}, —Ä–∞–∑–º–µ—Ä: {file.size if hasattr(file, 'size') else 'unknown'}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        file_ext = Path(file.filename).suffix
        temp_filename = f"temp_{os.urandom(8).hex()}{file_ext}"
        temp_path = UPLOAD_DIR / temp_filename

        with open(temp_path, "wb") as f:
            content = await file.read()
            f.write(content)

        original_size = os.path.getsize(temp_path)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {temp_path}, —Ä–∞–∑–º–µ—Ä: {original_size} –±–∞–π—Ç")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∏—Ç—Ä–µ–π—Ç
        if bitrate == "auto":
            duration = await get_audio_duration(str(temp_path))
            if duration:
                preferred_bitrate = await calculate_optimal_bitrate(duration)
            else:
                preferred_bitrate = 64
        else:
            preferred_bitrate = int(bitrate)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞)
        original_name = Path(file.filename).stem  # –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        # –î–æ–±–∞–≤–ª—è–µ–º timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        import time
        timestamp = int(time.time())
        output_filename = f"{original_name}_{timestamp}.mp3"
        output_path = CONVERTED_DIR / output_filename

        success, error, used_bitrate = await convert_to_mp3_auto(
            str(temp_path),
            str(output_path),
            preferred_bitrate=preferred_bitrate
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)

        if not success:
            raise HTTPException(status_code=400, detail=error)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        duration_seconds = await get_audio_duration(str(output_path))
        mp3_size = os.path.getsize(output_path)

        result = {
            "filename": output_filename,
            "duration": format_duration(duration_seconds) if duration_seconds else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "bitrate": used_bitrate or preferred_bitrate,
            "mp3_size": format_file_size(mp3_size),
            "original_size": format_file_size(original_size)
        }

        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {result}")
        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/download/{filename}")
async def download_file(filename: str, username: str = Depends(verify_session)):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    file_path = CONVERTED_DIR / filename

    if not file_path.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return FileResponse(
        path=file_path,
        filename=filename,
        media_type="audio/mpeg"
    )


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {"status": "ok", "service": "audio-converter"}


if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=1992,
        reload=True,
        log_level="info"
    )
