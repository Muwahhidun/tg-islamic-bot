"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã lesson_series
–∏ –º–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ lessons

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—É lesson_series
2. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ series_id –≤ —Ç–∞–±–ª–∏—Ü—É lessons
3. –°–æ–∑–¥–∞—ë—Ç —Å–ª—É–∂–µ–±–Ω—É—é —Å–µ—Ä–∏—é "–ë–µ–∑ —Å–µ—Ä–∏–∏"
4. –ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—Ä–æ–∫–∏ –≤ —Å–µ—Ä–∏–∏
5. –î–µ–ª–∞–µ—Ç –ø–æ–ª—è series_year –∏ series_name nullable (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ)
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from sqlalchemy import select, text, and_
from sqlalchemy.ext.asyncio import create_async_engine
from bot.models.database import async_session_maker, Base
from bot.models import LessonSeries, Lesson, LessonTeacher
from bot.utils.timezone_utils import get_moscow_now


async def run_migration():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏"""

    print("=" * 60)
    print("–ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ lesson_series")
    print("=" * 60)
    print()

    async with async_session_maker() as session:
        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É lesson_series —á–µ—Ä–µ–∑ SQLAlchemy
            print("–®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã lesson_series...")
            from bot.models.database import engine
            async with engine.begin() as conn:
                # –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—É lesson_series
                await conn.run_sync(lambda sync_conn: LessonSeries.__table__.create(sync_conn, checkfirst=True))
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ lesson_series —Å–æ–∑–¥–∞–Ω–∞")
            print()

            # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ series_id –≤ lessons (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
            print("–®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è series_id –≤ —Ç–∞–±–ª–∏—Ü—É lessons...")
            try:
                await session.execute(text("""
                    ALTER TABLE lessons
                    ADD COLUMN IF NOT EXISTS series_id INTEGER REFERENCES lesson_series(id) ON DELETE SET NULL
                """))
                await session.execute(text("CREATE INDEX IF NOT EXISTS ix_lessons_series_id ON lessons(series_id)"))
                await session.commit()
                print("‚úÖ –ü–æ–ª–µ series_id –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–ª–µ series_id –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
                await session.rollback()
            print()

            # –®–∞–≥ 3: –î–µ–ª–∞–µ–º series_year –∏ series_name nullable
            print("–®–∞–≥ 3: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π series_year –∏ series_name –Ω–∞ nullable...")
            try:
                await session.execute(text("ALTER TABLE lessons ALTER COLUMN series_year DROP NOT NULL"))
                await session.execute(text("ALTER TABLE lessons ALTER COLUMN series_name DROP NOT NULL"))
                await session.commit()
                print("‚úÖ –ü–æ–ª—è series_year –∏ series_name —Ç–µ–ø–µ—Ä—å nullable")
            except Exception as e:
                print(f"‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—è —É–∂–µ nullable: {e}")
                await session.rollback()
            print()

            # –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª—É–∂–µ–±–Ω–æ–π —Å–µ—Ä–∏–∏
            print("–®–∞–≥ 4: –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–ª—É–∂–µ–±–Ω–æ–π —Å–µ—Ä–∏–∏...")
            result = await session.execute(select(LessonTeacher).where(LessonTeacher.is_active == True).limit(1))
            default_teacher = result.scalar_one_or_none()

            if not default_teacher:
                print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è!")
                print("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è")
                return

            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {default_teacher.name} (ID: {default_teacher.id})")
            print()

            # –®–∞–≥ 5: –°–æ–∑–¥–∞—ë–º —Å–ª—É–∂–µ–±–Ω—É—é —Å–µ—Ä–∏—é "–ë–µ–∑ —Å–µ—Ä–∏–∏"
            print("–®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É–∂–µ–±–Ω–æ–π —Å–µ—Ä–∏–∏ '–ë–µ–∑ —Å–µ—Ä–∏–∏'...")
            result = await session.execute(
                select(LessonSeries).where(
                    and_(
                        LessonSeries.year == 1900,
                        LessonSeries.name == "–ë–µ–∑ —Å–µ—Ä–∏–∏"
                    )
                )
            )
            default_series = result.scalar_one_or_none()

            if not default_series:
                default_series = LessonSeries(
                    name="–ë–µ–∑ —Å–µ—Ä–∏–∏",
                    year=1900,
                    description="–°–ª—É–∂–µ–±–Ω–∞—è —Å–µ—Ä–∏—è –¥–ª—è —É—Ä–æ–∫–æ–≤ –±–µ–∑ —Å–µ—Ä–∏–∏",
                    teacher_id=default_teacher.id,
                    is_completed=False,
                    order=-1,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    is_active=True
                )
                session.add(default_series)
                await session.commit()
                await session.refresh(default_series)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–ª—É–∂–µ–±–Ω–∞—è —Å–µ—Ä–∏—è '–ë–µ–∑ —Å–µ—Ä–∏–∏' (ID: {default_series.id})")
            else:
                print(f"‚úÖ –°–ª—É–∂–µ–±–Ω–∞—è —Å–µ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {default_series.id})")
            print()

            # –®–∞–≥ 6: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ (year, name, teacher_id) –∏–∑ —É—Ä–æ–∫–æ–≤
            print("–®–∞–≥ 6: –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤...")
            result = await session.execute(
                select(
                    Lesson.series_year,
                    Lesson.series_name,
                    Lesson.teacher_id,
                    Lesson.book_id,
                    Lesson.theme_id
                ).distinct()
            )
            unique_series = result.all()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(unique_series)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–∏–π")
            print()

            # –®–∞–≥ 7: –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
            print("–®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–∏–π –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤...")
            created_series_count = 0
            series_mapping = {}  # (year, name, teacher_id) -> series_id

            for series_year, series_name, teacher_id, book_id, theme_id in unique_series:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –≥–æ–¥–∞ –∏–ª–∏ –∏–º–µ–Ω–∏
                if not series_year or not series_name:
                    continue

                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
                if not teacher_id:
                    teacher_id = default_teacher.id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–µ—Ä–∏—è
                result = await session.execute(
                    select(LessonSeries).where(
                        and_(
                            LessonSeries.year == series_year,
                            LessonSeries.name == series_name,
                            LessonSeries.teacher_id == teacher_id
                        )
                    )
                )
                existing_series = result.scalar_one_or_none()

                if existing_series:
                    series_mapping[(series_year, series_name, teacher_id)] = existing_series.id
                    continue

                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Ä–∏—é
                new_series = LessonSeries(
                    name=series_name,
                    year=series_year,
                    teacher_id=teacher_id,
                    book_id=book_id,
                    theme_id=theme_id,
                    is_completed=False,
                    is_active=True
                )
                session.add(new_series)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID

                series_mapping[(series_year, series_name, teacher_id)] = new_series.id
                created_series_count += 1
                print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ä–∏—è: {series_year} - {series_name} (ID: {new_series.id})")

            await session.commit()
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_series_count} –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏–π")
            print()

            # –®–∞–≥ 8: –û–±–Ω–æ–≤–ª—è–µ–º series_id –≤ —É—Ä–æ–∫–∞—Ö
            print("–®–∞–≥ 8: –ü—Ä–∏–≤—è–∑–∫–∞ —É—Ä–æ–∫–æ–≤ –∫ —Å–µ—Ä–∏—è–º...")
            result = await session.execute(select(Lesson))
            lessons = result.scalars().all()

            updated_count = 0
            for lesson in lessons:
                if lesson.series_id:
                    # –£–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                    continue

                if lesson.series_year and lesson.series_name and lesson.teacher_id:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å–µ—Ä–∏—é
                    key = (lesson.series_year, lesson.series_name, lesson.teacher_id)
                    if key in series_mapping:
                        lesson.series_id = series_mapping[key]
                        updated_count += 1
                else:
                    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ —Å–ª—É–∂–µ–±–Ω–æ–π —Å–µ—Ä–∏–∏
                    lesson.series_id = default_series.id
                    updated_count += 1

            await session.commit()
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —É—Ä–æ–∫–æ–≤")
            print()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("=" * 60)
            print("–ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("=" * 60)
            print()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ —Å–µ—Ä–∏–π: {created_series_count + 1} (+1 —Å–ª—É–∂–µ–±–Ω–∞—è)")
            print(f"  ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count}")
            print()
            print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è series_year –∏ series_name –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")
            print("   –ò—Ö –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print()
            print("üîÑ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: docker-compose restart bot")
            print("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —É—Ä–æ–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("   3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è: series_year, series_name")
            print()

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            raise


if __name__ == "__main__":
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –∏–∑–º–µ–Ω–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –±—ç–∫–∞–ø!\n")

    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ")
    if response.lower() != "yes":
        print("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        sys.exit(0)

    print("\nüöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏...\n")
    asyncio.run(run_migration())
