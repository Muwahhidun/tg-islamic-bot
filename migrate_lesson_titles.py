"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
"""
import asyncio
from sqlalchemy import select
from sqlalchemy.orm import joinedload

from bot.models.database import async_session_maker
from bot.models.lesson import Lesson


def generate_lesson_title(teacher_name: str, book_name: str, series_year: int, series_name: str, lesson_number: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    parts = []
    if teacher_name:
        parts.append(teacher_name.replace(" ", "_"))
    if book_name:
        parts.append(book_name.replace(" ", "_"))
    parts.append(str(series_year))
    parts.append(series_name.replace(" ", "_"))
    parts.append(f"—É—Ä–æ–∫_{lesson_number}")
    return "_".join(parts)


async def migrate_lesson_titles():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
    async with async_session_maker() as session:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ —Å relationships
        result = await session.execute(
            select(Lesson)
            .options(
                joinedload(Lesson.series),
                joinedload(Lesson.teacher),
                joinedload(Lesson.book)
            )
        )
        lessons = result.scalars().unique().all()

        print(f"\n–ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}\n")
        print("=" * 80)

        updated_count = 0
        skipped_count = 0

        for lesson in lessons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not lesson.series:
                print(f"‚ö†Ô∏è  –£—Ä–æ–∫ {lesson.id}: –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç series)")
                skipped_count += 1
                continue

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            new_title = generate_lesson_title(
                teacher_name=lesson.teacher.name if lesson.teacher else "",
                book_name=lesson.book.name if lesson.book else "",
                series_year=lesson.series.year,
                series_name=lesson.series.name,
                lesson_number=lesson.lesson_number if lesson.lesson_number else 0
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if lesson.title != new_title:
                old_title = lesson.title
                lesson.title = new_title
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º file_id —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                lesson.telegram_file_id = None

                print(f"‚úÖ –£—Ä–æ–∫ {lesson.id}:")
                print(f"   –°—Ç–∞—Ä–æ–µ: {old_title}")
                print(f"   –ù–æ–≤–æ–µ:  {new_title}")
                print()

                updated_count += 1
            else:
                print(f"‚è≠Ô∏è  –£—Ä–æ–∫ {lesson.id}: —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
                skipped_count += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.commit()

        print("=" * 80)
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {updated_count}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π): {skipped_count}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(lessons)}\n")


if __name__ == "__main__":
    print("\nüîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —É—Ä–æ–∫–æ–≤ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n")
    asyncio.run(migrate_lesson_titles())
    print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n")
